import { createClient } from '@supabase/supabase-js';
import { normalizeBookText, checkForBookDuplicates, selectBestBookFromDuplicates, removeBookDuplicates } from '../lib/book-deduplication-service';
import 'dotenv/config';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
function logMessage(message: string, type: 'info' | 'success' | 'warning' | 'error' = 'info') {
  // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
  const timestamp = new Date().toLocaleTimeString('ru-RU');
  let consoleMessage = `[${timestamp}] `;
  
  switch(type) {
    case 'success':
      consoleMessage += `‚úÖ ${message}`;
      break;
    case 'warning':
      consoleMessage += `‚ö†Ô∏è ${message}`;
      break;
    case 'error':
      consoleMessage += `‚ùå ${message}`;
      break;
    default:
      consoleMessage += `üîç ${message}`;
  }
  
  console.log(consoleMessage);
  
  // –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–¥–º–∏–Ω–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
    try {
      (window as any).setStatsUpdateReport(consoleMessage + '\n');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    }
  }
}

async function runDeduplication() {
  logMessage('–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–Ω–∏–≥...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceRoleKey) {
    logMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY', 'error');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª—å—é
  const supabase = createClient(supabaseUrl, supabaseServiceRoleKey, {
    auth: {
      persistSession: false,
    }
  });

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ check-book-duplicates.ts)
    logMessage('–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const allBooks = [];
    let lastCreatedAt = null;
    const batchSize = 1000; // –ü–æ–ª—É—á–∞–µ–º –ø–æ 1000 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑

    while (true) {
      let query = supabase
        .from('books')
        .select('*')
        .order('created_at', { ascending: false }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        .limit(batchSize);

      if (lastCreatedAt) {
        query = query.lt('created_at', lastCreatedAt); // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ lastCreatedAt
      }

      const { data: batch, error } = await query;

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥: ${error.message}`);
      }

      if (!batch || batch.length === 0) {
        break;
      }

      allBooks.push(...batch);
      lastCreatedAt = batch[batch.length - 1].created_at; // –ë–µ—Ä–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏

      logMessage(`–ü–æ–ª—É—á–µ–Ω–æ ${batch.length} –∫–Ω–∏–≥, –≤—Å–µ–≥–æ: ${allBooks.length}`, 'info');

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ batch size, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (batch.length < batchSize) {
        break;
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    if (allBooks.length === 0) {
      logMessage('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏', 'warning');
      return;
    }

    logMessage(`–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∫–Ω–∏–≥: ${allBooks.length}`, 'success');

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const booksByAuthorTitle = new Map<string, typeof allBooks>();
    
    for (const book of allBooks) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
      if (!book.title || !book.author) {
        continue;
      }
      const normalizedAuthor = normalizeBookText(book.author);
      const normalizedTitle = normalizeBookText(book.title);
      const key = `${normalizedAuthor}|${normalizedTitle}`;
      
      if (!booksByAuthorTitle.has(key)) {
        booksByAuthorTitle.set(key, []);
      }
      booksByAuthorTitle.get(key)?.push(book);
    }

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
    const duplicateGroups = Array.from(booksByAuthorTitle.entries())
      .filter(([_, books]) => books.length > 1)
      .map(([key, books]) => ({ 
        author: books[0].author, 
        title: books[0].title, 
        books 
      }));

    logMessage(`–ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥:`);

    let totalDuplicatesFound = 0;
    for (const group of duplicateGroups) {
      logMessage(`–ê–≤—Ç–æ—Ä: "${group.author}", –ù–∞–∑–≤–∞–Ω–∏–µ: "${group.title}"`);
      logMessage(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –≥—Ä—É–ø–ø–µ: ${group.books.length}`);
      totalDuplicatesFound += group.books.length - 1; // –ò—Å–∫–ª—é—á–∞–µ–º –æ–¥–Ω—É –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–Ω–∏–≥—É
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–µ –≤ –≥—Ä—É–ø–ø–µ
      for (let i = 0; i < group.books.length; i++) {
        const book = group.books[i];
        logMessage(`    ${i + 1}. ID: ${book.id}, –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${book.created_at}, –§–∞–π–ª: ${book.file_url ? '–î–ê' : '–ù–ï–¢'}`);
      }
    }

    if (duplicateGroups.length === 0) {
      logMessage('–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'success');
      return;
    }

    logMessage(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicatesFound}`, 'success');

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è
    logMessage('–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤? (–æ—Å—Ç–∞–≤–ª—è—è –ø–æ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–µ –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã, –Ω–æ–≤–µ–π—à—É—é) [y/N]:', 'info');
    
    // –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º —Å–∫—Ä–∏–ø—Ç–µ –º—ã –Ω–µ –±—É–¥–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    logMessage('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.', 'info');
    logMessage('–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å:', 'info');
    logMessage('   1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—ã—à–µ', 'info');
    logMessage('   2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—Å–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—Ä—É—á–Ω—É—é', 'info');
    logMessage('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏', 'info');
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logMessage('–°–≤–æ–¥–∫–∞:', 'info');
    logMessage(`  - –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${allBooks.length}`, 'info');
    logMessage(`  - –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateGroups.length}`, 'info');
    logMessage(`  - –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicatesFound}`, 'info');
    logMessage(`  - –û—Ü–µ–Ω–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥: ${allBooks.length - totalDuplicatesFound}`, 'info');

  } catch (error) {
    logMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
runDeduplication()
  .then(() => {
    logMessage('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
  })
  .catch((error) => {
    logMessage(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
  });