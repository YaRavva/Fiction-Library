import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
function normalizeText(text: string): string {
  if (!text) return '';
  
  let normalized = text.toLowerCase();
  
  // –£–¥–∞–ª—è–µ–º –≥–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö (–≤ —Ñ–æ—Ä–º–∞—Ç–µ (2023), (2019) –∏ —Ç.–¥.)
  normalized = normalized.replace(/\(\d{4}\)/g, '');
  
  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç "ru" (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —è–∑—ã–∫–∞)
  normalized = normalized.replace(/\bru\b/g, '');
  
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  normalized = normalized.trim().replace(/\s+/g, ' ');
  
  return normalized;
}

async function checkBookDuplicates() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceRoleKey) {
    console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    console.log('‚ÑπÔ∏è  –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª—å—é
    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey, {
      auth: {
        persistSession: false,
      }
    });

    // –ó–∞–ø—Ä–æ—Å –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    const { data: duplicateGroups, error } = await supabase
      .from('books')
      .select('id, title, author, created_at')
      .order('author')
      .order('title');
    
    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥: ${error.message}`);
    }

    if (!duplicateGroups || duplicateGroups.length === 0) {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const booksByAuthorTitle = new Map<string, typeof duplicateGroups>();
    
    for (const book of duplicateGroups) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
      if (!book.title || !book.author) {
        continue;
      }
      const normalizedAuthor = normalizeText(book.author);
      const normalizedTitle = normalizeText(book.title);
      const key = `${normalizedAuthor}|${normalizedTitle}`;
      if (!booksByAuthorTitle.has(key)) {
        booksByAuthorTitle.set(key, []);
      }
      booksByAuthorTitle.get(key)?.push(book);
    }

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π (–¥—É–±–ª–∏–∫–∞—Ç—ã)
    const duplicateGroupsList = Array.from(booksByAuthorTitle.entries())
      .filter(([_, books]) => books.length > 1)
      .map(([key, books]) => ({ 
        author: books[0].author, 
        title: books[0].title, 
        books 
      }));

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${duplicateGroupsList.length} –≥—Ä—É–ø–ø –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥:`);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for (const group of duplicateGroupsList) {
      console.log(`\nüìñ –ê–≤—Ç–æ—Ä: "${group.author}", –ù–∞–∑–≤–∞–Ω–∏–µ: "${group.title}"`);
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –≥—Ä—É–ø–ø–µ: ${group.books.length}`);
      
      for (const book of group.books) {
        console.log(`    - ${book.author} - ${book.title}`);
      }
    }

    // –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –ø–æ–º–æ—â—å—é SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log('\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é –æ–∫–Ω–∞
    const { data: allBooks, error: fetchError } = await supabase
      .from('books')
      .select('id, title, author');
      
    if (fetchError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –¥–ª—è SQL-–∞–Ω–∞–ª–∏–∑–∞:', fetchError);
    } else if (allBooks) {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      const booksGrouped = new Map<string, typeof allBooks>();
      
      for (const book of allBooks) {
        if (!book.title || !book.author) {
          continue;
        }
        const normalizedAuthor = normalizeText(book.author);
        const normalizedTitle = normalizeText(book.title);
        const key = `${normalizedAuthor}|${normalizedTitle}`;
        if (!booksGrouped.has(key)) {
          booksGrouped.set(key, []);
        }
        booksGrouped.get(key)?.push(book);
      }
      
      const exactDuplicates = Array.from(booksGrouped.entries())
        .filter(([_, books]) => books.length > 1)
        .flatMap(([_, books]) => books);
      
      if (exactDuplicates.length > 0) {
        console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${exactDuplicates.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–Ω–∏–≥:`);
        const groupedExact = new Map<string, typeof exactDuplicates>();
        
        for (const book of exactDuplicates) {
          if (!book.title || !book.author) {
            continue;
          }
          const normalizedAuthor = normalizeText(book.author);
          const normalizedTitle = normalizeText(book.title);
          const key = `${normalizedAuthor}|${normalizedTitle}`;
          if (!groupedExact.has(key)) {
            groupedExact.set(key, []);
          }
          groupedExact.get(key)?.push(book);
        }
        
        for (const [key, books] of groupedExact.entries()) {
          const [author, title] = key.split('|');
          console.log(`\nüìñ –ê–≤—Ç–æ—Ä: "${author}", –ù–∞–∑–≤–∞–Ω–∏–µ: "${title}" (${books.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)`);
          for (const book of books) {
            console.log(`    - ${book.author} - ${book.title}`);
          }
        }
      } else {
        console.log('\n‚úÖ –¢–æ—á–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
      
      // –ü–æ–¥—Å—á–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const alternativeDuplicateGroups = Array.from(booksGrouped.entries())
        .filter(([_, books]) => books.length > 1);
      
      console.log(`\nüìä –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${alternativeDuplicateGroups.length} –≥—Ä—É–ø–ø –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (${exactDuplicates.length} –∫–Ω–∏–≥)`);
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–Ω–∏–≥
    const totalDuplicateBooks1 = duplicateGroupsList.reduce((sum, group) => sum + group.books.length, 0);
    const totalDuplicateBooks2 = Array.from(booksByAuthorTitle.entries())
      .filter(([_, books]) => books.length > 1)
      .reduce((sum, [_, books]) => sum + books.length, 0);
    
    console.log(`\nüìä –°–≤–æ–¥–∫–∞:`);
    console.log(`  - –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${duplicateGroupsList.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (${totalDuplicateBooks1} –∫–Ω–∏–≥)`);
    console.log(`  - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${Array.from(booksByAuthorTitle.entries()).filter(([_, books]) => books.length > 1).length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (${totalDuplicateBooks2} –∫–Ω–∏–≥)`);
    console.log(`  - –í—Å–µ–≥–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∫–Ω–∏–≥: ${totalDuplicateBooks1}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥:', error);
    throw error;
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkBookDuplicates()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  })
  .catch((error) => {
    console.error('\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π:', error);
  });