import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import { config } from 'dotenv';
config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function diagnoseFileUpdate() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, publication_year')
      .is('file_url', null)
      .order('author', { ascending: true })
      .order('title', { ascending: true });

    if (booksError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: ${booksError.message}`);
    }

    console.log(`üìä –í—Å–µ–≥–æ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${books?.length || 0}`);

    if (!books || books.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–Ω–∏–≥–∏
    const testBooks = books.slice(0, 3);
    console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ${testBooks.length} –∫–Ω–∏–≥:`);

    for (let i = 0; i < testBooks.length; i++) {
      const book = testBooks[i];
      console.log(`\n--- –ö–Ω–∏–≥–∞ ${i + 1}/${testBooks.length} ---`);
      console.log(`üìö "${book.title}" - ${book.author} (ID: ${book.id})`);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
      console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤...');
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –≤ FileSearchManager
      // –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ telegram_files
      const { data: allFiles, error: filesError } = await supabase
        .from('telegram_files')
        .select('message_id, file_name, file_size, mime_type, caption, date')
        .limit(10);

      if (filesError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${filesError.message}`);
        continue;
      }

      console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ Telegram: ${allFiles?.length || 0}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
      if (allFiles && allFiles.length > 0) {
        console.log('üìã –ü–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞:');
        allFiles.slice(0, 3).forEach((file, index) => {
          console.log(`  ${index + 1}. ${file.file_name || `–§–∞–π–ª ${file.message_id}`} (${file.file_size || '—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})`);
        });
      }
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log('\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤:');
    console.log('1. –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('2. –ö–ª—é—á–∏ –¥–ª—è —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è');
    console.log('3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ');
    console.log('4. –ü—Ä–æ–±–ª–µ–º—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    process.exit(1);
  }
}

diagnoseFileUpdate();