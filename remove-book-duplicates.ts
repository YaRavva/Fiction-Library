import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º Unicode –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —ç–º–æ–¥–∑–∏
function normalizeText(text: string): string {
  if (!text) return '';
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º Unicode –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤
  let normalized = text.normalize('NFKC');
  
  // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  normalized = normalized.toLowerCase();
  
  // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
  normalized = normalized.replace(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu, '');
  
  // –£–¥–∞–ª—è–µ–º –≥–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö (–≤ —Ñ–æ—Ä–º–∞—Ç–µ (2023), (2019) –∏ —Ç.–¥.) –∏ –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–∞ –≤ —Å–∫–æ–±–∫–∞—Ö
  normalized = normalized.replace(/\(\d{4}\)/g, '');
  
  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç "ru", "ru", "en" –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
  normalized = normalized.replace(/\b[rRyY–æOuUeEaAnN]\s*[uU]\b/g, '');
  
  // –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–∫–æ–±–∫–∞—Ö, –∫—Ä–æ–º–µ —á–∏—Å–µ–ª (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–æ–±–æ–∫ —Å –≥–æ–¥–∞–º–∏ –∏–∑–¥–∞–Ω–∏—è)
  normalized = normalized.replace(/\((?!\d{4}\))[^\)]+\)/g, '');
  
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  normalized = normalized.trim().replace(/\s+/g, ' ');

  return normalized;
}

async function removeBookDuplicates() {
  console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceRoleKey) {
    console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    console.log('‚ÑπÔ∏è  –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª—å—é
    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey, {
      auth: {
        persistSession: false,
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const allBooks = [];
    let lastCreatedAt = null;
    const batchSize = 1000; // –ü–æ–ª—É—á–∞–µ–º –ø–æ 1000 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑
    
    while (true) {
      let query = supabase
        .from('books')
        .select('id, title, author, created_at, telegram_file_id, file_url, file_size')
        .order('created_at', { ascending: true })
        .limit(batchSize);
        
      if (lastCreatedAt) {
        query = query.gt('created_at', lastCreatedAt);
      }
      
      const { data: batch, error } = await query;
      
      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥: ${error.message}`);
      }
      
      if (!batch || batch.length === 0) {
        break;
      }
      
      allBooks.push(...batch);
      lastCreatedAt = batch[batch.length - 1].created_at;
      
      console.log(`  ‚Üí –ü–æ–ª—É—á–µ–Ω–æ ${batch.length} –∫–Ω–∏–≥, –≤—Å–µ–≥–æ: ${allBooks.length}`);
      
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ batch size, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (batch.length < batchSize) {
        break;
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∫–Ω–∏–≥: ${allBooks.length}`);

    if (!allBooks || allBooks.length === 0) {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return;
    }

    console.log(`\nüìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${allBooks.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    const booksByAuthorTitle = new Map<string, typeof allBooks>();
    
    for (const book of allBooks) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
      if (!book.title || !book.author) {
        continue;
      }
      const normalizedAuthor = normalizeText(book.author);
      const normalizedTitle = normalizeText(book.title);
      const key = `${normalizedAuthor}|${normalizedTitle}`;
      if (!booksByAuthorTitle.has(key)) {
        booksByAuthorTitle.set(key, []);
      }
      booksByAuthorTitle.get(key)?.push(book);
    }

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π (–¥—É–±–ª–∏–∫–∞—Ç—ã)
    const duplicateGroups = Array.from(booksByAuthorTitle.entries())
      .filter(([_, books]) => books.length > 1)
      .map(([key, books]) => ({ 
        key,
        books: books.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime()) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      }));

    if (duplicateGroups.length === 0) {
      console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
    
    const booksToDelete = [];
    
    for (const group of duplicateGroups) {
      console.log(`\nüìñ –ê–≤—Ç–æ—Ä: "${group.books[0].author}", –ù–∞–∑–≤–∞–Ω–∏–µ: "${group.books[0].title}"`);
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –≥—Ä—É–ø–ø–µ: ${group.books.length}`);
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∫–Ω–∏–≥—É (—Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è) –∏ —Å –ª—É—á—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥—É —Å —Ñ–∞–π–ª–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const bookWithFile = group.books.find(book => book.file_url || book.telegram_file_id);
      const bookWithoutFile = group.books.filter(book => !book.file_url && !book.telegram_file_id);
      
      if (bookWithFile) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –≤ –≥—Ä—É–ø–ø–µ, –∫—Ä–æ–º–µ —Ç–æ–π, —É –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Ñ–∞–π–ª
        for (const book of group.books) {
          if (book.id !== bookWithFile.id) {
            booksToDelete.push(book);
            console.log(`    - –£–¥–∞–ª–∏—Ç—å: ID ${book.id.substring(0, 8)}... - ${book.author} - ${book.title} (—Å–æ–∑–¥–∞–Ω–∞: ${book.created_at})`);
          }
        }
      } else {
        // –ï—Å–ª–∏ –Ω–∏ —É –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é (–ø–µ—Ä–≤—É—é –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
        for (let i = 1; i < group.books.length; i++) {
          const book = group.books[i];
          booksToDelete.push(book);
          console.log(`    - –£–¥–∞–ª–∏—Ç—å: ID ${book.id.substring(0, 8)}... - ${book.author} - ${book.title} (—Å–æ–∑–¥–∞–Ω–∞: ${book.created_at})`);
        }
      }
    }

    console.log(`\nüóëÔ∏è –í—Å–µ–≥–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${booksToDelete.length} –∫–Ω–∏–≥`);

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    
    // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥–∏, –ø—Ä–∏–º–µ–Ω—è—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ–π –∫–Ω–∏–≥–∏ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
    let deletedCount = 0;
    for (const book of booksToDelete) {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º telegram_processed_messages, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∫–Ω–∏–≥–æ–π
        const { error: updateError } = await supabase
          .from('telegram_processed_messages')
          .update({ book_id: null })
          .eq('book_id', book.id);

        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è telegram_processed_messages –¥–ª—è –∫–Ω–∏–≥–∏ ${book.id}:`, updateError);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º user_books, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∫–Ω–∏–≥–æ–π
        const { error: updateUserBooksError } = await supabase
          .from('user_books')
          .delete()
          .eq('book_id', book.id);

        if (updateUserBooksError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ user_books –¥–ª—è –∫–Ω–∏–≥–∏ ${book.id}:`, updateUserBooksError);
        }

        // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–Ω–∏–≥—É
        const { error: deleteError } = await supabase
          .from('books')
          .delete()
          .eq('id', book.id);

        if (deleteError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ ${book.id}:`, deleteError);
        } else {
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: ${book.id.substring(0, 8)}... - ${book.author} - ${book.title}`);
          deletedCount++;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ ${book.id}:`, error);
      }
    }

    console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ ${deletedCount} –∫–Ω–∏–≥.`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥:', error);
    throw error;
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
removeBookDuplicates()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
  })
  .catch((error) => {
    console.error('\n‚ùå –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
  });