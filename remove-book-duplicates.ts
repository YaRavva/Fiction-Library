import { createClient } from '@supabase/supabase-js';
import 'dotenv/config';

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
function normalizeText(text: string): string {
  if (!text) return '';
  
  let normalized = text.toLowerCase();
  
  // –£–¥–∞–ª—è–µ–º –≥–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö (–≤ —Ñ–æ—Ä–º–∞—Ç–µ (2023), (2019) –∏ —Ç.–¥.)
  normalized = normalized.replace(/\(\d{4}\)/g, '');
  
  // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç "ru" (—á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —è–∑—ã–∫–∞)
  normalized = normalized.replace(/\bru\b/g, '');
  
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  normalized = normalized.trim().replace(/\s+/g, ' ');
  
  return normalized;
}

async function removeBookDuplicates() {
  console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceRoleKey) {
    console.error('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    console.log('‚ÑπÔ∏è  –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY');
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª—å—é
    const supabase = createClient(supabaseUrl, supabaseServiceRoleKey, {
      auth: {
        persistSession: false,
      }
    });

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: allBooks, error } = await supabase
      .from('books')
      .select('id, title, author, created_at, telegram_file_id, file_url, file_size');
    
    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥: ${error.message}`);
    }

    if (!allBooks || allBooks.length === 0) {
      console.log('‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      return;
    }

    console.log(`\nüìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${allBooks.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    const booksByAuthorTitle = new Map<string, typeof allBooks>();
    
    for (const book of allBooks) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
      if (!book.title || !book.author) {
        continue;
      }
      const normalizedAuthor = normalizeText(book.author);
      const normalizedTitle = normalizeText(book.title);
      const key = `${normalizedAuthor}|${normalizedTitle}`;
      if (!booksByAuthorTitle.has(key)) {
        booksByAuthorTitle.set(key, []);
      }
      booksByAuthorTitle.get(key)?.push(book);
    }

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π (–¥—É–±–ª–∏–∫–∞—Ç—ã)
    const duplicateGroups = Array.from(booksByAuthorTitle.entries())
      .filter(([_, books]) => books.length > 1)
      .map(([key, books]) => ({ 
        key,
        books: books.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime()) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      }));

    if (duplicateGroups.length === 0) {
      console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
    
    const booksToDelete = [];
    
    for (const group of duplicateGroups) {
      console.log(`\nüìñ –ê–≤—Ç–æ—Ä: "${group.books[0].author}", –ù–∞–∑–≤–∞–Ω–∏–µ: "${group.books[0].title}"`);
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –≥—Ä—É–ø–ø–µ: ${group.books.length}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –≤ –≥—Ä—É–ø–ø–µ, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π (—Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π), –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      for (let i = 1; i < group.books.length; i++) {
        const book = group.books[i];
        booksToDelete.push(book);
        console.log(`    - –£–¥–∞–ª–∏—Ç—å: ID ${book.id.substring(0, 8)}... - ${book.author} - ${book.title} (—Å–æ–∑–¥–∞–Ω–∞: ${book.created_at})`);
      }
    }

    console.log(`\nüóëÔ∏è –í—Å–µ–≥–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${booksToDelete.length} –∫–Ω–∏–≥`);

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.');
    console.log('–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ "DELETE_DUPLICATES":');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º readline –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question('> ', (answer) => {
        if (answer === 'DELETE_DUPLICATES') {
            console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
            
            (async () => {
              // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
              for (const book of booksToDelete) {
                try {
                  // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö (–µ—Å–ª–∏ –µ—Å—Ç—å)
                  // –û–±–Ω–æ–≤–ª—è–µ–º telegram_processed_messages, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∫–Ω–∏–≥–æ–π
                  const { error: updateError } = await supabase
                    .from('telegram_processed_messages')
                    .update({ book_id: null })
                    .eq('book_id', book.id);

                  if (updateError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è telegram_processed_messages –¥–ª—è –∫–Ω–∏–≥–∏ ${book.id}:`, updateError);
                  }

                  // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–Ω–∏–≥—É
                  const { error: deleteError } = await supabase
                    .from('books')
                    .delete()
                    .eq('id', book.id);

                  if (deleteError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ ${book.id}:`, deleteError);
                  } else {
                    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: ${book.id.substring(0, 8)}... - ${book.author} - ${book.title}`);
                  }
                } catch (error) {
                  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ ${book.id}:`, error);
                }
              }

              console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ ${booksToDelete.length} –∫–Ω–∏–≥.`);
              rl.close();
            })();
        } else {
            console.log('\n‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.');
            rl.close();
        }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥:', error);
    throw error;
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
removeBookDuplicates()
  .then(() => {
    console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
  })
  .catch((error) => {
    console.error('\n‚ùå –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
  });