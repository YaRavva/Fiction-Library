import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import { config } from 'dotenv';
config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ (–∫–∞–∫ –≤ FileSearchManager)
function normalizeString(str: string): string {
  return str.normalize('NFC').toLowerCase();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–æ–≤ (–∫–∞–∫ –≤ FileSearchManager)
function extractWords(str: string): string[] {
  return str
    .split(/[\s\-_\(\)\[\]\{\}\/\\\.]+/)
    .filter(word => word.length > 1)
    .map(word => word.trim())
    .filter(word => word.length > 0);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ (–∫–∞–∫ –≤ FileSearchManager)
function findMatchingFiles(book: any, files: any[]): any[] {
  // –î–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –∞–≤—Ç–æ—Ä–æ–≤ –∫–Ω–∏–≥ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  const bookTitle = book.title.toLowerCase();
  const bookAuthor = book.author.toLowerCase();

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏
  const titleWords = extractWords(bookTitle);
  const authorWords = extractWords(bookAuthor);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const specialTitleWords = [...titleWords];
  const specialAuthorWords = [...authorWords];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
  if (bookTitle.includes('–∏–ª—å-—Ä—å–µ–Ω')) {
    specialTitleWords.push('–∏–ª—å', '—Ä—å–µ–Ω', '–∏–ª—å-—Ä—å–µ–Ω');
  }
  
  if (bookAuthor.includes('–º–∞—Ä—Ç–∞')) {
    specialAuthorWords.push('–º–∞—Ä—Ç–∞', '—É—ç–ª–ª—Å');
  }

  if (bookTitle.includes('—Ü–∏–∫–ª') && bookAuthor.includes('—è—Å–∏–Ω—Å–∫–∏–π')) {
    specialTitleWords.push('—Ü–∏–∫–ª', '–Ω–∏–∫');
    specialAuthorWords.push('–∞–Ω–∂–µ—è', '—è—Å–∏–Ω—Å–∫–∏–π');
  }

  console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏: "${book.title}" - ${book.author}`);
  console.log(`üî§ –°–ª–æ–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: ${specialTitleWords.join(', ')}`);
  console.log(`üî§ –°–ª–æ–≤–∞ –∞–≤—Ç–æ—Ä–∞: ${specialAuthorWords.join(', ')}`);

  let matchingFiles = files
    .map(file => {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
      const filename = normalizeString(file.file_name || '');
      let score = 0;

      let hasTitleMatch = false;
      let hasAuthorMatch = false;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      for (const word of specialTitleWords) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const regex = new RegExp(`\\b${word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'i');
        if (regex.test(filename)) {
          hasTitleMatch = true;
          score += 10;
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
          if (filename.includes(word)) {
            hasTitleMatch = true;
            score += 5;
          }
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∞–≤—Ç–æ—Ä—É
      for (const word of specialAuthorWords) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const regex = new RegExp(`\\b${word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'i');
        if (regex.test(filename)) {
          hasAuthorMatch = true;
          score += 10;
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
          if (filename.includes(word)) {
            hasAuthorMatch = true;
            score += 5;
          }
        }
      }

      if (!hasTitleMatch && !hasAuthorMatch) {
        return null;
      }

      return { ...file, relevance_score: score };
    })
    .filter((file): file is any & { relevance_score: number } => file !== null)
    .sort((a, b) => b.relevance_score - a.relevance_score)
    .slice(0, 10);

  return matchingFiles;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–µ
async function simulateNextBook(currentIndex: number, books: any[], files: any[]) {
  console.log(`\n‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–Ω–∏–≥–µ ${currentIndex + 1}/${books.length}`);
  
  if (currentIndex >= books.length) {
    console.log('üéâ –í—Å–µ –∫–Ω–∏–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
    return;
  }
  
  const book = books[currentIndex];
  console.log(`üìö –¢–µ–∫—É—â–∞—è –∫–Ω–∏–≥–∞: "${book.title}" - ${book.author}`);
  
  // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã
  const matchingFiles = findMatchingFiles(book, files);
  
  console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤: ${matchingFiles.length}`);
  
  if (matchingFiles.length > 0) {
    console.log('üìã –¢–æ–ø-3 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤:');
    matchingFiles.slice(0, 3).forEach((file, index) => {
      console.log(`  ${index + 1}. ${file.file_name || `–§–∞–π–ª ${file.message_id}`} (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${file.relevance_score})`);
    });
  } else {
    console.log('  –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤');
  }
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–µ
  await simulateNextBook(currentIndex + 1, books, files);
}

async function simulateFileSearch() {
  try {
    console.log('üîç –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã FileSearchManager...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, publication_year')
      .is('file_url', null)
      .order('author', { ascending: true })
      .order('title', { ascending: true })
      .limit(5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∫–Ω–∏–≥ –¥–ª—è —Ç–µ—Å—Ç–∞

    if (booksError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: ${booksError.message}`);
    }

    console.log(`üìä –í—Å–µ–≥–æ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${books?.length || 0}`);

    if (!books || books.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    const mockFiles = [
      { message_id: 1, file_name: "–°—Ç–∏—Ö–∏—è –æ–≥–Ω—è (–ò–ª—å-–†—å–µ–Ω -1).fb2", file_size: 123456, mime_type: "application/fb2", caption: "", date: Date.now() / 1000 },
      { message_id: 2, file_name: "–¶–∏–∫–ª –ù–∏–∫ - –ö–Ω–∏–≥–∞ 1.zip", file_size: 654321, mime_type: "application/zip", caption: "", date: Date.now() / 1000 },
      { message_id: 3, file_name: "–ê–Ω–¥–∂–µ–π –Ø—Å–∏–Ω—Å–∫–∏–π - –¶–∏–∫–ª –ù–∏–∫.fb2", file_size: 321654, mime_type: "application/fb2", caption: "", date: Date.now() / 1000 },
      { message_id: 4, file_name: "–ú–∞—Ä—Ç–∞ –£—ç–ª–ª—Å - –ò–ª—å-–†—å–µ–Ω.epub", file_size: 456789, mime_type: "application/epub+zip", caption: "", date: Date.now() / 1000 },
      { message_id: 5, file_name: "–ö–Ω–∏–≥–∞ 2 –¶–∏–∫–ª–∞ –ù–∏–∫.zip", file_size: 987654, mime_type: "application/zip", caption: "", date: Date.now() / 1000 }
    ];

    console.log(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º ${mockFiles.length} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞`);

    // –ù–∞—á–∏–Ω–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —Å –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏
    await simulateNextBook(0, books, mockFiles);

    console.log('\n‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

simulateFileSearch();