import { NextRequest, NextResponse } from 'next/server';
import { BookWormService } from '@/lib/telegram/book-worm-service';
import { getSupabaseAdmin } from '@/lib/supabase';
import { spawn } from 'child_process';
import { join } from 'path';

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role key
    const supabaseAdmin = getSupabaseAdmin();
    
    if (!supabaseAdmin) {
      return NextResponse.json(
        { error: 'Server configuration error: Supabase admin client not available' },
        { status: 500 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    try {
      const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
      
      if (authError) {
        console.error('Supabase auth error:', authError);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 401
        if (authError.message.includes('Invalid JWT') || authError.message.includes('jwt')) {
          return NextResponse.json(
            { error: 'Unauthorized: Invalid token' },
            { status: 401 }
          );
        }
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 500
        return NextResponse.json(
          { error: 'Authentication service error: ' + authError.message },
          { status: 500 }
        );
      }
      
      if (!user) {
        return NextResponse.json(
          { error: 'Unauthorized: User not found' },
          { status: 401 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
      const { data: profile, error: profileError } = await supabaseAdmin
        .from('user_profiles')
        .select('role')
        .eq('id', user.id)
        .single();

      if (profileError || (profile as { role?: string })?.role !== 'admin') {
        return NextResponse.json(
          { error: 'Forbidden: Admin access required' },
          { status: 403 }
        );
      }
    } catch (authException: unknown) {
      console.error('Authentication exception:', authException);
      const errorMessage = authException instanceof Error ? authException.message : 'Unknown auth error';
      return NextResponse.json(
        { error: 'Authentication failed: ' + errorMessage },
        { status: 500 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ body
    const body = await request.json();
    const mode = body.mode;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
    if (!mode || !['full', 'update', 'index'].includes(mode)) {
      return NextResponse.json({ error: 'Invalid mode. Use "full", "update", or "index"' }, { status: 400 });
    }

    // –î–ª—è —Ä–µ–∂–∏–º–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if (mode === 'index') {
      try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        const bookWorm = await BookWormService.getInstance();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const result = await bookWorm.run('full');
        
        return NextResponse.json({ 
          success: true, 
          message: 'Telegram messages indexing completed',
          mode,
          result
        });
      } catch (indexError: unknown) {
        console.error('Telegram messages indexing error:', indexError);
        const errorMessage = indexError instanceof Error ? indexError.message : 'Unknown indexing error occurred';
        return NextResponse.json({ error: 'Indexing error: ' + errorMessage }, { status: 500 });
      }
    }

    // –î–ª—è —Ä–µ–∂–∏–º–∞ "update" –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
    // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, —Ç–∞–∫ –∏ –Ω–∞ Vercel
    if (mode === 'update') {
      try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        const bookWorm = await BookWormService.getInstance();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const result = await bookWorm.runUpdateSync();
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
        const formattedMessage = `üîÑ –ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:

üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}
‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ${result.added}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ${result.updated}
üîó –ü—Ä–∏–≤—è–∑–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.matched}
üÜî –ù–∞—á–∞—Ç–æ —Å —Å–æ–æ–±—â–µ–Ω–∏—è ID: ${result.lastProcessedMessageId || '–Ω–∞—á–∞–ª–∞'}

üí¨ ${result.message}`;

        console.log(formattedMessage);

        return NextResponse.json({
          success: true,
          message: 'Book Worm update sync completed',
          mode,
          status: 'completed',
          result,
          formattedMessage // –í–∫–ª—é—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç
        });
        
      } catch (syncError: unknown) {
        const errorMessage = syncError instanceof Error ? syncError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏';
        const errorFormattedMessage = `‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ö–Ω–∏–∂–Ω–æ–≥–æ –ß–µ—Ä–≤—è:
        
üìù –û—à–∏–±–∫–∞: ${errorMessage}
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

        console.error(errorFormattedMessage);
        
        return NextResponse.json({ 
          error: 'Sync error: ' + errorMessage,
          formattedErrorMessage: errorFormattedMessage // –í–∫–ª—é—á–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –æ—Ç–≤–µ—Ç
        }, { status: 500 });
      }
    } else if (mode === 'full') {
      // –î–ª—è —Ä–µ–∂–∏–º–∞ "full" –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π endpoint
      return NextResponse.json({ 
        error: 'For full sync, please use the dedicated endpoint at /api/admin/book-worm/full-sync',
        suggestion: 'POST to /api/admin/book-worm/full-sync with the same authorization header'
      }, { status: 400 });
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º
      return NextResponse.json({ error: 'Invalid mode. Use "full", "update", or "index"' }, { status: 400 });
    }
    
  } catch (error: unknown) {
    console.error('Book Worm API error:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return NextResponse.json({ error: 'Internal server error: ' + errorMessage }, { status: 500 });
  }
}