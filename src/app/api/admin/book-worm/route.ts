import { NextRequest, NextResponse } from 'next/server';
import { BookWormService } from '@/lib/telegram/book-worm-service';
import { getSupabaseAdmin } from '@/lib/supabase';
import { spawn } from 'child_process';
import { join } from 'path';

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role key
    const supabaseAdmin = getSupabaseAdmin();
    
    if (!supabaseAdmin) {
      return NextResponse.json(
        { error: 'Server configuration error: Supabase admin client not available' },
        { status: 500 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    try {
      const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
      
      if (authError) {
        console.error('Supabase auth error:', authError);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 401
        if (authError.message.includes('Invalid JWT') || authError.message.includes('jwt')) {
          return NextResponse.json(
            { error: 'Unauthorized: Invalid token' },
            { status: 401 }
          );
        }
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 500
        return NextResponse.json(
          { error: 'Authentication service error: ' + authError.message },
          { status: 500 }
        );
      }
      
      if (!user) {
        return NextResponse.json(
          { error: 'Unauthorized: User not found' },
          { status: 401 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
      const { data: profile, error: profileError } = await supabaseAdmin
        .from('user_profiles')
        .select('role')
        .eq('id', user.id)
        .single();

      if (profileError || (profile as { role?: string })?.role !== 'admin') {
        return NextResponse.json(
          { error: 'Forbidden: Admin access required' },
          { status: 403 }
        );
      }
    } catch (authException: unknown) {
      console.error('Authentication exception:', authException);
      const errorMessage = authException instanceof Error ? authException.message : 'Unknown auth error';
      return NextResponse.json(
        { error: 'Authentication failed: ' + errorMessage },
        { status: 500 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ body
    const body = await request.json();
    const mode = body.mode;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
    if (!mode || !['full', 'update', 'index'].includes(mode)) {
      return NextResponse.json({ error: 'Invalid mode. Use "full", "update", or "index"' }, { status: 400 });
    }

    // –î–ª—è —Ä–µ–∂–∏–º–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
    if (mode === 'index') {
      try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        const bookWorm = new BookWormService();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const result = await bookWorm.indexAllMessages();
        
        return NextResponse.json({ 
          success: true, 
          message: 'Telegram messages indexing completed',
          mode,
          result
        });
      } catch (indexError: unknown) {
        console.error('Telegram messages indexing error:', indexError);
        const errorMessage = indexError instanceof Error ? indexError.message : 'Unknown indexing error occurred';
        return NextResponse.json({ error: 'Indexing error: ' + errorMessage }, { status: 500 });
      }
    }

    // –î–ª—è —Ä–µ–∂–∏–º–∞ "update" –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
    // –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, —Ç–∞–∫ –∏ –Ω–∞ Vercel
    if (mode === 'update') {
      try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        const bookWorm = new BookWormService();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const result = await bookWorm.runUpdateSync();
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
        const reportLines = [
          'üêã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –ö–Ω–∏–∂–Ω–æ–≥–æ –ß–µ—Ä–≤—è –≤ —Ä–µ–∂–∏–º–µ –û–ë–ù–û–í–õ–ï–ù–ò–Ø:',
          '=====================================================',
          '',
          'üìö –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:',
          `   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.metadata.processed}`,
          `   ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.metadata.added}`,
          `   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.metadata.updated}`,
          `   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.metadata.skipped}`,
          `   ‚ùå –û—à–∏–±–æ–∫: ${result.metadata.errors}`,
          '',
          'üìÅ –§–∞–π–ª—ã:',
          `   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.files.processed}`,
          `   üîó –ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${result.files.linked}`,
          `   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.files.skipped}`,
          `   ‚ùå –û—à–∏–±–æ–∫: ${result.files.errors}`,
          '',
          'üìä –°–≤–æ–¥–∫–∞:',
          `   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${result.metadata.processed + result.files.processed}`,
          `   –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${result.metadata.added + result.metadata.updated + result.files.linked}`,
          `   –û—à–∏–±–æ–∫: ${result.metadata.errors + result.files.errors}`
        ];
        
        return NextResponse.json({ 
          success: true, 
          message: 'Book Worm update sync completed',
          mode,
          result,
          report: reportLines.join('\n')
        });
      } catch (syncError: unknown) {
        console.error('Book Worm sync error:', syncError);
        const errorMessage = syncError instanceof Error ? syncError.message : 'Unknown sync error occurred';
        return NextResponse.json({ error: 'Sync error: ' + errorMessage }, { status: 500 });
      }
    } else {
      // –î–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥ —Å –∑–∞–ø—É—Å–∫–æ–º –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      // —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (process.env.NODE_ENV !== 'development') {
        // –í production —Å—Ä–µ–¥–µ (–≤–∫–ª—é—á–∞—è Vercel) –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å—Ä–µ–¥—ã
        return NextResponse.json({ 
          error: 'Full sync is only available in development mode due to environment limitations. Please run it locally.' 
        }, { status: 400 });
      }
      
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ tsx —á–µ—Ä–µ–∑ node_modules
        const scriptPath = join(process.cwd(), 'src', 'scripts', 'run-book-worm.ts');
        // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ npx tsx (–∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö)
        const child = spawn('npx', ['tsx', scriptPath, mode], {
          cwd: process.cwd(),
          env: process.env,
          stdio: ['pipe', 'pipe', 'pipe']
        });

        return NextResponse.json({ 
          success: true, 
          message: `Book Worm started in ${mode} mode`,
          mode,
          pid: child.pid
        });
      } catch (spawnError: unknown) {
        console.error('Book Worm spawn error:', spawnError);
        const errorMessage = spawnError instanceof Error ? spawnError.message : 'Unknown spawn error occurred';
        return NextResponse.json({ error: 'Failed to start process: ' + errorMessage }, { status: 500 });
      }
    }
    
  } catch (error: unknown) {
    console.error('Book Worm API error:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return NextResponse.json({ error: 'Internal server error: ' + errorMessage }, { status: 500 });
  }
}