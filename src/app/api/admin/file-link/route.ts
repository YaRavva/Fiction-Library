import { NextRequest, NextResponse } from 'next/server';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

/**
 * POST /api/admin/file-link
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ –∫–Ω–∏–≥–µ
 *
 * Body:
 * - bookId: string (ID –∫–Ω–∏–≥–∏)
 * - fileMessageId: number (ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º –≤ Telegram)
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const token = authHeader.replace('Bearer ', '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, serviceRoleKey);

    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ body
    const body = await request.json();
    const { bookId, fileMessageId, channelId = 1515159552 } = body;

    if (!bookId || !fileMessageId) {
      return NextResponse.json(
        { error: 'bookId and fileMessageId are required' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { data: book, error: bookError } = await supabase
      .from('books')
      .select('*')
      .eq('id', bookId)
      .single();

    if (bookError || !book) {
      return NextResponse.json(
        { error: 'Book not found' },
        { status: 404 }
      );
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const bookInfo = `"${book.title}" –∞–≤—Ç–æ—Ä–∞ "${book.author}"`;
    console.log(`üîó –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É —Ñ–∞–π–ª–∞ –∫ –∫–Ω–∏–≥–µ ${bookInfo}...`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
      const { FileLinkService } = await import('@/lib/file-link-service');
      const fileLinkService = await FileLinkService.getInstance();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
      const { fileName, mimeType } = await fileLinkService.getFileInfo(fileMessageId, channelId);
      const bucketName = process.env.S3_BUCKET_NAME;
      if (!bucketName) {
        throw new Error('S3_BUCKET_NAME environment variable is not set.');
      }

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ ${fileName} –≤ S3 –±–∞–∫–µ—Ç–µ...`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ S3
      const s3Key = fileName; // –ò—Å–ø–æ–ª—å–∑—É–µ–º fileName –∫–∞–∫ –∫–ª—é—á –≤ S3
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ S3
      let existingFileSize = 0;
      let fileExists = false;
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º S3 —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const { headObject } = await import('@/lib/s3-service');
        const fileMetadata = await headObject(s3Key, bucketName);
        if (fileMetadata) {
          existingFileSize = fileMetadata.ContentLength || 0;
          fileExists = true;
          console.log(`‚úÖ –§–∞–π–ª ${fileName} –Ω–∞–π–¥–µ–Ω –≤ S3 —Å —Ä–∞–∑–º–µ—Ä–æ–º ${existingFileSize} –±–∞–π—Ç`);
        }
      } catch (error) {
        // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        console.log(`‚ÑπÔ∏è –§–∞–π–ª ${fileName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3 (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π):`, (error as Error).message);
        fileExists = false;
      }

      if (fileExists) {
        console.log(`üîÑ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä...`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const { buffer: newFileBuffer, fileName: newFileName, mimeType: newMimeType } = await fileLinkService.downloadAndUploadFile(
          fileMessageId,
          channelId,
          book
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if (mimeType !== newMimeType) {
          console.log(`‚ö†Ô∏è –¢–∏–ø —Ñ–∞–π–ª–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π: ${mimeType}, –Ω–æ–≤—ã–π: ${newMimeType}), –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª...`);
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π
          const { deleteObject } = await import('@/lib/s3-service');
          await deleteObject(s3Key, bucketName);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ S3
          await fileLinkService.uploadToStorage(newFileName, newFileBuffer, newMimeType);
          
          // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫ –∫–Ω–∏–≥–µ
          const result = await fileLinkService.linkFileToBook(
            bookId,
            newFileName,
            newFileName,
            newFileBuffer.length,
            newMimeType
          );
          
          if (result.success) {
            console.log(`‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ ${bookInfo}`);
            return NextResponse.json({
              success: true,
              message: `–ù–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ ${bookInfo}`,
              fileUrl: result.fileUrl,
              storagePath: result.storagePath
            });
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:`, result.error);
            return NextResponse.json(
              { error: result.error || 'Failed to link new file' },
              { status: 500 }
            );
          }
        } else if (existingFileSize === newFileBuffer.length) {
          console.log(`‚úÖ –¢–∏–ø –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª...`);
          // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3
          const result = await fileLinkService.linkExistingFileToBook(
            bookId,
            s3Key,
            fileName,
            mimeType,
            existingFileSize
          );
          
          if (result.success) {
            console.log(`‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ ${bookInfo}`);
            return NextResponse.json({
              success: true,
              message: `–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ ${bookInfo}`,
              fileUrl: result.fileUrl,
              storagePath: result.storagePath
            });
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞:`, result.error);
            return NextResponse.json(
              { error: result.error || 'Failed to link existing file' },
              { status: 500 }
            );
          }
        } else {
          console.log(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π: ${existingFileSize}, –Ω–æ–≤—ã–π: ${newFileBuffer.length}), –∑–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª...`);
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π
          const { deleteObject } = await import('@/lib/s3-service');
          await deleteObject(s3Key, bucketName);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ S3
          await fileLinkService.uploadToStorage(newFileName, newFileBuffer, newMimeType);
          
          // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫ –∫–Ω–∏–≥–µ
          const result = await fileLinkService.linkFileToBook(
            bookId,
            newFileName,
            newFileName,
            newFileBuffer.length,
            newMimeType
          );
          
          if (result.success) {
            console.log(`‚úÖ –ù–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ ${bookInfo}`);
            return NextResponse.json({
              success: true,
              message: `–ù–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ ${bookInfo}`,
              fileUrl: result.fileUrl,
              storagePath: result.storagePath
            });
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:`, result.error);
            return NextResponse.json(
              { error: result.error || 'Failed to link new file' },
              { status: 500 }
            );
          }
        }
      } else {
        console.log(`üì• –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ S3, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª ${fileName} –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channelId}...`);
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π
        const result = await fileLinkService.processFileForBook(fileMessageId, channelId, book);

        if (result.success) {
          console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ ${bookInfo}`);

          return NextResponse.json({
            success: true,
            message: `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ ${bookInfo}`,
            fileUrl: result.fileUrl,
            storagePath: result.storagePath
          });
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–∞–π–ª–∞:`, result.error);
          return NextResponse.json(
            { error: result.error || 'Failed to link file' },
            { status: 500 }
          );
        }
      }

    } catch (linkError) {
      console.error('Error linking file:', linkError);
      return NextResponse.json(
        { error: 'Failed to link file to book', details: (linkError as Error).message },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('Error in file-link API:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}