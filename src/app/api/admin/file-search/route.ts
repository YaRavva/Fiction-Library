import { NextRequest, NextResponse } from 'next/server';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

/**
 * POST /api/admin/file-search
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
 *
 * Body:
 * - action: 'search' | 'process' | 'auto_process'
 * - bookId?: string (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏)
 * - fileMessageId?: number (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
 * - channelId?: number (ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, serviceRoleKey);

    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ body
    const body = await request.json();
    const { action, bookId, fileMessageId, channelId = 1515159552 } = body;

    if (!action) {
      return NextResponse.json(
        { error: 'Action is required' },
        { status: 400 }
      );
    }

    switch (action) {
      case 'search': {
        // –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–Ω–∏–≥–∞–º –±–µ–∑ —Ñ–∞–π–ª–æ–≤
        const { count: booksWithoutFiles } = await supabase
          .from('books')
          .select('*', { count: 'exact', head: true })
          .is('file_url', null);

        if (!booksWithoutFiles || booksWithoutFiles === 0) {
          return NextResponse.json({
            message: '–í—Å–µ –∫–Ω–∏–≥–∏ —É–∂–µ –∏–º–µ—é—Ç —Ñ–∞–π–ª—ã',
            results: [],
            totalBooks: 0
          });
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return NextResponse.json({
          message: `–ù–∞–π–¥–µ–Ω–æ ${booksWithoutFiles} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.`,
          results: [],
          totalBooks: booksWithoutFiles,
          availableFiles: 0
        });
      }

      case 'process': {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏ - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ
        return NextResponse.json({
          message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö',
          error: 'Not implemented yet'
        }, { status: 501 });
      }

      case 'auto_process': {
        // –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ
        return NextResponse.json({
          message: '–ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö',
          error: 'Not implemented yet'
        }, { status: 501 });
      }

      default:
        return NextResponse.json(
          { error: 'Invalid action. Use: search, process, or auto_process' },
          { status: 400 }
        );
    }
  } catch (error) {
    console.error('File search error:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * GET /api/admin/file-search/status
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
 */
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const token = authHeader.replace('Bearer ', '');

    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, serviceRoleKey);

    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–Ω–∏–≥–∞–º –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    const { count: booksWithoutFiles } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true })
      .or('file_url.is.null,file_url.eq.');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–Ω–∏–≥–∞–º
    const { count: totalBooks } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true });

    return NextResponse.json({
      stats: {
        booksWithoutFiles: booksWithoutFiles || 0,
        totalBooks: totalBooks || 0,
        coveragePercentage: totalBooks ? Math.round(((totalBooks - (booksWithoutFiles || 0)) / totalBooks) * 100) : 0
      }
    });
  } catch (error) {
    console.error('Error getting file search status:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}