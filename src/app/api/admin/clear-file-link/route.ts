import { NextRequest, NextResponse } from 'next/server';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

/**
 * POST /api/admin/clear-file-link
 * –û—á–∏—â–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É —Ñ–∞–π–ª–∞ –∫ –∫–Ω–∏–≥–µ
 *
 * Body:
 * - bookId: string (ID –∫–Ω–∏–≥–∏)
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const token = authHeader.replace('Bearer ', '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, serviceRoleKey);

    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ body
    const body = await request.json();
    const { bookId } = body;

    if (!bookId) {
      return NextResponse.json(
        { error: 'bookId is required' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { data: book, error: bookError } = await supabase
      .from('books')
      .select('*')
      .eq('id', bookId)
      .single();

    if (bookError || !book) {
      return NextResponse.json(
        { error: 'Book not found' },
        { status: 404 }
      );
    }

    console.log(`üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏ "${book.title}"...`);

    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É —Ñ–∞–π–ª–∞ –∫ –∫–Ω–∏–≥–µ
      const { data, error } = await supabase
        .from('books')
        .update({
          file_url: null,
          storage_path: null,
          file_size: null,
          file_format: null,
          telegram_file_id: null,
          updated_at: new Date().toISOString()
        })
        .eq('id', bookId)
        .select()
        .single();

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏: ${error.message}`);
      }

      console.log(`‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –∫–Ω–∏–≥–∏ "${book.title}"`);

      return NextResponse.json({
        success: true,
        message: `–ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –∫–Ω–∏–≥–∏ "${book.title}"`
      });

    } catch (clearError) {
      console.error('Error clearing file link:', clearError);
      return NextResponse.json(
        { error: 'Failed to clear file link for book', details: (clearError as Error).message },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('Error in clear-file-link API:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}