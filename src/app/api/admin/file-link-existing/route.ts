import { NextRequest, NextResponse } from 'next/server';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

/**
 * POST /api/admin/file-link-existing
 * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –≤ storage –∫ –∫–Ω–∏–≥–µ
 *
 * Body:
 * - bookId: string (ID –∫–Ω–∏–≥–∏)
 * - fileMessageId: number (ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º –≤ Telegram)
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const token = authHeader.replace('Bearer ', '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, serviceRoleKey);

    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ body
    const body = await request.json();
    const { bookId, fileMessageId, channelId = 1515159552 } = body;

    if (!bookId || !fileMessageId) {
      return NextResponse.json(
        { error: 'bookId and fileMessageId are required' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { data: book, error: bookError } = await supabase
      .from('books')
      .select('*')
      .eq('id', bookId)
      .single();

    if (bookError || !book) {
      return NextResponse.json(
        { error: 'Book not found' },
        { status: 404 }
      );
    }

    console.log(`üîó –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ –∫ –∫–Ω–∏–≥–µ "${book.title}"...`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
      const { FileLinkService } = await import('@/lib/file-link-service');
      const fileLinkService = await FileLinkService.getInstance();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏
      const { fileName, mimeType } = await fileLinkService.getFileInfo(fileMessageId, channelId);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ storage (–∫–∞–∫ –≤ file-service.ts)
      const storagePath = `books/${fileName}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ storage
      const { data: existingFile, error: storageError } = await supabase.storage
        .from('books')
        .list('books', {
          search: fileName
        });

      if (storageError || !existingFile || existingFile.length === 0) {
        return NextResponse.json(
          { error: 'File not found in storage' },
          { status: 404 }
        );
      }

      // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞
      const file = existingFile[0];
      const fileSize = file.metadata?.size || 0;
      const fileExtension = fileName.toLowerCase().split('.').pop();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
      const allowedFormats = ['fb2', 'zip'];
      if (!fileExtension || !allowedFormats.includes(fileExtension)) {
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ storage
        await supabase.storage.from('books').remove([storagePath]);
        return NextResponse.json(
          { error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${fileExtension}. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: fb2, zip` },
          { status: 400 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è fb2 - 100 –±–∞–π—Ç, –¥–ª—è zip - 1000 –±–∞–π—Ç)
      if (fileExtension === 'fb2' && fileSize < 100) {
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ storage
        await supabase.storage.from('books').remove([storagePath]);
        return NextResponse.json(
          { error: `–§–∞–π–ª fb2 —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: ${fileSize} –±–∞–π—Ç. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100 –±–∞–π—Ç` },
          { status: 400 }
        );
      }
      
      if (fileExtension === 'zip' && fileSize < 1000) {
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ storage
        await supabase.storage.from('books').remove([storagePath]);
        return NextResponse.json(
          { error: `–§–∞–π–ª zip —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: ${fileSize} –±–∞–π—Ç. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 1000 –±–∞–π—Ç` },
          { status: 400 }
        );
      }

      console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –≤ storage: ${storagePath}`);

      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∫ –∫–Ω–∏–≥–µ
      const result = await fileLinkService.linkExistingFileToBook(
        bookId,
        storagePath,
        fileName,
        mimeType
      );

      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
      if (!result.success && result.error === 'FILE_MISMATCH_NEEDS_REUPLOAD') {
        return NextResponse.json(
          { error: 'FILE_MISMATCH_NEEDS_REUPLOAD' },
          { status: 422 } // Unprocessable Entity
        );
      }

      if (result.success) {
        console.log(`‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ "${book.title}"`);

        return NextResponse.json({
          success: true,
          message: `–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ "${book.title}"`,
          fileUrl: result.fileUrl,
          storagePath: result.storagePath
        });
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞:`, result.error);
        return NextResponse.json(
          { error: result.error || 'Failed to link existing file' },
          { status: 500 }
        );
      }

    } catch (linkError) {
      console.error('Error linking existing file:', linkError);
      return NextResponse.json(
        { error: 'Failed to link existing file to book', details: (linkError as Error).message },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('Error in file-link-existing API:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}