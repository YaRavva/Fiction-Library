import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { TelegramSyncService } from '@/lib/telegram/sync';
import { DownloadWorker } from '@/lib/telegram/download-worker';
import { TelegramService } from '@/lib/telegram/client';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

/**
 * POST /api/admin/download-files-limit
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑ Telegram —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    const limit = body.limit || 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Ñ–∞–π–ª–æ–≤

    console.log(`üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å —Å –ª–∏–º–∏—Ç–æ–º: ${limit}`);

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
    const channel = await telegramClient.getFilesChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç: ${limit})...`);
    const messages = await Promise.race([
      telegramClient.getMessages(channelId, limit) as unknown as any[],
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout getting messages')), 60000))
    ]) as unknown as any[];
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å\n`);

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å
    const worker = await DownloadWorker.getInstance();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    let addedCount = 0;
    let skippedCount = 0;
    
    for (const msg of messages) {
      const anyMsg = msg as unknown as {[key: string]: unknown};
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–¥–∏–∞ (—Ñ–∞–π–ª)
      if (!(anyMsg.media as unknown)) {
        console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        skippedCount++;
        continue;
      }
      
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        await worker.addTask(String(anyMsg.id), channelId, 0);
        addedCount++;
        console.log(`  ‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}`);
      } catch (msgError) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, msgError);
        skippedCount++;
      }
    }
    
    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${addedCount} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏
    let report = `üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å\n\n`;
    report += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    report += `- –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${messages.length}\n`;
    report += `- –ó–∞–¥–∞—á –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${addedCount}\n`;
    report += `- –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}\n\n`;
    
    if (addedCount > 0) {
      report += `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n`;
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
      let taskIndex = 1;
      for (const msg of messages) {
        const anyMsg = msg as unknown as {[key: string]: unknown};
        if (anyMsg.media as unknown) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
          let filename = `book_${anyMsg.id}.fb2`;
          if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).attributes) {
            const attributes = (anyMsg.document as {[key: string]: unknown}).attributes as unknown[];
            const attrFileName = attributes.find((attr: unknown) => {
              const attrObj = attr as {[key: string]: unknown};
              return attrObj.className === 'DocumentAttributeFilename';
            }) as {[key: string]: unknown} | undefined;
            if (attrFileName && attrFileName.fileName) {
              filename = attrFileName.fileName as string;
            }
          }
          report += `${taskIndex}. ${filename} (ID: ${anyMsg.id})\n`;
          taskIndex++;
        }
      }
      report += `\nüì• –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–º.\n`;
      report += `–î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á:\n`;
      report += `- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä" –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏\n`;
      report += `- –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: npm run start-download-worker\n\n`;
    }
    
    if (skippedCount > 0) {
      report += `‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n`;
      let skippedIndex = 1;
      for (const msg of messages) {
        const anyMsg = msg as unknown as {[key: string]: unknown};
        if (!(anyMsg.media as unknown)) {
          report += `${skippedIndex}. –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} (–±–µ–∑ –º–µ–¥–∏–∞)\n`;
          skippedIndex++;
        }
      }
      report += `\n`;
    }
    
    report += `üìä –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:\n`;
    report += `- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: —Ä–∞–∑–¥–µ–ª "–û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏"\n`;
    report += `- –ö–æ–º–∞–Ω–¥–∞: npm run check-download-queue\n`;
    
    return NextResponse.json({
      message: '–ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å',
      results: {
        added: addedCount,
        skipped: skippedCount,
        total: messages.length,
        errors: [],
        actions: [
          `–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${messages.length}`,
          `–ó–∞–¥–∞—á –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: ${addedCount}`,
          `–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`
        ]
      },
      report
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å:', error);
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}