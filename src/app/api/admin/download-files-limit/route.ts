import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { TelegramSyncService } from '@/lib/telegram/sync';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

/**
 * POST /api/admin/download-files-limit
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    const limit = body.limit || 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Ñ–∞–π–ª–æ–≤

    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º: ${limit}`);

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
    const results = await syncService.downloadAndProcessFilesDirectly(limit);
    
    const successCount = results.filter((result: { success?: boolean; skipped?: boolean }) => result.success !== false && !result.skipped).length;
    const skippedCount = results.filter((result: { skipped?: boolean }) => result.skipped).length;
    const failedCount = results.length - successCount - skippedCount;
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ, ${failedCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
    let report = `–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n`;
    report += `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.length}\n`;
    report += `–£—Å–ø–µ—à–Ω–æ: ${successCount}\n`;
    report += `–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}\n`;
    report += `–° –æ—à–∏–±–∫–∞–º–∏: ${failedCount}\n\n`;
    
    if (results.length > 0) {
      report += `–î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n`;
      results.forEach((result: any, index: number) => {
        let status = '‚úÖ';
        if (result.skipped) {
          status = '‚ÑπÔ∏è';
        } else if (!result.success) {
          status = '‚ùå';
        }
        
        report += `${index + 1}. ${status} ${result.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${result.messageId})\n`;
        if (result.skipped) {
          const reason = result.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
          const reasonText = reason === 'book_not_found' ? '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' : 
                            reason === 'already_processed' ? '–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' : 
                            reason === 'book_not_imported' ? '–ö–Ω–∏–≥–∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞' : reason;
          report += `   –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}\n`;
        } else if (!result.success && result.error) {
          report += `   –û—à–∏–±–∫–∞: ${result.error}\n`;
        }
      });
    }
    
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    return NextResponse.json({
      message: 'File download completed',
      results: {
        success: successCount,
        skipped: skippedCount,
        failed: failedCount,
        errors: [],
        actions: [
          `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.length}`,
          `–£—Å–ø–µ—à–Ω–æ: ${successCount}`,
          `–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`,
          `–° –æ—à–∏–±–∫–∞–º–∏: ${failedCount}`
        ]
      },
      report
    });
  } catch (error) {
    console.error('File download error:', error);
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}