import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
import { TelegramService } from '@/lib/telegram/client';
import { FileProcessingService } from '@/lib/telegram/file-processing-service';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

/**
 * POST /api/admin/download-files-limit
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑ Telegram —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    const limit = body.limit || 10; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Ñ–∞–π–ª–æ–≤

    console.log(`üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å —Å –ª–∏–º–∏—Ç–æ–º: ${limit}`);

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
    const channel = await telegramClient.getFilesChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç: ${limit})...`);
    const messages = await Promise.race([
      telegramClient.getMessages(channelId, limit) as unknown as any[],
      new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout getting messages')), 60000))
    ]) as unknown as any[];
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å\n`);

    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    const fileService = await FileProcessingService.getInstance();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é (–≤–º–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å)
    let addedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    for (const msg of messages) {
      const anyMsg = msg as unknown as {[key: string]: unknown};
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–¥–∏–∞ (—Ñ–∞–π–ª)
      if (!(anyMsg.media as unknown)) {
        console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        skippedCount++;
        continue;
      }
      
      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
        const result = await fileService.processSingleFile(anyMsg);
        if (result.success) {
          addedCount++;
          console.log(`  ‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${anyMsg.id}`);
        } else {
          skippedCount++;
          console.log(`  ‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω: ${anyMsg.id} - ${result.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
        }
      } catch (msgError) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${anyMsg.id}:`, msgError);
        errorCount++;
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${addedCount} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${skippedCount} –ø—Ä–æ–ø—É—â–µ–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏
    let report = `üìö –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤\n\n`;
    report += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    report += `- –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${messages.length}\n`;
    report += `- –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${addedCount}\n`;
    report += `- –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}\n`;
    report += `- –û—à–∏–±–æ–∫: ${errorCount}\n\n`;
    
    if (addedCount > 0) {
      report += `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n`;
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
      let taskIndex = 1;
      for (const msg of messages) {
        const anyMsg = msg as unknown as {[key: string]: unknown};
        if (anyMsg.media as unknown) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
          let filename = `book_${anyMsg.id}.fb2`;
          if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).attributes) {
            const attributes = (anyMsg.document as {[key: string]: unknown}).attributes as unknown[];
            const attrFileName = attributes.find((attr: unknown) => {
              const attrObj = attr as {[key: string]: unknown};
              return attrObj.className === 'DocumentAttributeFilename';
            }) as {[key: string]: unknown} | undefined;
            if (attrFileName && attrFileName.fileName) {
              filename = attrFileName.fileName as string;
            }
          }
          report += `${taskIndex}. ${filename} (ID: ${anyMsg.id})\n`;
          taskIndex++;
        }
      }
      report += `\nüì• –§–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n\n`;
    }
    
    if (skippedCount > 0) {
      report += `‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n`;
      let skippedIndex = 1;
      for (const msg of messages) {
        const anyMsg = msg as unknown as {[key: string]: unknown};
        if (!(anyMsg.media as unknown)) {
          report += `${skippedIndex}. –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} (–±–µ–∑ –º–µ–¥–∏–∞)\n`;
          skippedIndex++;
        }
      }
      report += `\n`;
    }
    
    if (errorCount > 0) {
      report += `‚ùå –û—à–∏–±–∫–∏:\n`;
      report += `- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: ${errorCount}\n\n`;
    }
    
    return NextResponse.json({
      message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      results: {
        processed: addedCount,
        skipped: skippedCount,
        errors: errorCount,
        total: messages.length
      },
      report
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}