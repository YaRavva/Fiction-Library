import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { taskManager } from '@/lib/task-manager';
import { BackgroundDownloadHandler } from '@/lib/background-download';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

/**
 * POST /api/admin/download-files
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–Ω–∏–≥ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let limit = 50; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try {
      const body = await request.json();
      limit = body.limit || limit;
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const operationId = `download-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    taskManager.createTask(operationId);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    setImmediate(() => {
      BackgroundDownloadHandler.startDownload(operationId, limit);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    return NextResponse.json({
      message: '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞',
      operationId,
      status: 'started'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * GET /api/admin/download-files?operationId=...
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const operationId = request.nextUrl.searchParams.get('operationId');
    
    if (!operationId) {
      return NextResponse.json(
        { error: 'Missing operationId parameter' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    const taskStatus = taskManager.getTaskStatus(operationId);
    
    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ—à–∏–±–∫—É
    if (!taskStatus) {
      return NextResponse.json(
        { error: 'Operation not found' },
        { status: 404 }
      );
    }

    // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if (taskStatus.status === 'completed' && taskStatus.result) {
      const result = taskStatus.result;
      const successCount = result.successCount || 0;
      const failedCount = result.failedCount || 0;
      const skippedCount = result.skippedCount || 0;
      const results = result.results || [];
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
      let report = `üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤\n`;
      report += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
      report += `  ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n`;
      report += `  ‚ùå –û—à–∏–±–∫–∏: ${failedCount}\n`;
      report += `  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}\n`;
      report += `  üìö –í—Å–µ–≥–æ: ${result.totalFiles || results.length}\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageLines = taskStatus.message ? taskStatus.message.split('\n') : [];
      // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ñ–∞–π–ª–æ–≤ (–≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å—Ç—Ä–æ–∫–∏ —Å "üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ:")
      const historyLines = [];
      for (const line of messageLines) {
        if (line.startsWith('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ:')) {
          break;
        }
        if (line.includes('‚úÖ') || line.includes('‚ùå') || line.includes('‚ö†Ô∏è')) {
          historyLines.push(line);
        }
      }
      
      if (historyLines.length > 0) {
        report += historyLines.join('\n') + '\n';
      }

      return NextResponse.json({
        message: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        operationId,
        status: taskStatus.status,
        progress: taskStatus.progress,
        results: {
          success: successCount,
          failed: failedCount,
          skipped: skippedCount,
          errors: [],
          actions: [
            `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${result.totalFiles || results.length}`,
            `–£—Å–ø–µ—à–Ω–æ: ${successCount}`,
            `–° –æ—à–∏–±–∫–∞–º–∏: ${failedCount}`,
            `–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`,
            ...(results.map((result: any, index: number) => {
              const status = result.success !== false ? '‚úÖ' : '‚ùå';
              const filename = result.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏';
              if (result.skipped) {
                return `‚ö†Ô∏è ${filename} (–ø—Ä–æ–ø—É—â–µ–Ω)`;
              }
              return `${status} ${filename}`;
            }))
          ]
        },
        report
      });
    }
    
    // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
    let report = `üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤\n\n`;
    
    // –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const messageLines = taskStatus.message ? taskStatus.message.split('\n') : []
    if (messageLines.length > 0) {
      // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (messageLines[0]) {
        report += `–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${messageLines[0]}\n`;
      }
      
      // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      for (let i = 1; i < messageLines.length; i++) {
        if (messageLines[i]) {
          report += `${messageLines[i]}\n`;
        }
      }
    } else {
      report += `${taskStatus.message || ''}\n`;
    }
    
    report += `\nüìä –°—Ç–∞—Ç—É—Å: ${taskStatus.status}  üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${taskStatus.progress}%\n`;

    return NextResponse.json({
      operationId,
      status: taskStatus.status,
      progress: taskStatus.progress,
      message: taskStatus.message,
      result: taskStatus.result,
      createdAt: taskStatus.createdAt,
      updatedAt: taskStatus.updatedAt,
      report
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}