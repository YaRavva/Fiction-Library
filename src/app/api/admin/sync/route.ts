import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { TelegramSyncService } from '@/lib/telegram/sync';
import { MetadataParser } from '@/lib/telegram/parser';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

/**
 * Enhanced duplicate checking function
 * Checks for duplicates based on multiple criteria
 */
async function checkForDuplicates(
  title: string,
  author: string,
  publicationYear?: number
): Promise<{ exists: boolean; book?: { id: string; title: string; author: string; publication_year?: number; file_url?: string; created_at: string; updated_at: string } }> {
  try {
    let query = supabaseAdmin
      .from('books')
      .select('id, title, author, publication_year, file_url, created_at, updated_at')
      .eq('title', title)
      .eq('author', author);
    
    // If publication year is provided, use it for more precise matching
    if (publicationYear) {
      query = query.eq('publication_year', publicationYear);
    }
    
    const { data, error } = await query.limit(1).single();
    
    if (error && error.code !== 'PGRST116') { // PGRST116 is "single row expected" which is expected when no rows found
      console.error('Error checking for duplicates:', error);
      return { exists: false };
    }
    
    return { 
      exists: !!data, 
      book: data || undefined 
    };
  } catch (error) {
    console.error('Error in duplicate check:', error);
    return { exists: false };
  }
}

async function findBookInDatabase(
  title: string, 
  author: string, 
  publicationYear?: number
): Promise<{ exists: boolean; book?: { id: string; publication_year?: number; file_url?: string } }> {
  try {
    let query = supabaseAdmin
      .from('books')
      .select('id, title, author, publication_year, file_url, created_at, updated_at')
      .eq('title', title)
      .eq('author', author);
    
    // If publication year is provided, use it for more precise matching
    if (publicationYear) {
      query = query.eq('publication_year', publicationYear);
    }
    
    const { data, error } = await query.limit(1).single();
    
    if (error && error.code !== 'PGRST116') { // PGRST116 is "single row expected" which is expected when no rows found
      console.error('Error checking for duplicates:', error);
      return { exists: false };
    }
    
    return { 
      exists: !!data, 
      book: data || undefined 
    };
  } catch (error) {
    console.error('Error in duplicate check:', error);
    return { exists: false };
  }
}

/**
 * POST /api/admin/sync
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
 * 
 * Body:
 * - limit: number (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10) - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * - channelType: 'metadata' | 'files' (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'metadata')
 */
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const token = authHeader.replace('Bearer ', '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ body
    const body = await request.json();
    const limit = body.limit || 10;
    const channelType = body.channelType || 'metadata';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();

    if (channelType === 'metadata') {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ª–∏–º–∏—Ç: ' + limit + ')');
      const results = await syncService.syncBooks(limit);
      
      console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', results);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–º–µ—Å—Ç–æ bookID
      const formattedDetails = results.details.map((detail: any) => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –∏–∑ –¥–µ—Ç–∞–ª–µ–π
        const bookInfo = detail.bookTitle && detail.bookAuthor 
          ? detail.bookAuthor + ' - ' + detail.bookTitle
          : detail.bookId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞';
        
        switch (detail.status) {
          case 'added':
            return '‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: ' + bookInfo + ' (—Å–æ–æ–±—â–µ–Ω–∏–µ ' + detail.msgId + ')';
          case 'updated':
            return 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: ' + bookInfo + ' (—Å–æ–æ–±—â–µ–Ω–∏–µ ' + detail.msgId + ')';
          case 'skipped':
            const reason = detail.reason || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏—á–∏–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            let russianReason = reason;
            switch (reason) {
              case 'existing book has better description':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –ª—É—á—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ';
                break;
              case 'existing book has genres':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –∂–∞–Ω—Ä—ã';
                break;
              case 'existing book has tags':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Ç–µ–≥–∏';
                break;
              case 'existing book has cover':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞';
                break;
              case 'existing book has telegram post id':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è';
                break;
              case 'missing title or author':
                russianReason = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä';
                break;
              case 'no text content':
                russianReason = '—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞';
                break;
              case 'metadata complete':
                russianReason = '–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ';
                break;
            }
            return '‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ' + bookInfo + ' (—Å–æ–æ–±—â–µ–Ω–∏–µ ' + detail.msgId + ', ' + russianReason + ')';
          case 'error':
            const error = detail.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            return '‚ùå –û—à–∏–±–∫–∞: ' + bookInfo + ' (—Å–æ–æ–±—â–µ–Ω–∏–µ ' + detail.msgId + ', ' + error + ')';
          default:
            return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ' + bookInfo + ' (—Å–æ–æ–±—â–µ–Ω–∏–µ ' + detail.msgId + ', ' + JSON.stringify(detail) + ')';
        }
      });
      
      // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç —Å –∏–∫–æ–Ω–∫–∞–º–∏
      const reportLines = [
        'üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ª–∏–º–∏—Ç: ' + limit + ')',
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:',
        '   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ' + results.processed,
        '   üìö –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ' + results.added,
        '   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ' + results.updated,
        '   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ' + results.skipped,
        '   ‚ùå –û—à–∏–±–æ–∫: ' + results.errors,
        '', // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        ...formattedDetails
      ];
      
      return NextResponse.json({
        message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        results,
        totalProcessed: results.processed,
        actions: reportLines
      });
    } else {
      return NextResponse.json(
        { error: 'File sync not implemented yet' },
        { status: 501 }
      );
    }
  } catch (error) {
    console.error('Sync error:', error);
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

/**
 * GET /api/admin/sync/status
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã
    const { data: syncStatus, error: statusError } = await supabaseAdmin
      .from('telegram_sync_status')
      .select('*')
      .order('last_sync_at', { ascending: false })
      .limit(5);

    if (statusError) {
      throw statusError;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–Ω–∏–≥–∞–º
    const { count: totalBooks } = await supabaseAdmin
      .from('books')
      .select('*', { count: 'exact', head: true });

    const { count: totalSeries } = await supabaseAdmin
      .from('series')
      .select('*', { count: 'exact', head: true });

    return NextResponse.json({
      syncHistory: syncStatus || [],
      stats: {
        totalBooks: totalBooks || 0,
        totalSeries: totalSeries || 0,
      },
    });
  } catch (error) {
    console.error('Error getting sync status:', error);
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

