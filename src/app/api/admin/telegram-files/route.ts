import { NextRequest, NextResponse } from 'next/server';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ Telegram
 * @returns –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 */
function getOriginalFilename(message: any): string {
  let originalFilename = `file_${message.id}`;

  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if (message.document) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
      if (message.document.attributes) {
        const attributes = message.document.attributes;
        for (const attr of attributes) {
          if (attr && attr.className === 'DocumentAttributeFilename' && attr.fileName) {
            originalFilename = attr.fileName;
            break;
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ document
      if (originalFilename === `file_${message.id}` && message.document.fileName) {
        originalFilename = message.document.fileName;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∫–æ—Ä–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (originalFilename === `file_${message.id}` && message.fileName) {
      originalFilename = message.fileName;
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º media
    if (originalFilename === `file_${message.id}` && message.media) {
      const media = message.media.document || message.media.photo;
      if (media && media.fileName) {
        originalFilename = media.fileName;
      } else if (media && media.filename) {
        originalFilename = media.filename;
      }
    }
  } catch (error) {
    console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id}:`, error);
  }

  return originalFilename;
}

/**
 * GET /api/admin/telegram-files
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞
 */
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const token = authHeader.replace('Bearer ', '');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, serviceRoleKey);

    const { data: { user }, error: authError } = await supabase.auth.getUser(token);

    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .select('role')
      .eq('id', user.id)
      .single();

    if (profileError || profile?.role !== 'admin') {
      return NextResponse.json(
        { error: 'Forbidden: Admin access required' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ Telegram —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
    const { TelegramService } = await import('@/lib/telegram/client');
    const telegramClient = await TelegramService.getInstance();

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
      const fileChannel = await telegramClient.getFilesChannel();

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
      const channelId = typeof fileChannel.id === 'object' && fileChannel.id !== null ?
        (fileChannel.id as { toString: () => string }).toString() :
        String(fileChannel.id);

      console.log(`üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channelId}...`);
      const messages = await telegramClient.getAllMessages(channelId, 10000);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
      const files = messages
        .filter((msg: any) => msg.media && (msg.media.document || msg.media.photo))
        .map((msg: any) => {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
          const rawFileName = getOriginalFilename(msg);

          // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ NFC —Ñ–æ—Ä–º—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
          const normalizedFileName = rawFileName.normalize('NFC');

          // –ü–æ–ª—É—á–∞–µ–º media –æ–±—ä–µ–∫—Ç
          const media = msg.media.document || msg.media.photo;

          return {
            message_id: msg.id,
            file_name: normalizedFileName,
            file_size: media?.size || 0,
            mime_type: media?.mimeType || media?.mime_type,
            caption: msg.message || '',
            date: msg.date || Date.now() / 1000
          };
        });

      return NextResponse.json({
        files,
        total: files.length
      });

    } catch (telegramError) {
      console.error('Telegram API error:', telegramError);
      return NextResponse.json(
        { error: 'Failed to fetch files from Telegram', details: (telegramError as Error).message },
        { status: 500 }
      );
    }

  } catch (error) {
    console.error('Error getting Telegram files:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}