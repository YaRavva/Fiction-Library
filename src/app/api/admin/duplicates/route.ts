import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { cookies } from 'next/headers';
import { createServerClient } from '@supabase/ssr';
import { normalizeBookText, checkForBookDuplicates, selectBestBookFromDuplicates, removeBookDuplicates } from '@/lib/book-deduplication-service';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

interface UserProfile {
  id: string;
  username?: string;
  display_name?: string;
  role: string;
}

/**
 * GET /api/admin/duplicates
 * –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥
 */
export async function GET(request: NextRequest) {
  try {
    console.log('GET /api/admin/duplicates called');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const cookieStore = await cookies();
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          getAll() {
            return cookieStore.getAll();
          },
          setAll(cookiesToSet) {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          },
        },
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    let user = null;
    const authHeader = request.headers.get('authorization');
    if (authHeader?.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      try {
        const { data: { user: bearerUser }, error: bearerError } = await supabaseAdmin.auth.getUser(token);
        if (!bearerError && bearerUser) {
          user = bearerUser;
        }
      } catch (bearerAuthError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bearer —Ç–æ–∫–µ–Ω
        console.log('Bearer auth error (ignored):', bearerAuthError);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Bearer —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cookies
    if (!user) {
      const {
        data: { user: cookieUser },
      } = await supabase.auth.getUser();
      user = cookieUser;
    }

    if (!user) {
      return NextResponse.json(
        { error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('*')
      .eq('id', user.id)
      .single();

    if (profileError || !profile || profile.role !== 'admin') {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ check-book-duplicates.ts)
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const allBooks = [];
    let lastCreatedAt = null;
    const batchSize = 1000; // –ü–æ–ª—É—á–∞–µ–º –ø–æ 1000 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑

    while (true) {
      let query = supabaseAdmin
        .from('books')
        .select('*')
        .order('created_at', { ascending: false }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        .limit(batchSize);

      if (lastCreatedAt) {
        query = query.lt('created_at', lastCreatedAt); // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ lastCreatedAt
      }

      const { data: batch, error } = await query;

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥: ${error.message}`);
      }

      if (!batch || batch.length === 0) {
        break;
      }

      allBooks.push(...batch);
      lastCreatedAt = batch[batch.length - 1].created_at; // –ë–µ—Ä–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏

      console.log(`  ‚Üí –ü–æ–ª—É—á–µ–Ω–æ ${batch.length} –∫–Ω–∏–≥, –≤—Å–µ–≥–æ: ${allBooks.length}`);

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ batch size, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (batch.length < batchSize) {
        break;
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    if (allBooks.length === 0) {
      return NextResponse.json({
        message: '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        duplicateGroups: [],
        stats: {
          totalBooks: 0,
          duplicateGroups: 0,
          potentialDuplicates: 0
        }
      });
    }

    console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∫–Ω–∏–≥: ${allBooks.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const booksByAuthorTitle = new Map<string, typeof allBooks>();
    
    for (const book of allBooks) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
      if (!book.title || !book.author) {
        continue;
      }
      const normalizedAuthor = normalizeBookText(book.author);
      const normalizedTitle = normalizeBookText(book.title);
      const key = `${normalizedAuthor}|${normalizedTitle}`;
      
      if (!booksByAuthorTitle.has(key)) {
        booksByAuthorTitle.set(key, []);
      }
      booksByAuthorTitle.get(key)?.push(book);
    }

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã)
    const duplicateGroups = Array.from(booksByAuthorTitle.entries())
      .filter(([_, books]) => books.length > 1)
      .map(([key, books]) => ({ 
        author: books[0].author, 
        title: books[0].title, 
        books 
      }));

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥:`);

    let totalDuplicatesFound = 0;
    const detailedGroups = duplicateGroups.map(group => {
      totalDuplicatesFound += group.books.length - 1; // –ò—Å–∫–ª—é—á–∞–µ–º –æ–¥–Ω—É –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–Ω–∏–≥—É
      
      const booksInfo = group.books.map((book, index) => ({
        id: book.id,
        created_at: book.created_at,
        file_url: book.file_url ? '–î–ê' : '–ù–ï–¢',
        description: book.description ? '–î–ê' : '–ù–ï–¢',
        cover_url: book.cover_url ? '–î–ê' : '–ù–ï–¢',
        is_newest: index === 0 // –°–∞–º–∞—è –Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞ –±—É–¥–µ—Ç –ø–µ—Ä–≤–æ–π –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      }));
      
      return {
        author: group.author,
        title: group.title,
        count: group.books.length,
        books: booksInfo
      };
    });

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
    for (const group of detailedGroups) {
      console.log(`\nüìñ –ê–≤—Ç–æ—Ä: "${group.author}", –ù–∞–∑–≤–∞–Ω–∏–µ: "${group.title}"`);
      console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –≥—Ä—É–ø–ø–µ: ${group.count}`);
      
      for (let i = 0; i < group.books.length; i++) {
        const book = group.books[i];
        console.log(`    ${i + 1}. ID: ${book.id}, –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${book.created_at}, –§–∞–π–ª: ${book.file_url}`);
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      totalBooks: allBooks.length,
      duplicateGroups: duplicateGroups.length,
      potentialDuplicates: totalDuplicatesFound,
      uniqueBooksEstimate: allBooks.length - totalDuplicatesFound
    };

    console.log(`\nüìä –°–≤–æ–¥–∫–∞:`);
    console.log(`  - –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${stats.totalBooks}`);
    console.log(`  - –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${stats.duplicateGroups}`);
    console.log(`  - –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${stats.potentialDuplicates}`);
    console.log(`  - –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥: ${stats.uniqueBooksEstimate}`);

    return NextResponse.json({
      message: `–ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`,
      duplicateGroups: detailedGroups,
      stats
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

/**
 * POST /api/admin/duplicates
 * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥
 */
export async function POST(request: NextRequest) {
  try {
    console.log('POST /api/admin/duplicates called');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const cookieStore = await cookies();
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          getAll() {
            return cookieStore.getAll();
          },
          setAll(cookiesToSet) {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            );
          },
        },
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    let user = null;
    const authHeader = request.headers.get('authorization');
    if (authHeader?.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      try {
        const { data: { user: bearerUser }, error: bearerError } = await supabaseAdmin.auth.getUser(token);
        if (!bearerError && bearerUser) {
          user = bearerUser;
        }
      } catch (bearerAuthError) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bearer —Ç–æ–∫–µ–Ω
        console.log('Bearer auth error (ignored):', bearerAuthError);
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Bearer —Ç–æ–∫–µ–Ω, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cookies
    if (!user) {
      const {
        data: { user: cookieUser },
      } = await supabase.auth.getUser();
      user = cookieUser;
    }

    if (!user) {
      return NextResponse.json(
        { error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .select('*')
      .eq('id', user.id)
      .single();

    if (profileError || !profile || profile.role !== 'admin') {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
        { status: 403 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ check-book-duplicates.ts)
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const allBooks = [];
    let lastCreatedAt = null;
    const batchSize = 1000; // –ü–æ–ª—É—á–∞–µ–º –ø–æ 1000 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑

    while (true) {
      let query = supabaseAdmin
        .from('books')
        .select('*')
        .order('created_at', { ascending: false }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è, –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏
        .limit(batchSize);

      if (lastCreatedAt) {
        query = query.lt('created_at', lastCreatedAt); // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω—å—à–µ lastCreatedAt
      }

      const { data: batch, error } = await query;

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥: ${error.message}`);
      }

      if (!batch || batch.length === 0) {
        break;
      }

      allBooks.push(...batch);
      lastCreatedAt = batch[batch.length - 1].created_at; // –ë–µ—Ä–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏

      console.log(`  ‚Üí –ü–æ–ª—É—á–µ–Ω–æ ${batch.length} –∫–Ω–∏–≥, –≤—Å–µ–≥–æ: ${allBooks.length}`);

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ batch size, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      if (batch.length < batchSize) {
        break;
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
      await new Promise(resolve => setTimeout(resolve, 100));
    }

    if (allBooks.length === 0) {
      return NextResponse.json({
        message: '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        deletedCount: 0
      });
    }

    console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∫–Ω–∏–≥: ${allBooks.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const booksByAuthorTitle = new Map<string, typeof allBooks>();
    
    for (const book of allBooks) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
      if (!book.title || !book.author) {
        continue;
      }
      const normalizedAuthor = normalizeBookText(book.author);
      const normalizedTitle = normalizeBookText(book.title);
      const key = `${normalizedAuthor}|${normalizedTitle}`;
      
      if (!booksByAuthorTitle.has(key)) {
        booksByAuthorTitle.set(key, []);
      }
      booksByAuthorTitle.get(key)?.push(book);
    }

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π (–¥—É–±–ª–∏–∫–∞—Ç—ã)
    const duplicateGroups = Array.from(booksByAuthorTitle.entries())
      .filter(([_, books]) => books.length > 1)
      .map(([key, books]) => ({ 
        author: books[0].author, 
        title: books[0].title, 
        books 
      }));

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ ${duplicateGroups.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥:`);

    if (duplicateGroups.length === 0) {
      console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return NextResponse.json({
        message: '–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        deletedCount: 0
      });
    }

    let totalDeleted = 0;
    let totalErrors = 0;
    const deletionResults = [];

    for (const group of duplicateGroups) {
      console.log(`\nüìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã: "${group.author}" - "${group.title}"`);
      console.log(`  –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: ${group.books.length}`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
      const result = await removeBookDuplicates(group.books);
      
      console.log(`  ${result.message}`);
      
      totalDeleted += result.deletedCount;
      deletionResults.push({
        author: group.author,
        title: group.title,
        result: result
      });
      
      if (result.message.includes('–æ—à–∏–±–æ–∫:')) {
        const errorMatch = result.message.match(/–æ—à–∏–±–æ–∫: (\d+)/);
        if (errorMatch) {
          totalErrors += parseInt(errorMatch[1]);
        }
      }
    }

    console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`üìä –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: ${totalDeleted} –∫–Ω–∏–≥`);
    if (totalErrors > 0) {
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);
    }

    return NextResponse.json({
      message: `–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ: ${totalDeleted} –∫–Ω–∏–≥`,
      deletedCount: totalDeleted,
      totalErrors,
      deletionResults
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}