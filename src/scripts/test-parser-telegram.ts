import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function testParserWithTelegramMessages() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–∑ Telegram...');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üì° –ö–∞–Ω–∞–ª ID: ${channelId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞...');
    const messages = await telegramClient.getMessages(channelId, 10) as any;
    
    if (!messages || messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    for (const [index, message] of messages.entries()) {
      if (message.text) {
        console.log(`--- –°–æ–æ–±—â–µ–Ω–∏–µ ${index + 1} (ID: ${message.id}) ---`);
        
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const metadata = MetadataParser.parseMessage(message.text);
        
        console.log(`–ê–≤—Ç–æ—Ä: "${metadata.author}"`);
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: "${metadata.title}"`);
        console.log(`–†–µ–π—Ç–∏–Ω–≥: ${metadata.rating}`);
        console.log(`–ñ–∞–Ω—Ä—ã: [${metadata.genres.map(g => `"${g}"`).join(', ')}]`);
        console.log(`–ö–Ω–∏–≥–∏ –≤ —Å–µ—Ä–∏–∏: ${metadata.books.length}`);
        
        if (metadata.books.length > 0) {
          for (const book of metadata.books) {
            console.log(`  - ${book.title} (${book.year})`);
          }
        }
        
        console.log('');
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const telegramClient = await TelegramService.getInstance();
    if (telegramClient) {
      await telegramClient.disconnect();
    }
  }
}

testParserWithTelegramMessages();