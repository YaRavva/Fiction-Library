#!/usr/bin/env tsx

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import * as fs from 'fs';
import * as path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Supabase Storage –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Ö –ª–æ–∫–∞–ª—å–Ω–æ
 */

async function downloadAllFilesLocally() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Supabase Storage');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    console.log('- NEXT_PUBLIC_SUPABASE_URL');
    console.log('- SUPABASE_SERVICE_ROLE_KEY');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  const downloadDir = path.join(process.cwd(), 'local-backup');
  if (!fs.existsSync(downloadDir)) {
    fs.mkdirSync(downloadDir, { recursive: true });
  }
  
  console.log(`\nüìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${downloadDir}`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
  const supabase = createClient(supabaseUrl, supabaseServiceKey);
  
  try {
    console.log('\nüìö –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ —Å —Ñ–∞–π–ª–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ñ–∞–π–ª—ã
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, file_url, storage_path, file_format, file_size')
      .not('file_url', 'is', null)
      .order('created_at', { ascending: true });
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:', booksError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ —Å —Ñ–∞–π–ª–∞–º–∏`);
    
    if (books.length === 0) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –∫–Ω–∏–≥ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è');
      return;
    }
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let downloadedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    console.log('\nüì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < books.length; i++) {
      const book = books[i];
      const progress = `${i + 1}/${books.length}`;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
      const fileSize = book.file_size ? `${(book.file_size / 1024 / 1024).toFixed(2)}MB` : 'N/A';
      console.log(`\n[${progress}] ${book.author} - ${book.title} | ${fileSize}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ storage_path
      if (!book.storage_path) {
        console.log(`  ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç storage_path, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        skippedCount++;
        continue;
      }
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —É–∂–µ –ª–æ–∫–∞–ª—å–Ω–æ
        const localFilePath = path.join(downloadDir, book.storage_path);
        const localDir = path.dirname(localFilePath);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(localDir)) {
          fs.mkdirSync(localDir, { recursive: true });
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (fs.existsSync(localFilePath)) {
          console.log(`  ‚ö†Ô∏è  –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          skippedCount++;
          continue;
        }
        
        console.log(`  üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase Storage...`);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase Storage
        const { data: fileData, error: downloadError } = await supabase.storage
          .from('books')
          .download(book.storage_path);
        
        if (downloadError) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${downloadError.message}`);
          errorCount++;
          continue;
        }
        
        if (!fileData) {
          console.log(`  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase Storage`);
          errorCount++;
          continue;
        }
        
        console.log(`  ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω (${fileData.size} –±–∞–π—Ç)`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        const arrayBuffer = await fileData.arrayBuffer();
        const fileBuffer = Buffer.from(arrayBuffer);
        
        fs.writeFileSync(localFilePath, fileBuffer);
        console.log(`  üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: ${localFilePath}`);
        
        downloadedCount++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error: any) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏: ${error.message}`);
        errorCount++;
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò—Ç–æ–≥–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:');
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: ${downloadedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  üìö –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${books.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  üìÇ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${downloadDir}`);
    
    if (errorCount === 0) {
      console.log('\nüéâ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    } else {
      console.log(`\n‚ö†Ô∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å ${errorCount} –æ—à–∏–±–∫–∞–º–∏`);
    }
    
  } catch (error: any) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error.message);
    console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
if (require.main === module) {
  downloadAllFilesLocally()
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { downloadAllFilesLocally };