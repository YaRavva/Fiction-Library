import JSZip from 'jszip';
import dotenv from 'dotenv';

dotenv.config();

async function testReaderContent() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–Ω–∏–≥–∏ –≤ —á–∏—Ç–∞–ª–∫–µ...');
    
    // URL —Ñ–∞–π–ª–∞ –≤ S3
    const fileUrl = 'https://fiction-library-1760461283197.s3.cloud.ru/4379.zip';
    const fileFormat = 'zip';
    
    console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${fileUrl}`);
    console.log(`üìÑ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${fileFormat}`);
    
    if (fileFormat === 'zip') {
      // –î–ª—è –∞—Ä—Ö–∏–≤–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ (–∫–∞–∫ –≤ —á–∏—Ç–∞–ª–∫–µ)
      console.log('üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ ZIP –∞—Ä—Ö–∏–≤...');
      
      const response = await fetch(fileUrl);
      if (!response.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
        return;
      }
      
      const arrayBuffer = await response.arrayBuffer();
      const zip = new JSZip();
      const zipContent = await zip.loadAsync(arrayBuffer);
      
      const fileContents: {name: string, content: string}[] = [];
      const filePromises: Promise<void>[] = [];
      
      zipContent.forEach((relativePath: string, zipEntry: JSZip.JSZipObject) => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã macOS (–∫–∞–∫ –≤ —á–∏—Ç–∞–ª–∫–µ)
        if (!zipEntry.dir && 
            (relativePath.endsWith('.fb2') || relativePath.endsWith('.txt')) &&
            !relativePath.includes('__MACOSX/') &&
            !relativePath.includes('/._')) {
          filePromises.push(
            zipEntry.async('text').then((content: string) => {
              fileContents.push({ name: relativePath, content });
              console.log(`  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${relativePath} (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
            }).catch((error: any) => {
              console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${relativePath}:`, error.message);
            })
          );
        }
      });
      
      await Promise.all(filePromises);
      
      console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fileContents.length}`);
      
      if (fileContents.length === 0) {
        console.log('‚ö†Ô∏è –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è');
        return;
      }
      
      if (fileContents.length === 1) {
        console.log('üìÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:');
        console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${fileContents[0].name}`);
        console.log(`  –†–∞–∑–º–µ—Ä: ${fileContents[0].content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º XML
        const content = fileContents[0].content;
        if (content.trim().startsWith('<?xml') || content.trim().startsWith('<FictionBook')) {
          console.log('‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º FB2 —Ñ–∞–π–ª–æ–º');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
          console.log('üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:');
          console.log(content.substring(0, 200) + '...');
        } else {
          console.log('‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º FB2 —Ñ–∞–π–ª–æ–º');
        }
      } else {
        console.log('üìã –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤:');
        fileContents.forEach((file, index) => {
          console.log(`  ${index + 1}. ${file.name}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
          const content = file.content;
          if (content.trim().startsWith('<?xml') || content.trim().startsWith('<FictionBook')) {
            console.log(`    ‚úÖ –§–∞–π–ª ${index + 1} —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º FB2 —Ñ–∞–π–ª–æ–º`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
            console.log(`    üìÑ –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤:`);
            console.log(`    ${content.substring(0, 100).replace(/\n/g, '\\n')}...`);
          } else {
            console.log(`    ‚ùå –§–∞–π–ª ${index + 1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º FB2 —Ñ–∞–π–ª–æ–º`);
          }
        });
      }
      
    } else {
      // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–∫–∞–∫ –≤ —á–∏—Ç–∞–ª–∫–µ)
      console.log('üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª...');
      
      const response = await fetch(fileUrl);
      if (!response.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
        return;
      }
      
      const text = await response.text();
      console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –†–∞–∑–º–µ—Ä: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
      console.log('üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:');
      console.log(text.substring(0, 200) + '...');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

testReaderContent();