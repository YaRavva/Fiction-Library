// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import { config } from 'dotenv';
import { join } from 'path';
import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

async function examineLatestMessages() {
  try {
    console.log('üîç –ò—Å—Å–ª–µ–¥—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ Telegram');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const channel = await telegramClient.getMetadataChannel();
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
      (channel.id as { toString: () => string }).toString() : 
      String(channel.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π...');
    const messages = await telegramClient.getMessages(channelId, 100) as unknown as { id?: number; text?: string }[];
    
    if (!messages || messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    let booksFound = 0;
    let seriesFound = 0;
    
    for (const message of messages) {
      if (message.text) {
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const metadata = MetadataParser.parseMessage(message.text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if (metadata.author && metadata.title) {
          booksFound++;
          console.log(`\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ ID: ${message.id}`);
          console.log(`  –ê–≤—Ç–æ—Ä: ${metadata.author}`);
          console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.title}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–∞–≤
          if (metadata.books && metadata.books.length > 0) {
            seriesFound++;
            console.log(`  üìö –°–æ—Å—Ç–∞–≤: ${metadata.books.length} –∫–Ω–∏–≥`);
            metadata.books.forEach((book, index) => {
              console.log(`    ${index + 1}. ${book.title} (${book.year})`);
            });
          } else {
            console.log(`  üìñ –û–¥–∏–Ω–æ—á–Ω–∞—è –∫–Ω–∏–≥–∞`);
          }
        }
      }
    }
    
    console.log(`\nüìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:`);
    console.log(`  –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–∏–≥–∞–º–∏: ${booksFound}`);
    console.log(`  –ò–∑ –Ω–∏—Ö —Å —Å–æ—Å—Ç–∞–≤–æ–º: ${seriesFound}`);
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É Telegram –∫–ª–∏–µ–Ω—Ç–∞
    if (typeof (telegramClient as unknown as { disconnect?: () => Promise<void> }).disconnect === 'function') {
      await (telegramClient as unknown as { disconnect: () => Promise<void> }).disconnect!();
    }
    
    console.log('\n‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
examineLatestMessages();