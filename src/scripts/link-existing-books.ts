import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import { TelegramSyncService } from '../lib/telegram/sync';
import { MetadataParser } from '../lib/telegram/parser';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config();

async function linkExistingBooks() {
  try {
    console.log('üîç –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ Telegram...\n');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    if (!syncService['telegramClient']) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Telegram –∫–ª–∏–µ–Ω—Ç—É');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await syncService['telegramClient'].getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    console.log('\nüì• –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, telegram_post_id');
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', booksError);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram...');
    const { data: processedMessages, error: messagesError } = await supabase
      .from('telegram_processed_messages')
      .select('message_id, book_id');
    
    if (messagesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', messagesError);
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å–≤—è–∑–∞–Ω—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    const linkedBooks = new Set(processedMessages.map(msg => msg.book_id));
    const booksNotLinkedToMessages = books.filter(book => !linkedBooks.has(book.id));
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${booksNotLinkedToMessages.length} –∫–Ω–∏–≥, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏`);
    
    // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    let linkedCount = 0;
    let errorCount = 0;
    
    for (const book of booksNotLinkedToMessages) {
      try {
        console.log(`\nüîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥–∏: ${book.author} - ${book.title}`);
        
        // –ï—Å–ª–∏ —É –∫–Ω–∏–≥–∏ —É–∂–µ –µ—Å—Ç—å telegram_post_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
        if (book.telegram_post_id) {
          console.log(`  üìã –£ –∫–Ω–∏–≥–∏ —É–∂–µ –µ—Å—Ç—å telegram_post_id: ${book.telegram_post_id}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
          const existingMessage = processedMessages.find(msg => msg.message_id === book.telegram_post_id);
          if (existingMessage) {
            console.log(`  ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ telegram_processed_messages`);
            continue;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –ø–æ ID
          console.log(`  üì° –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${book.telegram_post_id} –∏–∑ Telegram...`);
          const messages = await syncService['telegramClient'].getMessages(channelId, 1, parseInt(book.telegram_post_id)) as unknown[];
          
          if (messages.length > 0) {
            const msg = messages[0] as { id?: number; text?: string };
            if (msg.id === parseInt(book.telegram_post_id) && msg.text) {
              // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
              const metadata = MetadataParser.parseMessage(msg.text);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
              if (metadata.title === book.title && metadata.author === book.author) {
                console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —Å–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º...`);
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages
                const { error: insertError } = await supabase
                  .from('telegram_processed_messages')
                  .insert({
                    message_id: String(book.telegram_post_id),
                    channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '',
                    book_id: book.id,
                    processed_at: new Date().toISOString()
                  });
                
                if (insertError) {
                  console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:`, insertError);
                  errorCount++;
                } else {
                  console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º`);
                  linkedCount++;
                }
              } else {
                console.log(`  ‚ö†Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç:`);
                console.log(`     –°–æ–æ–±—â–µ–Ω–∏–µ: ${metadata.author} - ${metadata.title}`);
                console.log(`     –ö–Ω–∏–≥–∞: ${book.author} - ${book.title}`);
              }
            } else {
              console.log(`  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞`);
            }
          } else {
            console.log(`  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
          }
        } else {
          console.log(`  ‚ÑπÔ∏è –£ –∫–Ω–∏–≥–∏ –Ω–µ—Ç telegram_post_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        }
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏ ${book.id}:`, error);
        errorCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤—è–∑—ã–≤–∞–Ω–∏—è:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω–æ: ${linkedCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${booksNotLinkedToMessages.length - linkedCount - errorCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const syncService = await TelegramSyncService.getInstance();
    await syncService.shutdown();
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
  linkExistingBooks();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
export { linkExistingBooks };
