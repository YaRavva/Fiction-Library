import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({ path: resolve(__dirname, '../../.env') });

// –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ findMatchingFile –∏–∑ book-worm-service.ts
function findMatchingFile(book: any, files: any[]): any | null {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
    if (!book.title || !book.author || book.title.trim() === '' || book.author.trim() === '') {
        console.log(`    ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return null;
    }
    
    console.log(`    üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞
    let bestMatch: any | null = null;
    let bestScore = 0;
    
    for (const file of files) {
        if (!file.filename) continue;
        
        const filename = file.filename.toLowerCase();
        const bookTitle = book.title.toLowerCase();
        const bookAuthor = book.author.toLowerCase();
        
        let score = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ (—Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º)
        if (filename.includes(bookTitle.replace(/\s+/g, '_'))) {
            score += 20;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (—Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º)
        if (filename.includes(bookAuthor.replace(/\s+/g, '_'))) {
            score += 20;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        const titleInFilename = filename.includes(bookTitle.replace(/\s+/g, '_'));
        const authorInFilename = filename.includes(bookAuthor.replace(/\s+/g, '_'));
        
        // –ï—Å–ª–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –∞–≤—Ç–æ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
        if (titleInFilename && authorInFilename) {
            score += 30; // –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –Ω–∞ —Å–ª–æ–≤–∞
        const bookTitleWords = bookTitle.split(/\s+/).filter((word: string) => word.length > 2);
        let titleWordsMatchCount = 0;
        
        for (const word of bookTitleWords) {
            if (filename.includes(word)) {
                titleWordsMatchCount++;
            }
        }
        
        // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –±–æ–ª–µ–µ 50% —Å–ª–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
        if (bookTitleWords.length > 0 && titleWordsMatchCount / bookTitleWords.length >= 0.5) {
            score += 15;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–æ–∂–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        // –ù–∞–ø—Ä–∏–º–µ—Ä, "–ú–∏—Ä –ü–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–∞" –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å "–ò—Å—á–µ–∑–Ω—É–≤—à–∏–π –º–∏—Ä"
        const falsePositiveKeywords = [
            '–∏—Å—á–µ–∑–Ω—É–≤—à', '—É–º–∏—Ä–∞—é—â', '—Å–º–µ—Ä—Ç—å', '–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫', '–∫–æ–Ω—Å—É–ª', '–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫', 
            '–ª–æ–≥–æ—Å–æ–≤', '–Ω–∞–ø—Ä—è–∂–µ–Ω', '–¥–≤—É–µ–¥–∏', '–º–æ—Ä—Å–∫', '—Å–ª–∞–≤—è–Ω—Å–∫'
        ];
        
        const bookTitleContainsFalsePositive = falsePositiveKeywords.some(keyword => 
            bookTitle.includes(keyword) && !filename.includes(keyword)
        );
        
        const filenameContainsFalsePositive = falsePositiveKeywords.some(keyword => 
            filename.includes(keyword) && !bookTitle.includes(keyword)
        );
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, —É–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç
        if (bookTitleContainsFalsePositive || filenameContainsFalsePositive) {
            score -= 20;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–±–æ–ª–µ–µ 80% —Å–∏–º–≤–æ–ª–æ–≤)
        const titleMatchThreshold = Math.floor(bookTitle.length * 0.8);
        if (titleMatchThreshold > 0) {
            const partialTitle = bookTitle.substring(0, Math.min(titleMatchThreshold, bookTitle.length));
            if (filename.includes(partialTitle.replace(/\s+/g, '_'))) {
                score += 10;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (–±–æ–ª–µ–µ 80% —Å–∏–º–≤–æ–ª–æ–≤)
        const authorMatchThreshold = Math.floor(bookAuthor.length * 0.8);
        if (authorMatchThreshold > 0) {
            const partialAuthor = bookAuthor.substring(0, Math.min(authorMatchThreshold, bookAuthor.length));
            if (filename.includes(partialAuthor.replace(/\s+/g, '_'))) {
                score += 10;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫–æ–≤—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º
        const searchTerms = [...bookTitleWords, ...bookAuthor.split(/\s+/).filter((word: string) => word.length > 2)];
        for (const term of searchTerms) {
            if (filename.includes(term)) {
                score += 5;
            }
        }
        
        // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏
        // –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞
        const filenameWords = filename.toLowerCase().split(/[_\-\s]+/).filter((word: string) => word.length > 2);
        let allWordsInTitle = true;
        let allWordsInAuthor = true;
        let wordsFoundCount = 0;
        
        for (const word of filenameWords) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
            if (bookTitle.includes(word)) {
                wordsFoundCount++;
            } else {
                allWordsInTitle = false;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏
            if (bookAuthor.includes(word)) {
                wordsFoundCount++;
            } else {
                allWordsInAuthor = false;
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
        // –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        if (allWordsInTitle || allWordsInAuthor) {
            // –ë–æ–Ω—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
            const wordBonus = Math.min(30, wordsFoundCount * 5); // –ú–∞–∫—Å–∏–º—É–º 30 –±–∞–ª–ª–æ–≤
            score += wordBonus;
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã –∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –≤ –∞–≤—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –±–æ–ª—å—à–∏–π –±–æ–Ω—É—Å
        if (allWordsInTitle && allWordsInAuthor) {
            score += 20; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        }
        
        console.log(`      –§–∞–π–ª: ${file.filename} (—Å—á–µ—Ç: ${score})`);
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ª—É—á—à–∏–π —Å—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—á–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫ (–º–∏–Ω–∏–º—É–º 30 - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –∞–≤—Ç–æ—Ä)
        if (score > bestScore && score >= 30) {
            bestScore = score;
            bestMatch = file;
        }
    }
    
    if (bestMatch && bestScore >= 30) {
        console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${bestScore}: ${bestMatch.filename}`);
        return bestMatch;
    }
    
    console.log(`    ‚ö†Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω–æ–µ`);
    return null;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testBooks = [
    {
        id: '1',
        title: '—Ü–∏–∫–ª –î–Ω–µ–≤–Ω–∏–∫–∏ –ö–∏–ª–ª–µ—Ä–±–æ—Ç–∞',
        author: '–ú–∞—Ä—Ç–∞ –£—ç–ª–ª—Å',
        telegram_post_id: '100'
    },
    {
        id: '2',
        title: '—Ü–∏–∫–ª –í–µ–ª–∏–∫–∏–π –ì—Ä–∞–π–∞–Ω',
        author: '–û–ª—å–≥–∞ –ì–æ–ª–æ—Ç–≤–∏–Ω–∞',
        telegram_post_id: '101'
    },
    {
        id: '3',
        title: '–õ—é–¥–∏ –≤ –∫—Ä–∞—Å–Ω–æ–º (2012) (2014)',
        author: '–î–∂–æ–Ω –°–∫–∞–ª—å—Ü–∏',
        telegram_post_id: '102'
    }
];

const testFiles = [
    { filename: '–ú–∞—Ä—Ç–∞_–£—ç–ª–ª—Å_–î–Ω–µ–≤–Ω–∏–∫–∏_–ö–∏–ª–ª–µ—Ä–±–æ—Ç–∞.zip', messageId: '3314' },
    { filename: '–û–ª—å–≥–∞_–ì–æ–ª–æ—Ç–≤–∏–Ω–∞_–í–µ–ª–∏–∫–∏–π_–ì—Ä–∞–π–∞–Ω_.zip', messageId: '3481' },
    { filename: '–î–∂–æ–Ω_–°–∫–∞–ª—å—Ü–∏_–õ—é–¥–∏_–≤_–∫—Ä–∞—Å–Ω–æ–º_—Å–±–æ—Ä–Ω–∏–∫.fb2', messageId: '3992' }
];

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runBookWormMatchingTest() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ book-worm-service');
    console.log('==============================================================');
    
    let successCount = 0;
    let totalCount = testBooks.length;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
    for (const book of testBooks) {
        console.log(`\nüìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
        const matchingFile = findMatchingFile(book, testFiles);
        
        if (matchingFile) {
            console.log(`  üéØ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏ "${book.title}"`);
            successCount++;
        } else {
            console.log(`  ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏ "${book.title}"`);
        }
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalCount}`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`   –û—à–∏–±–æ–∫: ${totalCount - successCount}`);
    console.log(`   –¢–æ—á–Ω–æ—Å—Ç—å: ${Math.round((successCount / totalCount) * 100)}%`);
    
    if (successCount === totalCount) {
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        return true;
    } else {
        console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.');
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    runBookWormMatchingTest().then(success => {
        process.exit(success ? 0 : 1);
    }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error);
        process.exit(1);
    });
}

export { runBookWormMatchingTest, findMatchingFile };