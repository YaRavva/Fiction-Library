/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏–∑ Telegram
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
 */

import { config } from 'dotenv';
import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import bigInt from 'big-integer';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env' });

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param filename –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
 * @returns –û–±—ä–µ–∫—Ç —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏ —Ñ—Ä–∞–∑–∞–º–∏
 */
function extractSearchTerms(filename: string): { words: string[]; phrases: string[] } {
  // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑
  const phrases: string[] = [];
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö "–∏" –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏
  if (nameWithoutExt.includes('_–∏_') || nameWithoutExt.includes(',')) {
    const parts = nameWithoutExt.split(/_–∏_|,/);
    for (const part of parts) {
      const cleanPart = part.trim().replace(/_/g, ' ');
      if (cleanPart.length > 3) {
        phrases.push(cleanPart.toLowerCase());
      }
    }
  }
  
  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–±—â–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
  const words = nameWithoutExt
    .split(/[_\-\s]+/) // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—é, –¥–µ—Ñ–∏—Å—É, –ø—Ä–æ–±–µ–ª—É
    .filter(word => word.length > 2) // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤
    .map(word => word.trim().toLowerCase()) // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    .filter(word => word.length > 0); // –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–º–æ–≥–∞—é—Ç –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
  const commonWords = ['and', 'or', 'the', 'of', 'in', 'on', 'at', 'to', 'for', 'with', 'by', 'zip', 'rar', 'fb2', 'epub', 'pdf', 'mobi', '—Ü–∏–∫–ª'];
  const filteredWords = words.filter(word => !commonWords.includes(word));
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
  if (filteredWords.length > 1) {
    for (let i = 0; i < filteredWords.length - 1; i++) {
      const phrase = `${filteredWords[i]} ${filteredWords[i + 1]}`;
      phrases.push(phrase);
    }
  }
  
  return { words: filteredWords, phrases };
}

/**
 * –†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏ –∏ –∫–Ω–∏–≥–æ–π
 * @param searchTerms –¢–µ—Ä–º–∏–Ω—ã, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
 * @param book –ö–Ω–∏–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @returns –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
 */
function calculateRelevanceScore(searchTerms: { words: string[], phrases: string[] }, book: any): number {
  const bookTitle = (book.title || '').toLowerCase();
  const bookAuthor = (book.author || '').toLowerCase();
  
  let score = 0;
  
  // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–ª–æ–≤
  for (const word of searchTerms.words) {
    // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–∞–∏–±–æ–ª–µ–µ —Ü–µ–Ω–Ω–æ)
    if (bookTitle.split(/\s+/).includes(word)) {
      score += 3;
    }
    // –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    else if (bookTitle.includes(word)) {
      score += 2;
    }
    
    // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –∞–≤—Ç–æ—Ä–µ (–Ω–∞–∏–±–æ–ª–µ–µ —Ü–µ–Ω–Ω–æ)
    if (bookAuthor.split(/\s+/).includes(word)) {
      score += 3;
    }
    // –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –∞–≤—Ç–æ—Ä–µ
    else if (bookAuthor.includes(word)) {
      score += 2;
    }
    
    // –û–±—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–º–µ–Ω–µ–µ —Ü–µ–Ω–Ω–æ)
    if (bookTitle.includes(word) || bookAuthor.includes(word)) {
      score += 1;
    }
  }
  
  // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ—Ä–∞–∑ (–±–æ–ª–µ–µ —Ü–µ–Ω–Ω–æ)
  for (const phrase of searchTerms.phrases) {
    if (bookTitle.includes(phrase)) {
      score += 4; // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ
    }
    if (bookAuthor.includes(phrase)) {
      score += 4; // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –≤ –∞–≤—Ç–æ—Ä–µ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ
    }
    if (bookTitle.includes(phrase) || bookAuthor.includes(phrase)) {
      score += 2; // –û–±—â–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã
    }
  }
  
  return score;
}

/**
 * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∫–Ω–∏–≥ —Å –æ—Ü–µ–Ω–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
 * @param filename –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
 * @param books –ö–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * @returns –í—Å–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–Ω–∏–≥–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
 */
function findAllMatchingBooks(filename: string, books: any[]): { book: any; score: number }[] {
  const searchTerms = extractSearchTerms(filename);
  const matches: { book: any; score: number }[] = [];
  
  console.log(`   –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã - –°–ª–æ–≤–∞: [${searchTerms.words.join(', ')}], –§—Ä–∞–∑—ã: [${searchTerms.phrases.join(', ')}]`);
  
  for (const book of books) {
    const score = calculateRelevanceScore(searchTerms, book);
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ä–∞–∑—É–º–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
    if (score >= 3) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
      matches.push({ book, score });
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–∫–∏
  matches.sort((a, b) => b.score - a.score);
  
  return matches;
}

async function testRandomFilesSearch() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∏–∑ Telegram...\n');
  
  let telegramClient: TelegramClient | null = null;
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiId = process.env.TELEGRAM_API_ID;
    const apiHash = process.env.TELEGRAM_API_HASH;
    const sessionString = process.env.TELEGRAM_SESSION;
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!apiId || !apiHash || !sessionString || !supabaseUrl || !supabaseServiceRoleKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞...');
    const session = new StringSession(sessionString);
    telegramClient = new TelegramClient(session, parseInt(apiId), apiHash, {
      connectionRetries: 5,
    });
    
    await telegramClient.connect();
    console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω\n');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
    const supabase = createSupabaseClient(supabaseUrl, supabaseServiceRoleKey);
    
    // –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Ñ–∞–π–ª–æ–≤
    const channelId = 1515159552;
    console.log(`üÜî –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: –ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏ (ID: ${channelId})\n`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
    const channelEntity = await telegramClient.getEntity(new Api.PeerChannel({ channelId: bigInt(channelId) }));
    console.log(`‚úÖ –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${(channelEntity as any).title}\n`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞...');
    const messages = await telegramClient.getMessages(channelEntity, { limit: 50 });
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    console.log('üìÅ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π...');
    const files: any[] = [];
    
    for (const msg of messages) {
      if ((msg as any).media && (msg as any).media.className === 'MessageMediaDocument') {
        const document = (msg as any).media.document;
        if (document) {
          const filenameAttr = document.attributes?.find((attr: any) => attr.className === 'DocumentAttributeFilename');
          const filename = filenameAttr?.fileName || `book_${msg.id}`;
          
          const file = {
            id: msg.id,
            filename: filename,
            size: document.size,
            mimeType: document.mimeType,
            message: msg
          };
          
          files.push(file);
        }
      }
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ\n`);
    
    if (files.length === 0) {
      console.log('‚ùå –í –∫–∞–Ω–∞–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤');
      return;
    }
    
    // –í—ã–±–æ—Ä 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    const randomFiles = files
      .sort(() => 0.5 - Math.random()) // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
      .slice(0, 10); // –í—ã–±–æ—Ä 10 —Å–ª—É—á–∞–π–Ω—ã—Ö
    
    console.log(`üé≤ –í—ã–±—Ä–∞–Ω–æ 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n`);
    randomFiles.forEach((file, index) => {
      console.log(`${index + 1}. ${file.filename} (${file.size} –±–∞–π—Ç)`);
    });
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–ô –±–∞–∑—ã –∫–Ω–∏–≥
    console.log('\nüìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, file_url');
    
    if (booksError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: ${booksError.message}`);
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${books?.length || 0} –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n`);
    
    let totalFiles = 0;
    let matchedFiles = 0;
    let highConfidenceMatches = 0;
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    for (const file of randomFiles) {
      totalFiles++;
      console.log(`üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ${file.filename}`);
      
      const allMatches = findAllMatchingBooks(file.filename, books || []);
      
      if (allMatches.length > 0) {
        matchedFiles++;
        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${allMatches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)
        const topMatches = allMatches.slice(0, 5);
        for (const match of topMatches) {
          const hasFile = match.book.file_url && match.book.file_url.length > 0;
          console.log(`      "${match.book.title}" –∞–≤—Ç–æ—Ä–∞ ${match.book.author} (–æ—Ü–µ–Ω–∫–∞: ${match.score}) ${hasFile ? '[–ï–°–¢–¨ –§–ê–ô–õ]' : '[–ù–ï–¢ –§–ê–ô–õ–ê]'}`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–π –≤—ã–±–æ—Ä
        const bestMatch = allMatches[0];
        console.log(`   üéØ –õ—É—á—à–∏–π –≤—ã–±–æ—Ä: "${bestMatch.book.title}" –∞–≤—Ç–æ—Ä–∞ ${bestMatch.book.author} (–æ—Ü–µ–Ω–∫–∞: ${bestMatch.score})`);
        
        // –ü–æ–¥—Å—á–µ—Ç –≤—ã—Å–æ–∫–æ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–æ—Ü–µ–Ω–∫–∞ >= 10)
        if (bestMatch.score >= 10) {
          highConfidenceMatches++;
        }
      } else {
        console.log(`   ‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
      
      console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê:');
    console.log(`   –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
    console.log(`   –§–∞–π–ª–æ–≤ —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏: ${matchedFiles} (${(matchedFiles/totalFiles*100).toFixed(1)}%)`);
    console.log(`   –í—ã—Å–æ–∫–æ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${highConfidenceMatches} (${(highConfidenceMatches/totalFiles*100).toFixed(1)}%)`);
    
    if (matchedFiles > 0) {
      console.log('\nüéâ –£–°–ü–ï–•: –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log('üí° –ê–ª–≥–æ—Ä–∏—Ç–º —É—Å–ø–µ—à–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã —Å –∫–Ω–∏–≥–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:');
      console.log('   ‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∏ –∞–≤—Ç–æ—Ä–∞—Ö');
      console.log('   ‚Ä¢ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã—Ö —Ñ—Ä–∞–∑');
      console.log('   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤');
      console.log('   ‚Ä¢ –û—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π');
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    if (telegramClient) {
      try {
        await telegramClient.disconnect();
        console.log('\nüßπ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
      } catch (disconnectError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', disconnectError);
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å GramJS
    setTimeout(() => {
      process.exit(0);
    }, 1000);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
testRandomFilesSearch().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});