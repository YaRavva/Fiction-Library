import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config();

async function findUnlinkedBooks() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ Telegram...\n');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(supabaseUrl, supabaseKey);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, telegram_post_id, created_at, updated_at');

    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', booksError);
      return;
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram...');
    const { data: processedMessages, error: messagesError } = await supabase
      .from('telegram_processed_messages')
      .select('message_id, book_id');

    if (messagesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', messagesError);
      return;
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${processedMessages.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n`);

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å–≤—è–∑–∞–Ω—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    const linkedBooks = new Set(processedMessages.map(msg => msg.book_id));
    const booksNotLinkedToMessages = books.filter(book => !linkedBooks.has(book.id));
    
    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ ${booksNotLinkedToMessages.length} –∫–Ω–∏–≥, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    booksNotLinkedToMessages.sort((a, b) => {
      return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
    });
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–∞—Ö
    booksNotLinkedToMessages.forEach((book, index) => {
      console.log(`${index + 1}. ${book.author} - ${book.title}`);
      console.log(`   ID: ${book.id}`);
      console.log(`   Telegram ID: ${book.telegram_post_id || '–Ω–µ—Ç'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(book.created_at).toLocaleString()}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(book.updated_at).toLocaleString()}`);
      console.log('');
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —ç—Ç–∏ –∫–Ω–∏–≥–∏
    console.log('üìÖ –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥:');
    const dates = booksNotLinkedToMessages.map(book => {
      return new Date(book.created_at).toLocaleDateString();
    });
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –ø–æ –¥–∞—Ç–∞–º
    const dateCounts = dates.reduce((acc, date) => {
      acc[date] = (acc[date] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –ø–æ –¥–∞—Ç–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:');
    Object.entries(dateCounts).forEach(([date, count]) => {
      console.log(`   ${date}: ${count} –∫–Ω–∏–≥`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
  findUnlinkedBooks();
}