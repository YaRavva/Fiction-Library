import 'dotenv/config'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseKey)

async function testStorageUrl() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –æ–±–ª–æ–∂–µ–∫ –≤ Storage...\n')

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
  const { data: files, error } = await supabase
    .storage
    .from('covers')
    .list('', { limit: 5 })

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
    return
  }

  console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files?.length || 0}\n`)

  if (!files || files.length === 0) {
    console.log('‚ö†Ô∏è  –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ bucket')
    return
  }

  for (const file of files) {
    console.log(`üìÑ –§–∞–π–ª: ${file.name}`)
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL —á–µ—Ä–µ–∑ Supabase SDK
    const { data: publicUrlData } = supabase
      .storage
      .from('covers')
      .getPublicUrl(file.name)
    
    console.log(`   SDK URL: ${publicUrlData.publicUrl}`)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤—Ä—É—á–Ω—É—é (–∫–∞–∫ –≤ –∫–æ–¥–µ)
    const manualUrl = `${supabaseUrl}/storage/v1/object/public/covers/${file.name}`
    console.log(`   Manual URL: ${manualUrl}`)
    
    console.log(`   –°–æ–≤–ø–∞–¥–∞—é—Ç: ${publicUrlData.publicUrl === manualUrl ? '‚úÖ' : '‚ùå'}`)
    console.log()
  }
}

testStorageUrl().catch(console.error)

