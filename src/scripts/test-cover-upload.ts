/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∏–∑ Telegram –≤ Supabase Storage
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx src/scripts/test-cover-upload.ts
 */

import dotenv from 'dotenv';
import path from 'path';
import { TelegramSyncService } from '@/lib/telegram/sync';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

async function testCoverUpload() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∏–∑ Telegram...\n');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const requiredEnvVars = [
    'TELEGRAM_API_ID',
    'TELEGRAM_API_HASH',
    'TELEGRAM_SESSION',
    'TELEGRAM_METADATA_CHANNEL',
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
  ];

  const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
  
  if (missingVars.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    missingVars.forEach(varName => console.error(`   - ${varName}`));
    process.exit(1);
  }

  console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...');
    const syncService = await TelegramSyncService.getInstance();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    console.log('üìö –ü–æ–ª—É—á–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–ª–æ–∂–∫–∞–º–∏...\n');
    const metadata = await syncService.syncMetadata(3);

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n`);
    console.log(`–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${metadata.length}\n`);

    metadata.forEach((book, index) => {
      console.log(`üìñ –ö–Ω–∏–≥–∞ ${index + 1}:`);
      console.log(`   –ê–≤—Ç–æ—Ä: ${book.author}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`);
      console.log(`   –ñ–∞–Ω—Ä—ã: ${book.genres.join(', ')}`);
      console.log(`   –†–µ–π—Ç–∏–Ω–≥: ${book.rating}`);
      
      if (book.coverUrls && book.coverUrls.length > 0) {
        console.log(`   ‚úÖ –û–±–ª–æ–∂–∫–∏ (${book.coverUrls.length}):`);
        book.coverUrls.forEach((url, i) => {
          console.log(`      ${i + 1}. ${url}`);
        });
      } else {
        console.log(`   ‚ö†Ô∏è –û–±–ª–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
      console.log('');
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const booksWithCovers = metadata.filter(b => b.coverUrls && b.coverUrls.length > 0).length;
    const totalCovers = metadata.reduce((sum, b) => sum + (b.coverUrls?.length || 0), 0);

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –ö–Ω–∏–≥ —Å –æ–±–ª–æ–∂–∫–∞–º–∏: ${booksWithCovers} –∏–∑ ${metadata.length}`);
    console.log(`   –í—Å–µ–≥–æ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${totalCovers}`);
    console.log('');

    if (totalCovers > 0) {
      console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±–ª–æ–∂–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Supabase Storage.');
      console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ bucket "covers" –≤ Supabase Dashboard:');
      console.log(`   ${process.env.NEXT_PUBLIC_SUPABASE_URL?.replace('//', '//app.')}/project/_/storage/buckets/covers`);
    } else {
      console.log('‚ö†Ô∏è –û–±–ª–æ–∂–∫–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –°–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
      console.log('   2. –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞ –∏–∑ Telegram');
      console.log('   3. –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Supabase Storage');
      console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }

    await syncService.shutdown();
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    
    if (error instanceof Error) {
      console.error('\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
      
      if (error.message.includes('SUPABASE_SERVICE_ROLE_KEY')) {
        console.error('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SUPABASE_SERVICE_ROLE_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
      } else if (error.message.includes('AUTH_KEY_UNREGISTERED')) {
        console.error('\nüí° –°–µ—Å—Å–∏—è Telegram —É—Å—Ç–∞—Ä–µ–ª–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ:');
        console.error('   npx tsx src/scripts/telegram-login.ts');
      } else if (error.message.includes('storage')) {
        console.error('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Storage –≤ Supabase Dashboard:');
        console.error('   1. Bucket "covers" —Å–æ–∑–¥–∞–Ω');
        console.error('   2. –ü–æ–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (—Å–º. docs/MIGRATION_006_COVERS.md)');
      }
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCoverUpload();

