#!/usr/bin/env tsx

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import { uploadFile, createBucket } from '../lib/cloud-ru-s3-service';
import { Buffer } from 'buffer';
import * as fs from 'fs';
import * as path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ Supabase Storage –≤ Cloud.ru S3
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Cloud.ru S3 –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
 * –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤
 */

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
const MAX_CONCURRENT_UPLOADS = 5;

async function migrateToCloudRuConcurrent() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤ –∏–∑ Supabase Storage –≤ Cloud.ru S3');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  const bucketName = process.env.S3_BUCKET_NAME || `books-${Date.now()}`;
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    console.log('- NEXT_PUBLIC_SUPABASE_URL');
    console.log('- SUPABASE_SERVICE_ROLE_KEY');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
  const backupDir = path.join(process.cwd(), 'local-backup');
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }
  
  console.log(`\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:`);
  console.log(`Supabase URL: ${supabaseUrl}`);
  console.log(`Cloud.ru Bucket: ${bucketName}`);
  console.log(`–õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${backupDir}`);
  console.log(`–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: ${MAX_CONCURRENT_UPLOADS}`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
  const supabase = createClient(supabaseUrl, supabaseServiceKey);
  
  try {
    console.log('\nüìö –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ —Å —Ñ–∞–π–ª–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ñ–∞–π–ª—ã (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É)
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, file_url, storage_path, file_format, file_size, telegram_file_id')
      .not('file_url', 'is', null)
      .order('created_at', { ascending: true })
      .limit(10000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 10000 (–∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:', booksError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ —Å —Ñ–∞–π–ª–∞–º–∏`);
    
    if (books.length === 0) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –∫–Ω–∏–≥ —Å —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–∫–µ—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log(`\nüì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–∫–µ—Ç "${bucketName}"...`);
    try {
      await createBucket(bucketName);
      console.log(`‚úÖ –ë–∞–∫–µ—Ç "${bucketName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
    } catch (error: any) {
      console.log(`‚ö†Ô∏è  –ë–∞–∫–µ—Ç "${bucketName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: ${error.message}`);
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ Cloud.ru S3
    const booksToMigrate = books.filter(book => 
      book.file_url && !book.file_url.includes('s3.cloud.ru')
    );
    
    console.log(`üìã –ö–Ω–∏–≥ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: ${booksToMigrate.length}`);
    
    if (booksToMigrate.length === 0) {
      console.log('‚ÑπÔ∏è  –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ Cloud.ru S3');
      return;
    }
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let migratedCount = 0;
    let errorCount = 0;
    
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
    for (let i = 0; i < booksToMigrate.length; i += MAX_CONCURRENT_UPLOADS) {
      const batch = booksToMigrate.slice(i, i + MAX_CONCURRENT_UPLOADS);
      const batchNumber = Math.floor(i / MAX_CONCURRENT_UPLOADS) + 1;
      const totalBatches = Math.ceil(booksToMigrate.length / MAX_CONCURRENT_UPLOADS);
      
      console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${batchNumber}/${totalBatches} (${batch.length} —Ñ–∞–π–ª–æ–≤)`);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const uploadPromises = batch.map(async (book) => {
        try {
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ
          const fileSize = book.file_size ? `${(book.file_size / 1024 / 1024).toFixed(2)}MB` : 'N/A';
          console.log(`  üì• ${book.author} - ${book.title} | ${fileSize}`);
          
          // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Supabase Storage
          const { data: fileData, error: downloadError } = await supabase.storage
            .from('books')
            .download(book.storage_path);
          
          if (downloadError) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${downloadError.message}`);
          }
          
          if (!fileData) {
            throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase Storage');
          }
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Blob –≤ Buffer
          const arrayBuffer = await fileData.arrayBuffer();
          const fileBuffer = Buffer.from(arrayBuffer);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞
          const localFilePath = path.join(backupDir, book.storage_path);
          const localDir = path.dirname(localFilePath);
          
          // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (!fs.existsSync(localDir)) {
            fs.mkdirSync(localDir, { recursive: true });
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (!fs.existsSync(localFilePath)) {
            fs.writeFileSync(localFilePath, fileBuffer);
            console.log(`  üíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${localFilePath}`);
          }
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Cloud.ru S3 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AWS SDK
          const uploadResult = await uploadFile(bucketName, book.storage_path, fileBuffer);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const newFileUrl = `https://s3.cloud.ru/${bucketName}/${book.storage_path}`;
          
          const { error: updateError } = await supabase
            .from('books')
            .update({
              file_url: newFileUrl,
              updated_at: new Date().toISOString()
            })
            .eq('id', book.id);
          
          if (updateError) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${updateError.message}`);
          }
          
          return { success: true, bookId: book.id, title: book.title, author: book.author };
        } catch (error: any) {
          return { success: false, bookId: book.id, title: book.title, author: book.author, error: error.message };
        }
      });
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ
      const results = await Promise.all(uploadPromises);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      results.forEach(result => {
        if (result.success) {
          migratedCount++;
          console.log(`  ‚úÖ ${result.author} - ${result.title} | –ó–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω`);
        } else {
          errorCount++;
          console.log(`  ‚ùå ${result.author} - ${result.title} | –û—à–∏–±–∫–∞: ${result.error}`);
        }
      });
      
      // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log(`  üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–∞:`);
      console.log(`    ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}`);
      console.log(`    ‚ùå –û—à–∏–±–æ–∫: ${results.filter(r => !r.success).length}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      if (i + MAX_CONCURRENT_UPLOADS < booksToMigrate.length) {
        console.log(`  ‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò—Ç–æ–≥–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:');
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${migratedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  üìö –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${booksToMigrate.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${backupDir}`);
    
    if (errorCount === 0) {
      console.log('\nüéâ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } else {
      console.log(`\n‚ö†Ô∏è  –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å ${errorCount} –æ—à–∏–±–∫–∞–º–∏`);
    }
    
  } catch (error: any) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateToCloudRuConcurrent()
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { migrateToCloudRuConcurrent };