#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏ –°–µ—Ä–≥–µ—è –¢–∞—Ä–º–∞—à–µ–≤–∞ "—Ü–∏–∫–ª –î—Ä–µ–≤–Ω–∏–π"
 */

import { serverSupabase } from '../lib/serverSupabase';

async function findTarmashevFile() {
    console.log('üîç –ò—â–µ–º –∫–Ω–∏–≥—É –°–µ—Ä–≥–µ—è –¢–∞—Ä–º–∞—à–µ–≤–∞ "—Ü–∏–∫–ª –î—Ä–µ–≤–Ω–∏–π"...\n');

    try {
        // –ò—â–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { data: books, error } = await serverSupabase
            .from('books')
            .select('*')
            .ilike('author', '%—Ç–∞—Ä–º–∞—à–µ–≤%')
            .ilike('title', '%–¥—Ä–µ–≤–Ω–∏–π%') as { data: any[] | null, error: any };

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏:', error);
            return;
        }

        if (books && books.length > 0) {
            console.log('üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –¢–∞—Ä–º–∞—à–µ–≤–∞ —Å "–î—Ä–µ–≤–Ω–∏–π":');
            books.forEach((book, index) => {
                console.log(`${index + 1}. ID: ${book.id}`);
                console.log(`   –ê–≤—Ç–æ—Ä: "${book.author}"`);
                console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: "${book.title}"`);
                console.log(`   Telegram Post ID: ${book.telegram_post_id}`);
                console.log(`   Telegram File ID: ${book.telegram_file_id}`);
                console.log(`   File URL: ${book.file_url}`);
                console.log('');
            });

            // –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–∞–π–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏
            console.log('üîç –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–º–µ–Ω–∞–º–∏...');

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            const { data: files, error: storageError } = await serverSupabase.storage
                .from('books')
                .list('', {
                    limit: 1000,
                    search: '—Ç–∞—Ä–º–∞—à–µ–≤'
                }) as { data: any[] | null, error: any };

            if (storageError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', storageError);
                return;
            }

            if (files && files.length > 0) {
                console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å "—Ç–∞—Ä–º–∞—à–µ–≤": ${files.length}`);

                // –ò—â–µ–º —Ñ–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å "–î—Ä–µ–≤–Ω–∏–π"
                const ancientFiles = files.filter(file =>
                    file.name.toLowerCase().includes('–¥—Ä–µ–≤–Ω') ||
                    file.name.toLowerCase().includes('—Ç–∞—Ä–º–∞—à–µ–≤')
                );

                console.log(`üìã –§–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å "–î—Ä–µ–≤–Ω–∏–π": ${ancientFiles.length}`);
                ancientFiles.forEach((file, index) => {
                    console.log(`${index + 1}. ${file.name}`);
                    console.log(`   –†–∞–∑–º–µ—Ä: ${file.metadata?.size || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
                    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${file.updated_at}`);
                });
            } else {
                console.log('üìÅ –§–∞–π–ª–æ–≤ —Å "—Ç–∞—Ä–º–∞—à–µ–≤" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–Ω–∏–≥–∞–º
            console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–Ω–∏–≥–∞–º...');

            const { data: unlinkedFiles, error: unlinkedError } = await serverSupabase
                .from('telegram_processed_messages')
                .select('*')
                .not('book_id', 'is', null)
                .is('telegram_file_id', null) as { data: any[] | null, error: any };

            if (!unlinkedError && unlinkedFiles) {
                console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id: ${unlinkedFiles.length}`);

                // –ò—â–µ–º –∑–∞–ø–∏—Å–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¢–∞—Ä–º–∞—à–µ–≤—ã–º
                const tarmashevRecords = unlinkedFiles.filter(record =>
                    record.book_id // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ book_id –Ω–µ null
                );

                console.log(`üìö –ó–∞–ø–∏—Å–µ–π —Å –∫–Ω–∏–≥–∞–º–∏ –¢–∞—Ä–º–∞—à–µ–≤–∞: ${tarmashevRecords.length}`);
            }

        } else {
            console.log('‚ùå –ö–Ω–∏–≥–∞ "–°–µ—Ä–≥–µ–π –¢–∞—Ä–º–∞—à–µ–≤ - —Ü–∏–∫–ª –î—Ä–µ–≤–Ω–∏–π" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ –¢–∞—Ä–º–∞—à–µ–≤–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
findTarmashevFile().catch((error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});