import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function findTelegramMessageByRange(targetId: number, range: number = 10) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å ID ${targetId} (–¥–∏–∞–ø–∞–∑–æ–Ω: ¬±${range})`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üì° –ö–∞–Ω–∞–ª ID: ${channelId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞, –Ω–∞—á–∏–Ω–∞—è —Å —Ü–µ–ª–µ–≤–æ–≥–æ ID
    console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ ID ${targetId}...`);
    const messages = await telegramClient.getMessages(channelId, range * 2, targetId) as any;
    
    if (!messages || messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID
    messages.sort((a: any, b: any) => a.id - b.id);
    
    // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Å–µ–¥–Ω–∏–µ
    for (const message of messages) {
      console.log(`\n--- –°–æ–æ–±—â–µ–Ω–∏–µ ID: ${message.id} ---`);
      console.log(`  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ: ${Math.abs(message.id - targetId)}`);
      
      if (message.text) {
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const metadata = MetadataParser.parseMessage(message.text);
        console.log(`  –ê–≤—Ç–æ—Ä: ${metadata.author || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.title || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (message.id === targetId) {
          console.log(`  üéØ –≠—Ç–æ —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!`);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
          if (message.text) {
            const descriptionMatch = message.text.match(/–†–µ–π—Ç–∏–Ω–≥:[\s\S]*?\n([\s\S]*?)(?:\n\s*\n|–°–æ—Å—Ç–∞–≤:|$)/i);
            if (descriptionMatch) {
              const description = descriptionMatch[1].trim();
              console.log(`\nüìù –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:`);
              console.log(description);
              return description;
            }
          }
        }
      } else {
        console.log(`  –¢–µ–∫—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const telegramClient = await TelegramService.getInstance();
    if (telegramClient) {
      await telegramClient.disconnect();
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const targetIdStr = process.argv[2];
const rangeStr = process.argv[3];

if (!targetIdStr) {
  console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx src/scripts/find-telegram-message-by-range.ts <targetId> [range]');
  process.exit(1);
}

const targetId = parseInt(targetIdStr, 10);
const range = rangeStr ? parseInt(rangeStr, 10) : 10;

if (isNaN(targetId) || isNaN(range)) {
  console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞');
  process.exit(1);
}

findTelegramMessageByRange(targetId, range);