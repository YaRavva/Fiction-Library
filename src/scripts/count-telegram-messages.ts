import { config } from 'dotenv';
import { TelegramSyncService } from '../lib/telegram/sync';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config();

async function countTelegramMessages() {
  try {
    console.log('üîç –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª–µ...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    if (!syncService['telegramClient']) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Telegram –∫–ª–∏–µ–Ω—Ç—É');
      return;
    }
    
    const channel = await syncService['telegramClient'].getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: ${(channel as { title?: string }).title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º
    console.log('\nüì• –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...');
    let totalMessages = 0;
    let offsetId: number | undefined = undefined;
    const batchSize = 100; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    
    while (true) {
      console.log(`   –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (offsetId: ${offsetId || '–Ω–∞—á–∞–ª–æ'})...`);
      const messages = await syncService['telegramClient'].getMessages(channelId, batchSize, offsetId) as unknown[];
      
      if (messages.length === 0) {
        break;
      }
      
      totalMessages += messages.length;
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π. –í—Å–µ–≥–æ: ${totalMessages}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      // –ë–µ—Ä–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–∫–µ—Ç–µ
      const lastMessage = messages[messages.length - 1] as { id?: number };
      if (lastMessage.id) {
        offsetId = lastMessage.id;
      } else {
        break;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Telegram API
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`\nüìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: ${totalMessages}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const syncService = await TelegramSyncService.getInstance();
    await syncService.shutdown();
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
  countTelegramMessages();
}