/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function fixDuplicateRecords() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ –ø–æ telegram_file_id
    console.log('üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –ø–æ telegram_file_id...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ telegram_file_id
    const { data: allRecords, error: allRecordsError } = await supabase
      .from('telegram_processed_messages')
      .select('*')
      .order('telegram_file_id', { ascending: true });
      
    if (allRecordsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', allRecordsError.message);
      return;
    }
    
    if (!allRecords || allRecords.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ telegram_file_id
    const recordsByFileId: Record<string, any[]> = {};
    for (const record of allRecords) {
      if (record.telegram_file_id) {
        if (!recordsByFileId[record.telegram_file_id]) {
          recordsByFileId[record.telegram_file_id] = [];
        }
        recordsByFileId[record.telegram_file_id].push(record);
      }
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates = Object.entries(recordsByFileId).filter(([_, records]) => records.length > 1);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π:`);
    
    let totalDeleted = 0;
    
    for (const [fileId, records] of duplicates) {
      console.log(`\nüìÅ Telegram File ID: ${fileId}`);
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ Storage
      const fileName = `${fileId}.zip`;
      const { data: storageFiles, error: storageError } = await supabase
        .storage
        .from('books')
        .list('', { search: fileName });
        
      const fileExists = !storageError && storageFiles && storageFiles.length > 0;
      console.log(`   –§–∞–π–ª –≤ Storage: ${fileExists ? '–î–∞' : '–ù–µ—Ç'}`);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
      records.sort((a, b) => new Date(b.processed_at).getTime() - new Date(a.processed_at).getTime());
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é –Ω–æ–≤—É—é) –∑–∞–ø–∏—Å—å, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
      console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...`);
      for (let i = 1; i < records.length; i++) {
        const recordToDelete = records[i];
        console.log(`     –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID: ${recordToDelete.id}`);
        
        const { error: deleteError } = await supabase
          .from('telegram_processed_messages')
          .delete()
          .eq('id', recordToDelete.id);
          
        if (deleteError) {
          console.log(`       ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${deleteError.message}`);
        } else {
          console.log(`       ‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞`);
          totalDeleted++;
        }
      }
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Storage, –Ω–æ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î, —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      if (!fileExists) {
        console.log(`   ‚ö†Ô∏è  –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Storage, —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π...`);
        for (const record of records) {
          console.log(`     –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID: ${record.id}`);
          
          const { error: deleteError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('id', record.id);
            
          if (deleteError) {
            console.log(`       ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${deleteError.message}`);
          } else {
            console.log(`       ‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞`);
            totalDeleted++;
          }
        }
      }
    }
    
    console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`   –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalDeleted}`);
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –≤ Storage
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –≤ Storage...');
    let orphanedRecords = 0;
    
    for (const [fileId, records] of Object.entries(recordsByFileId)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ Storage
      const fileName = `${fileId}.zip`;
      const { data: storageFiles, error: storageError } = await supabase
        .storage
        .from('books')
        .list('', { search: fileName });
        
      const fileExists = !storageError && storageFiles && storageFiles.length > 0;
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      if (!fileExists) {
        console.log(`  üóëÔ∏è  –§–∞–π–ª ${fileId}.zip –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π...`);
        for (const record of records) {
          console.log(`    –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID: ${record.id}`);
          
          const { error: deleteError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('id', record.id);
            
          if (deleteError) {
            console.log(`      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${deleteError.message}`);
          } else {
            console.log(`      ‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞`);
            orphanedRecords++;
            totalDeleted++;
          }
        }
      }
    }
    
    console.log(`\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ orphaned –∑–∞–ø–∏—Å–µ–π: ${orphanedRecords}`);
    console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalDeleted}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
fixDuplicateRecords().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});