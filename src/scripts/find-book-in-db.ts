import { serverSupabase } from '../lib/serverSupabase';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function findBookInDb(author: string, title: string) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: "${title}" –∞–≤—Ç–æ—Ä–∞ ${author}`);
    
    // –ò—â–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const { data, error } = await (serverSupabase as any)
      .from('books')
      .select('*')
      .ilike('title', `%${title}%`)
      .ilike('author', `%${author}%`);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏:', error);
      return;
    }
    
    if (!data || data.length === 0) {
      console.log('‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: ${data.length}`);
    
    for (const book of data) {
      console.log('\n--- –ö–Ω–∏–≥–∞ ---');
      console.log(`ID: ${book.id}`);
      console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`);
      console.log(`–ê–≤—Ç–æ—Ä: ${book.author}`);
      console.log(`Series ID: ${book.series_id || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`Telegram post ID: ${book.telegram_post_id || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      
      // –ï—Å–ª–∏ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å series_id, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
      if (book.series_id) {
        const { data: series, error: seriesError } = await (serverSupabase as any)
          .from('series')
          .select('*')
          .eq('id', book.series_id)
          .single();
        
        if (series && !seriesError) {
          console.log('\n--- –°–µ—Ä–∏—è ---');
          console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${series.title}`);
          console.log(`–ê–≤—Ç–æ—Ä: ${series.author}`);
          
          if (series.series_composition && series.series_composition.length > 0) {
            console.log('–°–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏:');
            for (const [index, serieBook] of series.series_composition.entries()) {
              console.log(`  ${index + 1}. ${serieBook.title} (${serieBook.year})`);
            }
          } else {
            console.log('–°–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
          }
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const author = process.argv[2];
const title = process.argv[3];

if (!author || !title) {
  console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx src/scripts/find-book-in-db.ts "<author>" "<title>"');
  process.exit(1);
}

findBookInDb(author, title);