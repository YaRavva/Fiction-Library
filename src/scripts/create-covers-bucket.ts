#!/usr/bin/env tsx

import 'dotenv/config';
import { S3Client, CreateBucketCommand } from '@aws-sdk/client-s3';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞ –≤ Cloud.ru S3 –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥
 */

async function createCoversBucket() {
  console.log('üöÄ –°–æ–∑–¥–∞–µ–º –±–∞–∫–µ—Ç –¥–ª—è –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥ –≤ Cloud.ru S3');
  
  // –°–æ–∑–¥–∞–µ–º —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π S3-–∫–ª–∏–µ–Ω—Ç –¥–ª—è cloud.ru —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  const s3Client = new S3Client({
    endpoint: 'https://s3.cloud.ru',
    region: process.env.AWS_REGION || 'ru-central-1',
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
    },
  });
  
  // –ò–º—è –±–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±–ª–æ–∂–µ–∫
  const bucketName = 'fiction-library-covers';
  
  try {
    console.log(`\nüìã –°–æ–∑–¥–∞–µ–º –±–∞–∫–µ—Ç "${bucketName}"...`);
    
    const command = new CreateBucketCommand({
      Bucket: bucketName,
    });
    
    const response = await s3Client.send(command);
    console.log('‚úÖ –ë–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:');
    console.log(response);
    
    console.log(`\n‚ÑπÔ∏è  –ò–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–∞–∫–µ—Ç–∞: ${bucketName}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env
    console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...');
    const fs = require('fs');
    const path = require('path');
    
    const envPath = path.join(process.cwd(), '.env');
    let envContent = fs.readFileSync(envPath, 'utf8');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –±–∞–∫–µ—Ç–∞ –æ–±–ª–æ–∂–µ–∫
    const coversBucketLine = `S3_COVERS_BUCKET_NAME=${bucketName}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
    if (!envContent.includes('S3_COVERS_BUCKET_NAME=')) {
      envContent += `\n${coversBucketLine}`;
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: S3_COVERS_BUCKET_NAME=${bucketName}`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
      envContent = envContent.replace(/S3_COVERS_BUCKET_NAME=.*/g, coversBucketLine);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: S3_COVERS_BUCKET_NAME=${bucketName}`);
    }
    
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω');
    
  } catch (error: any) {
    if (error.name === 'BucketAlreadyOwnedByYou') {
      console.log(`‚ö†Ô∏è  –ë–∞–∫–µ—Ç "${bucketName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env
      console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...');
      const fs = require('fs');
      const path = require('path');
      
      const envPath = path.join(process.cwd(), '.env');
      let envContent = fs.readFileSync(envPath, 'utf8');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –±–∞–∫–µ—Ç–∞ –æ–±–ª–æ–∂–µ–∫
      const coversBucketLine = `S3_COVERS_BUCKET_NAME=${bucketName}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
      if (!envContent.includes('S3_COVERS_BUCKET_NAME=')) {
        envContent += `\n${coversBucketLine}`;
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: S3_COVERS_BUCKET_NAME=${bucketName}`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        envContent = envContent.replace(/S3_COVERS_BUCKET_NAME=.*/g, coversBucketLine);
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: S3_COVERS_BUCKET_NAME=${bucketName}`);
      }
      
      fs.writeFileSync(envPath, envContent);
      console.log('‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∫–µ—Ç–∞ –≤ Cloud.ru S3:', error.message);
      console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
      console.error(error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞
if (require.main === module) {
  createCoversBucket()
    .then(() => {
      console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { createCoversBucket };