// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import { config } from 'dotenv';
import { join } from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('  NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('  SUPABASE_SERVICE_ROLE_KEY:', supabaseKey || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏ –¥–ª—è "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è - —Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ"
const correctSeriesComposition = [
  { title: "–°—Ç–æ—è—á–∏–µ –∫–∞–º–Ω–∏", year: 1997 },
  { title: "–°–ø—è—â–µ–µ –∑–æ–ª–æ—Ç–æ", year: 2003 },
  { title: "–©–∏—Ç –ø–æ–±–µ—Ä–µ–∂—å—è", year: 2004 },
  { title: "–ö–æ—Ä–Ω–∏ –≥–æ—Ä", year: 2004 },
  { title: "–í–µ–¥—å–º–∏–Ω–∞ –∑–≤–µ–∑–¥–∞", year: 2002 },
  { title: "–ü–µ—Ä—Å—Ç–µ–Ω—å –∞–ª—å–≤–æ–≤", year: 2006 },
  { title: "–Ø—Å–µ–Ω—å –∏ —è–±–ª–æ–Ω—è", year: 2008 },
  { title: "–î—Ä–∞–∫–æ–Ω –≤–æ—Å—Ç–æ—á–Ω–æ–≥–æ –º–æ—Ä—è", year: 2008 },
  { title: "–í–æ–ª–∫ –≤ –Ω–æ—á–∏", year: 2020 },
  { title: "–ö—Ä–µ–ø–æ—Å—Ç—å –¢–µ–Ω–µ–π", year: 2021 },
  { title: "–ö–∞–º–µ–Ω–Ω—ã–π –¢—Ä–æ–Ω", year: 2021 },
  { title: "–õ–∞–Ω—å –≤ —á–∞—â–µ", year: 2008 }
];

async function updateSeriesComposition() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–∏–∏ –¥–ª—è "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è - —Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ"');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥—É
    const { data: book, error: bookError } = await supabase
      .from('books')
      .select('*')
      .eq('title', '—Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ')
      .eq('author', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è')
      .single();
    
    if (bookError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', bookError);
      return;
    }
    
    if (!book) {
      console.log('‚ùå –ö–Ω–∏–≥–∞ "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è - —Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞:`);
    console.log(`- ID: ${book.id}`);
    console.log(`- –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`);
    console.log(`- –ê–≤—Ç–æ—Ä: ${book.author}`);
    console.log(`- Series ID: ${book.series_id || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏ –∫–Ω–∏–≥–∞ –∫ —Å–µ—Ä–∏–∏
    if (!book.series_id) {
      console.log('‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
    const { data: series, error: seriesError } = await supabase
      .from('series')
      .select('*')
      .eq('id', book.series_id)
      .single();
    
    if (seriesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∏:', seriesError);
      return;
    }
    
    console.log(`\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–∏–∏:`);
    console.log(`- ID: ${series.id}`);
    console.log(`- –ù–∞–∑–≤–∞–Ω–∏–µ: ${series.title}`);
    console.log(`- –ê–≤—Ç–æ—Ä: ${series.author}`);
    
    const currentComposition = series.series_composition || [];
    console.log(`- –¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤: ${currentComposition.length} –∫–Ω–∏–≥`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏
    console.log(`\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏...`);
    
    const { error: updateError } = await supabase
      .from('series')
      .update({ 
        series_composition: correctSeriesComposition,
        title: "—Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ",
        author: "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è"
      })
      .eq('id', book.series_id);
    
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–∏–∏:', updateError);
      return;
    }
    
    console.log(`‚úÖ –°–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
    console.log(`\nüìã –ù–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏:`);
    correctSeriesComposition.forEach((book, index) => {
      console.log(`  ${index + 1}. ${book.title} (${book.year})`);
    });
    
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateSeriesComposition();