/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';
import { TelegramSyncService } from '../lib/telegram/sync';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function testFixes() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    const syncService = await TelegramSyncService.getInstance();
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω\n');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    console.log('üöÄ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 1 —Ñ–∞–π–ª–∞...');
    const results = await syncService.downloadAndProcessFilesDirectly(1);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
    console.log(`   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length}`);
    
    for (const result of results) {
      console.log(`   - Message ID: ${result.messageId}`);
      console.log(`     –£—Å–ø–µ—à–Ω–æ: ${result.success ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`     –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped ? '–î–∞' : '–ù–µ—Ç'}`);
      if (result.filename) console.log(`     –ò–º—è —Ñ–∞–π–ª–∞: ${result.filename}`);
      if (result.error) console.log(`     –û—à–∏–±–∫–∞: ${result.error}`);
      if (result.reason) {
        const reasonText = result.reason === 'book_not_found' ? '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' : 
                          result.reason === 'already_processed' ? '–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω' : result.reason;
        console.log(`     –ü—Ä–∏—á–∏–Ω–∞: ${reasonText}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages
      if (result.messageId && !result.skipped) {
        console.log(`     üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ telegram_processed_messages...`);
        const { data: processedMessages, error: processedMessagesError } = await supabase
          .from('telegram_processed_messages')
          .select('*')
          .eq('message_id', String(result.messageId));
          
        if (processedMessagesError) {
          console.log(`       ‚ùå –û—à–∏–±–∫–∞: ${processedMessagesError.message}`);
        } else if (processedMessages && processedMessages.length > 0) {
          const msg = processedMessages[0];
          console.log(`       ‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:`);
          console.log(`         Book ID: ${msg.book_id || '–ù–µ—Ç'}`);
          console.log(`         Telegram File ID: ${msg.telegram_file_id || '–ù–µ—Ç'}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥—É
          if (msg.book_id) {
            const { data: book, error: bookError } = await supabase
              .from('books')
              .select('title, author, file_url, telegram_file_id')
              .eq('id', msg.book_id)
              .single();
              
            if (bookError) {
              console.log(`         ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: ${bookError.message}`);
            } else if (book) {
              console.log(`         üìö –ö–Ω–∏–≥–∞: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
              console.log(`         üìé File URL: ${book.file_url ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
              console.log(`         üì± Telegram File ID: ${book.telegram_file_id ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}`);
            }
          }
        } else {
          console.log(`       ‚ö†Ô∏è  –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      }
      console.log('');
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
testFixes().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});