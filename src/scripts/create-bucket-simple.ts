#!/usr/bin/env tsx

import 'dotenv/config';
import { CreateBucketCommand } from '@aws-sdk/client-s3';
import { cloudRuS3 } from '../lib/cloud-ru-s3-service';
import * as fs from 'fs';
import * as path from 'path';

async function createBucketSimple() {
  console.log('=== –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç) ===');
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –±–∞–∫–µ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
  const bucketName = `books-${Date.now()}`;
  console.log(`–ù–æ–≤—ã–π –±–∞–∫–µ—Ç: ${bucketName}`);
  
  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
    console.log('\n1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞...');
    const createCommand = new CreateBucketCommand({
      Bucket: bucketName,
    });
    
    const createResponse = await cloudRuS3.send(createCommand);
    console.log('‚úÖ –ë–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    console.log('Location:', createResponse.Location);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è:');
    console.log(`–ù–æ–≤—ã–π –±–∞–∫–µ—Ç: ${bucketName}`);
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env
    console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...');
    const envPath = path.join(process.cwd(), '.env');
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ .env
    let envContent = fs.readFileSync(envPath, 'utf8');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å S3_BUCKET_NAME –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë
    const bucketNameRegex = /^S3_BUCKET_NAME=.*$/m;
    if (bucketNameRegex.test(envContent)) {
      envContent = envContent.replace(bucketNameRegex, `S3_BUCKET_NAME=${bucketName}`);
    } else {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
      envContent += `\nS3_BUCKET_NAME=${bucketName}`;
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–π –±–∞–∫–µ—Ç: ${bucketName}`);
    
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º –±–∞–∫–µ—Ç–æ–º:');
    console.log('   npx tsx src/scripts/migrate-to-cloud-ru.ts');
    
  } catch (error: any) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.name);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error.$metadata) {
      console.error('HTTP Status:', error.$metadata.httpStatusCode);
      console.error('Request ID:', error.$metadata.requestId);
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('\n–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞
if (require.main === module) {
  createBucketSimple()
    .then(() => {
      console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { createBucketSimple };