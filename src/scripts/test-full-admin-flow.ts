/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∫–∏ —Å API
 */
async function testFullAdminFlow() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∞–¥–º–∏–Ω–∫–∏');
  
  try {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API endpoint (POST /api/admin/download-files)
    console.log('\n1Ô∏è‚É£ –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API endpoint...');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∫–∞–∫ –≤ route.ts)
    const operationId = `download-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    console.log(`   üìù Operation ID: ${operationId}`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ taskManager.createTask (–∫–∞–∫ –≤ route.ts POST)
    const { taskManager } = await import('../lib/task-manager');
    taskManager.createTask(operationId);
    console.log('   ‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ taskManager');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–∫–∞–∫ –≤ route.ts POST)
    console.log('   üì• –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...');
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ BackgroundDownloadHandler.startDownload
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º polling —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API endpoint (GET /api/admin/download-files)
    console.log('\n2Ô∏è‚É£ –ò–º–∏—Ç–∞—Ü–∏—è polling\'–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API endpoint...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–∫–∞–∫ –≤ admin/page.tsx)
    let taskStatus = taskManager.getTaskStatus(operationId);
    if (!taskStatus) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (Operation not found)');
      return;
    }
    console.log(`   ‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞: —Å—Ç–∞—Ç—É—Å = ${taskStatus.status}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–∫–∞–∫ –≤ BackgroundDownloadHandler)
    taskManager.updateTaskStatus(operationId, 'running', 'üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...');
    console.log('   üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "running"');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    taskStatus = taskManager.getTaskStatus(operationId);
    if (!taskStatus || taskStatus.status !== 'running') {
      console.error('   ‚ùå –û—à–∏–±–∫–∞: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è');
      return;
    }
    console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ${taskStatus.status}`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('\n3Ô∏è‚É£ –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏...');
    taskManager.updateTaskProgress(operationId, 0, 'üì• –ù–∞–π–¥–µ–Ω–æ 2 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...');
    console.log('   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 0%');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
    taskManager.updateTaskProgress(operationId, 50, 'üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ 1/2: test-book-1.fb2 (ID: 2001)');
    console.log('   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 50%');
    
    taskManager.updateTaskProgress(operationId, 100, 'üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ 2/2: test-book-2.fb2 (ID: 2002)');
    console.log('   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 100%');
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
    const finalMessage = 'üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –£—Å–ø–µ—à–Ω–æ: 2 | –û—à–∏–±–∫–∏: 0 | –ü—Ä–æ–ø—É—â–µ–Ω–æ: 0 | –í—Å–µ–≥–æ: 2';
    taskManager.updateTaskStatus(operationId, 'completed', finalMessage);
    taskManager.updateTaskProgress(operationId, 100, finalMessage, {
      successCount: 2,
      failedCount: 0,
      skippedCount: 0,
      totalFiles: 2,
      results: [
        { filename: 'test-book-1.fb2', success: true },
        { filename: 'test-book-2.fb2', success: true }
      ]
    });
    console.log('   ‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API endpoint
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API endpoint...');
    const finalTaskStatus = taskManager.getTaskStatus(operationId);
    if (!finalTaskStatus) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Operation not found)');
      return;
    }
    console.log(`   ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${finalTaskStatus.status}`);
    console.log(`   üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${finalTaskStatus.progress}%`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (finalTaskStatus.result && finalTaskStatus.result.successCount === 2) {
      console.log('   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    } else {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }
    
    console.log('\n‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∞–¥–º–∏–Ω–∫–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testFullAdminFlow().catch(console.error);
}