import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function searchTelegramMessages(keyword: string, limit: number = 100) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: "${keyword}"`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üì° –ö–∞–Ω–∞–ª ID: ${channelId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log(`üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${limit} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞...`);
    const messages = await telegramClient.getMessages(channelId, limit) as any;
    
    if (!messages || messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    let foundCount = 0;
    
    for (const message of messages) {
      if (message.text && message.text.toLowerCase().includes(keyword.toLowerCase())) {
        foundCount++;
        console.log(`\n--- –°–æ–æ–±—â–µ–Ω–∏–µ ID: ${message.id} ---`);
        
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const metadata = MetadataParser.parseMessage(message.text);
        console.log(`  –ê–≤—Ç–æ—Ä: ${metadata.author || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.title || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        const descriptionMatch = message.text.match(/–†–µ–π—Ç–∏–Ω–≥:[\s\S]*?\n([\s\S]*?)(?:\n\s*\n|–°–æ—Å—Ç–∞–≤:|$)/i);
        if (descriptionMatch) {
          const description = descriptionMatch[1].trim();
          console.log(`\nüìù –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:`);
          console.log(description.substring(0, 300) + (description.length > 300 ? '...' : ''));
        }
        
        if (foundCount >= 10) {
          console.log('\n... (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)');
          break;
        }
      }
    }
    
    if (foundCount === 0) {
      console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "${keyword}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    } else {
      console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ ${foundCount} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "${keyword}"`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const telegramClient = await TelegramService.getInstance();
    if (telegramClient) {
      await telegramClient.disconnect();
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const keyword = process.argv[2];
const limitStr = process.argv[3];

if (!keyword) {
  console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx src/scripts/search-telegram-messages.ts "<keyword>" [limit]');
  process.exit(1);
}

const limit = limitStr ? parseInt(limitStr, 10) : 100;

if (isNaN(limit)) {
  console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞');
  process.exit(1);
}

searchTelegramMessages(keyword, limit);