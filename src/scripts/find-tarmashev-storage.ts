#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¢–∞—Ä–º–∞—à–µ–≤–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function findTarmashevStorage() {
    console.log('üîç –ò—â–µ–º —Ñ–∞–π–ª—ã –¢–∞—Ä–º–∞—à–µ–≤–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...\n');

    try {
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
        const supabase = createClient(
            process.env.NEXT_PUBLIC_SUPABASE_URL!,
            process.env.SUPABASE_SERVICE_ROLE_KEY!
        );

        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –±–∞–∫–µ—Ç–æ–≤
        const buckets = ['books', 'covers', 'files'];

        for (const bucket of buckets) {
            console.log(`\nüì• –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∫–µ—Ç: ${bucket}`);
            try {
                const { data: bucketFiles, error } = await supabase.storage
                    .from(bucket)
                    .list('', { limit: 100 });

                if (error) {
                    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∫–µ—Ç—É ${bucket}: ${error.message}`);
                    continue;
                }

                console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${bucketFiles?.length || 0}`);

                if (bucketFiles && bucketFiles.length > 0) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
                    const cyrillicFiles = bucketFiles.filter(file =>
                        /[–∞-—è—ë]/i.test(file.name)
                    );

                    if (cyrillicFiles.length > 0) {
                        console.log(`   üî§ –§–∞–π–ª–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π –≤ –±–∞–∫–µ—Ç–µ ${bucket}: ${cyrillicFiles.length}`);
                        cyrillicFiles.slice(0, 5).forEach((file, index) => {
                            console.log(`     ${index + 1}. ${file.name}`);
                        });
                    }
                }
            } catch (bucketError) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∫–µ—Ç–∞ ${bucket}: ${bucketError}`);
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–∫–µ—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const { data: files, error } = await supabase.storage
            .from('books')
            .list('', { limit: 1000 });

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
            return;
        }

        console.log('‚úÖ –§–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É...');
        let cyrillicCount = 0;
        let nonAsciiCount = 0;

        files?.forEach((file, index) => {
            if (/[^\x00-\x7F]/.test(file.name)) {
                nonAsciiCount++;
                if (index < 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                    console.log(`  ${index + 1}. ${file.name}`);
                }
            }
            if (/[–∞-—è—ë]/i.test(file.name)) {
                cyrillicCount++;
            }
        });

        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
        console.log(`   –§–∞–π–ª–æ–≤ —Å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–∞–º–∏: ${nonAsciiCount}`);
        console.log(`   –§–∞–π–ª–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π: ${cyrillicCount}`);

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
            return;
        }

        console.log(`üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${files?.length || 0}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ)
        if (files && files.length <= 20) {
            console.log('\nüìã –í—Å–µ —Ñ–∞–π–ª—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:');
            files.forEach((file, index) => {
                console.log(`${index + 1}. ${file.name}`);
            });
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            console.log('\nüìã –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:');
            const indices = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90];
            indices.forEach(index => {
                if (files[index]) {
                    console.log(`${index + 1}. ${files[index].name}`);
                }
            });
        }

        // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–∞–º–∏ (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É)
        const nonAsciiFiles = files?.filter(file =>
            /[^\x00-\x7F]/.test(file.name)
        ) || [];

        console.log(`\nüî§ –§–∞–π–ª—ã —Å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–∞–º–∏: ${nonAsciiFiles.length}`);

        if (nonAsciiFiles.length > 0) {
            console.log('\nüìö –ü–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–∞–º–∏:');
            nonAsciiFiles.slice(0, 20).forEach((file, index) => {
                console.log(`${index + 1}. ${file.name}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é Unicode
                const originalLength = file.name.length;
                const normalized = file.name.normalize('NFC');
                const normalizedLength = normalized.length;

                if (originalLength !== normalizedLength) {
                    console.log(`   üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: ${originalLength} ‚Üí ${normalizedLength} —Å–∏–º–≤–æ–ª–æ–≤`);
                    console.log(`   ‚úÖ –§–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É!`);
                }
            });
        }

        // –ò—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
        const possibleCyrillicFiles = files?.filter(file => {
            const name = file.name.toLowerCase();
            // –ò—â–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ç–∏–ø–∏—á–Ω—ã–µ –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–µ–Ω
            return name.includes('–∞–≤—Ç–æ—Ä') ||
                   name.includes('–∫–Ω–∏–≥–∞') ||
                   name.includes('—Ü–∏–∫–ª') ||
                   name.includes('—Ç–æ–º') ||
                   name.includes('—á–∞—Å—Ç—å') ||
                   name.includes('–≥–ª–∞–≤–∞');
        }) || [];

        console.log(`\nüìñ –§–∞–π–ª—ã —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏: ${possibleCyrillicFiles.length}`);

        if (possibleCyrillicFiles.length > 0) {
            console.log('\nüìö –ü–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏:');
            possibleCyrillicFiles.slice(0, 20).forEach((file, index) => {
                console.log(`${index + 1}. ${file.name}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é Unicode
                const originalLength = file.name.length;
                const normalized = file.name.normalize('NFC');
                const normalizedLength = normalized.length;

                if (originalLength !== normalizedLength) {
                    console.log(`   üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: ${originalLength} ‚Üí ${normalizedLength} —Å–∏–º–≤–æ–ª–æ–≤`);
                    console.log(`   ‚úÖ –§–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É!`);
                }
            });
        }

        // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π (—Å–æ–¥–µ—Ä–∂–∞—Ç —Å–∏–º–≤–æ–ª—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
        const actualCyrillicFiles = files?.filter(file =>
            /[–∞-—è—ë]/i.test(file.name)
        ) || [];

        console.log(`\nüî§ –§–∞–π–ª—ã —Å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–∞–º–∏: ${nonAsciiFiles.length}`);

        if (nonAsciiFiles.length > 0) {
            console.log('\nüìö –ü–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ-ASCII —Å–∏–º–≤–æ–ª–∞–º–∏:');
            nonAsciiFiles.slice(0, 20).forEach((file, index) => {
                console.log(`${index + 1}. ${file.name}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é Unicode
                const originalLength = file.name.length;
                const normalized = file.name.normalize('NFC');
                const normalizedLength = normalized.length;

                if (originalLength !== normalizedLength) {
                    console.log(`   üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: ${originalLength} ‚Üí ${normalizedLength} —Å–∏–º–≤–æ–ª–æ–≤`);
                    console.log(`   ‚úÖ –§–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É!`);
                }
            });
        }

        // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π (—Å–æ–¥–µ—Ä–∂–∞—Ç —Å–∏–º–≤–æ–ª—ã –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
        const cyrillicFiles = files?.filter(file =>
            /[–∞-—è—ë]/i.test(file.name)
        ) || [];

        console.log(`\nüî§ –§–∞–π–ª—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π: ${cyrillicFiles.length}`);

        if (cyrillicFiles.length > 0) {
            console.log('\nüìö –ü–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤ —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π:');
            cyrillicFiles.slice(0, 20).forEach((file, index) => {
                console.log(`${index + 1}. ${file.name}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é Unicode
                const originalLength = file.name.length;
                const normalized = file.name.normalize('NFC');
                const normalizedLength = normalized.length;

                if (originalLength !== normalizedLength) {
                    console.log(`   üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: ${originalLength} ‚Üí ${normalizedLength} —Å–∏–º–≤–æ–ª–æ–≤`);
                    console.log(`   ‚úÖ –§–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É!`);
                }
            });
        }

        // –ò—â–µ–º —Ñ–∞–π–ª—ã –¢–∞—Ä–º–∞—à–µ–≤–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
        const tarmashevFiles = files?.filter(file => {
            const name = file.name.toLowerCase();
            return name.includes('—Ç–∞—Ä–º–∞—à–µ–≤') ||
                   name.includes('—Çarma—à–µ–≤') ||
                   name.includes('—Ç–∞—Ä–º–∞—à—ë–≤') ||
                   name.includes('tarma—à–µ–≤') ||
                   name.includes('–¥—Ä–µ–≤–Ω') ||
                   name.includes('–¥—Ä–µ–≤–Ω–∏–π') ||
                   name.includes('ancient');
        }) || [];

        console.log(`\nüìö –§–∞–π–ª—ã –¢–∞—Ä–º–∞—à–µ–≤–∞: ${tarmashevFiles.length}`);

        if (tarmashevFiles.length > 0) {
            tarmashevFiles.forEach((file, index) => {
                console.log(`${index + 1}. ${file.name}`);
                console.log(`   –†–∞–∑–º–µ—Ä: ${file.metadata?.size || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
                console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${file.updated_at}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é Unicode
                const originalLength = file.name.length;
                const normalized = file.name.normalize('NFC');
                const normalizedLength = normalized.length;

                if (originalLength !== normalizedLength) {
                    console.log(`   üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: ${originalLength} ‚Üí ${normalizedLength} —Å–∏–º–≤–æ–ª–æ–≤`);
                    console.log(`   ‚úÖ –§–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É!`);
                } else {
                    console.log(`   ‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è`);
                }
                console.log('');
            });
        }

        // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ñ–∞–π–ª—ã —Å "–î—Ä–µ–≤–Ω–∏–π"
        const ancientFiles = files?.filter(file => {
            const name = file.name.toLowerCase();
            return name.includes('–¥—Ä–µ–≤–Ω') ||
                   name.includes('–¥—Ä–µ–≤–Ω–∏–π') ||
                   name.includes('–¥—Ä–µ–≤–Ω–∏–∏') ||
                   name.includes('–¥—Ä–µ–≤–Ω—ñ') ||
                   name.includes('ancient');
        }) || [];

        console.log(`\nüìñ –§–∞–π–ª—ã —Å "–î—Ä–µ–≤–Ω–∏–π": ${ancientFiles.length}`);
        if (ancientFiles.length > 0) {
            ancientFiles.forEach((file, index) => {
                console.log(`${index + 1}. ${file.name}`);
            });
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤ –¢–∞—Ä–º–∞—à–µ–≤–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
findTarmashevStorage().catch((error) => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});