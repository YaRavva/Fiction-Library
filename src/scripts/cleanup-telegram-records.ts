/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages
 * –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª–∞–º –≤ Storage
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function cleanupTelegramRecords() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ Storage (–±–µ–∑ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
    console.log('üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Storage...');
    const { data: storageFiles, error: storageError } = await supabase
      .storage
      .from('books')
      .list('', { limit: 100 });
      
    if (storageError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', storageError.message);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
    const actualFiles = storageFiles?.filter(file => !file.name.startsWith('.')) || [];
    const fileIds = actualFiles.map(file => file.name.replace(/\.[^/.]+$/, ""));
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ Storage: ${actualFiles.length}`);
    console.log(`   –§–∞–π–ª—ã: ${fileIds.join(', ')}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ telegram_processed_messages
    console.log('\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages...');
    const { data: allRecords, error: allRecordsError } = await supabase
      .from('telegram_processed_messages')
      .select('id, message_id, telegram_file_id, book_id');
      
    if (allRecordsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', allRecordsError.message);
      return;
    }
    
    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${allRecords?.length || 0}`);
    
    let deletedRecords = 0;
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª–∞–º –≤ Storage
    if (allRecords) {
      for (const record of allRecords) {
        let shouldKeep = false;
        
        // –î–ª—è –∑–∞–ø–∏—Å–µ–π —Å telegram_file_id –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞–º
        if (record.telegram_file_id) {
          if (fileIds.includes(record.telegram_file_id)) {
            shouldKeep = true;
          }
        } 
        // –î–ª—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∞
        else if (record.book_id) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞
          const { data: book, error: bookError } = await supabase
            .from('books')
            .select('id, telegram_file_id')
            .eq('id', record.book_id)
            .single();
            
          if (!bookError && book) {
            // –ï—Å–ª–∏ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å telegram_file_id –∏ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª—É –≤ Storage, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            if (book.telegram_file_id && fileIds.includes(book.telegram_file_id)) {
              shouldKeep = true;
            }
          }
        }
        
        // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è, —É–¥–∞–ª—è–µ–º –µ—ë
        if (!shouldKeep) {
          console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID ${record.id}...`);
          const { error: deleteError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('id', record.id);
            
          if (deleteError) {
            console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${deleteError.message}`);
          } else {
            console.log(`    ‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞`);
            deletedRecords++;
          }
        }
      }
    }
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏:');
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${deletedRecords}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π...');
    const { count: finalCount, error: finalCountError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true });
      
    if (finalCountError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:', finalCountError.message);
      return;
    }
    
    console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${finalCount || 0}`);
    
    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
cleanupTelegramRecords().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});