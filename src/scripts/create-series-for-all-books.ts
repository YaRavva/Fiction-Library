// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import { join } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('  NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('  SUPABASE_SERVICE_ROLE_KEY:', supabaseKey || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function createSeriesForAllBooks() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('*');
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:', booksError);
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: ${books.length}`);
    
    let processed = 0;
    let updated = 0;
    let skipped = 0;
    let errors = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
    for (const book of books) {
      try {
        processed++;
        console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥—É ${processed}/${books.length}: ${book.author} - ${book.title}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ —Å–æ—Å—Ç–∞–≤ (–ø–æ–ª–µ books –∫–∞–∫ JSON)
        let bookComposition = null;
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–ª–µ books –∫–∞–∫ JSON
          if (typeof book.books === 'string') {
            bookComposition = JSON.parse(book.books);
          } else if (Array.isArray(book.books)) {
            bookComposition = book.books;
          }
        } catch (parseError) {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          console.log(`  ‚ÑπÔ∏è  –£ –∫–Ω–∏–≥–∏ –Ω–µ—Ç —Å–æ—Å—Ç–∞–≤–∞ (–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–ª–µ books)`);
          skipped++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–∞–≤
        if (!bookComposition || !Array.isArray(bookComposition) || bookComposition.length === 0) {
          console.log(`  ‚ÑπÔ∏è  –£ –∫–Ω–∏–≥–∏ –Ω–µ—Ç —Å–æ—Å—Ç–∞–≤–∞`);
          skipped++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏ –∫–Ω–∏–≥–∞ –∫ —Å–µ—Ä–∏–∏
        if (book.series_id) {
          console.log(`  ‚ÑπÔ∏è  –ö–Ω–∏–≥–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏`);
          skipped++;
          continue;
        }
        
        console.log(`  üìö –£ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–∞–≤ –∏–∑ ${bookComposition.length} –∫–Ω–∏–≥, —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é...`);
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é
        const seriesData: any = {
          title: book.title,
          author: book.author,
          description: book.description || '',
          genres: book.genres || [],
          tags: book.tags || [],
          rating: book.rating || null,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          series_composition: bookComposition
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (book.cover_url) {
          seriesData.cover_url = book.cover_url;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º telegram_post_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (book.telegram_post_id) {
          seriesData.telegram_post_id = book.telegram_post_id;
        }
        
        const { data: insertedSeries, error: seriesError } = await supabase
          .from('series')
          .insert(seriesData)
          .select()
          .single();
        
        if (seriesError) {
          console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏:`, seriesError);
          errors++;
          continue;
        }
        
        const newSeriesId = (insertedSeries as any).id;
        console.log(`  ‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newSeriesId}`);
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –∫ —Å–µ—Ä–∏–∏
        const { error: updateError } = await supabase
          .from('books')
          .update({ series_id: newSeriesId })
          .eq('id', book.id);
        
        if (updateError) {
          console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–Ω–∏–≥–∏ –∫ —Å–µ—Ä–∏–∏:`, updateError);
          errors++;
          continue;
        }
        
        console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏`);
        updated++;
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏ ${book.id}:`, error);
        errors++;
      }
    }
    
    console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`);
    console.log(`  - –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    console.log(`  - –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    console.log(`  - –û—à–∏–±–æ–∫: ${errors}`);
    
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createSeriesForAllBooks();