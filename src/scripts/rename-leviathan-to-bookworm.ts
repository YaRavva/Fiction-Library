import { config } from 'dotenv';
import { resolve } from 'path';
import { rename, readdir, stat, readFile, writeFile } from 'fs/promises';
import { join } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({ path: resolve(__dirname, '../../.env') });

async function renameFilesAndDirectories() {
    console.log('üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');
    
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    const fileRenames = [
        { old: 'book-worm-service.ts', new: 'book-worm-service.ts' },
        { old: 'run-book-worm.ts', new: 'run-book-worm.ts' },
        { old: 'scheduled-book-worm.ts', new: 'scheduled-book-worm.ts' },
        { old: 'test-book-worm-logic.ts', new: 'test-book-worm-logic.ts' }
    ];
    
    for (const renameItem of fileRenames) {
        const oldPath = resolve(__dirname, `../lib/telegram/${renameItem.old}`);
        const newPath = resolve(__dirname, `../lib/telegram/${renameItem.new}`);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
            await stat(oldPath);
            await rename(oldPath, newPath);
            console.log(`‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: ${renameItem.old} ‚Üí ${renameItem.new}`);
        } catch (error) {
            console.log(`‚ÑπÔ∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: ${renameItem.old}`);
        }
    }
    
    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
    const scriptRenames = [
        { old: 'run-book-worm.ts', new: 'run-book-worm.ts' },
        { old: 'scheduled-book-worm.ts', new: 'scheduled-book-worm.ts' },
        { old: 'test-book-worm-logic.ts', new: 'test-book-worm-logic.ts' }
    ];
    
    for (const renameItem of scriptRenames) {
        const oldPath = resolve(__dirname, renameItem.old);
        const newPath = resolve(__dirname, renameItem.new);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
            await stat(oldPath);
            await rename(oldPath, newPath);
            console.log(`‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Å–∫—Ä–∏–ø—Ç: ${renameItem.old} ‚Üí ${renameItem.new}`);
        } catch (error) {
            console.log(`‚ÑπÔ∏è  –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: ${renameItem.old}`);
        }
    }
    
    console.log('‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

async function updateFileContents() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
    async function getAllFiles(dir: string): Promise<string[]> {
        const files: string[] = [];
        const items = await readdir(dir);
        
        for (const item of items) {
            const fullPath = join(dir, item);
            const stats = await stat(fullPath);
            
            if (stats.isDirectory() && !item.includes('node_modules') && !item.includes('.git')) {
                files.push(...await getAllFiles(fullPath));
            } else if (stats.isFile() && (item.endsWith('.ts') || item.endsWith('.md') || item.endsWith('.json'))) {
                files.push(fullPath);
            }
        }
        
        return files;
    }
    
    const files = await getAllFiles(resolve(__dirname, '../../'));
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
    const replacements = [
        { from: /–ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å/g, to: '–ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å' },
        { from: /–ö–Ω–∏–∂–Ω–æ–≥–æ –ß–µ—Ä–≤—è/g, to: '–ö–Ω–∏–∂–Ω–æ–≥–æ –ß–µ—Ä–≤—è' },
        { from: /–ö–Ω–∏–∂–Ω–æ–º—É –ß–µ—Ä–≤—é/g, to: '–ö–Ω–∏–∂–Ω–æ–º—É –ß–µ—Ä–≤—é' },
        { from: /–ö–Ω–∏–∂–Ω—ã–º –ß–µ—Ä–≤–µ–º/g, to: '–ö–Ω–∏–∂–Ω—ã–º –ß–µ—Ä–≤–µ–º' },
        { from: /–ö–Ω–∏–∂–Ω–æ–º –ß–µ—Ä–≤–µ/g, to: '–ö–Ω–∏–∂–Ω–æ–º –ß–µ—Ä–≤–µ' },
        { from: /Book Worm/g, to: 'Book Worm' },
        { from: /book-worm/g, to: 'book-worm' },
        { from: /Book Worms/g, to: 'Book Worms' },
        { from: /book-worms/g, to: 'book-worms' }
    ];
    
    let updatedFiles = 0;
    
    for (const file of files) {
        try {
            const content = await readFile(file, 'utf-8');
            let newContent = content;
            let changed = false;
            
            for (const replacement of replacements) {
                if (replacement.from.test(newContent)) {
                    newContent = newContent.replace(replacement.from, replacement.to);
                    changed = true;
                }
            }
            
            if (changed) {
                await writeFile(file, newContent, 'utf-8');
                console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: ${file}`);
                updatedFiles++;
            }
        } catch (error) {
            console.log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file}:`, error);
        }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${updatedFiles}`);
}

async function main() {
    console.log('üêã –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ "–ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å" –≤ "–ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å"');
    console.log('==============================================');
    
    try {
        await renameFilesAndDirectories();
        await updateFileContents();
        
        console.log('\nüéâ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        console.log('–¢–µ–ø–µ—Ä—å —Å–µ—Ä–≤–∏—Å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å" (Book Worm)');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

export { renameFilesAndDirectories, updateFileContents };