import { config } from 'dotenv';
import { resolve } from 'path';
import { getSupabaseAdmin } from '../lib/supabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

async function updateTelegramPostId() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è telegram_post_id –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase: any = getSupabaseAdmin();
    if (!supabase) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö telegram_post_id –ø—É—Å—Ç, –Ω–æ –µ—Å—Ç—å telegram_file_id
    const { data: books, error: fetchError } = await supabase
      .from('books')
      .select('id, telegram_file_id')
      .is('telegram_post_id', null)
      .not('telegram_file_id', 'is', null);
    
    if (fetchError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: ${fetchError.message}`);
    }
    
    if (!books || books.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${books.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    let updatedCount = 0;
    for (const book of books) {
      const { error: updateError } = await supabase
        .from('books')
        .update({
          telegram_post_id: book.telegram_file_id
        })
        .eq('id', book.id);
      
      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ${book.id}: ${updateError.message}`);
      } else {
        updatedCount++;
      }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –∏–∑ ${books.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–±–∞ –ø–æ–ª—è –ø—É—Å—Ç—ã
    console.log('üîç –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏...');
    
    const { data: remainingBooks, error: fetchRemainingError } = await supabase
      .from('books')
      .select('id')
      .is('telegram_post_id', null);
    
    if (fetchRemainingError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π: ${fetchRemainingError.message}`);
    }
    
    if (!remainingBooks || remainingBooks.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${remainingBooks.length} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –î–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_post_id –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    let remainingUpdatedCount = 0;
    for (const book of remainingBooks) {
      const { error: updateError } = await supabase
        .from('books')
        .update({
          telegram_post_id: ''
        })
        .eq('id', book.id);
      
      if (updateError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ${book.id}: ${updateError.message}`);
      } else {
        remainingUpdatedCount++;
      }
    }
    
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${remainingUpdatedCount} –∏–∑ ${remainingBooks.length} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø–∏—Å–µ–π`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è telegram_post_id:', error);
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
if (require.main === module) {
  updateTelegramPostId()
    .then(() => {
      console.log('üîí –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
      process.exit(1);
    });
}