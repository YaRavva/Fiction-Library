import { serverSupabase } from '../lib/serverSupabase';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function updateBookTags(bookId: string, tags: string[]) {
  try {
    console.log(`üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∫–Ω–∏–≥–∏ —Å ID: ${bookId}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateData: any = { tags: tags };
    const { data, error } = await (serverSupabase as any)
      .from('books')
      .update(updateData)
      .eq('id', bookId)
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤ –∫–Ω–∏–≥–∏:', error);
      return;
    }
    
    if (!data) {
      console.log('‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const book: any = data;
    
    console.log('‚úÖ –¢–µ–≥–∏ –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:');
    console.log(`  ID: ${book.id}`);
    console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`);
    console.log(`  –ê–≤—Ç–æ—Ä: ${book.author}`);
    console.log(`  –¢–µ–≥–∏: ${book.tags ? book.tags.join(', ') : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏ —Ç–µ–≥–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const bookId = process.argv[2];
const tagsStr = process.argv.slice(3).join(' ');

if (!bookId || !tagsStr) {
  console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –∏ —Ç–µ–≥–∏');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx src/scripts/update-book-tags.ts <bookId> <—Ç–µ–≥1> <—Ç–µ–≥2> ...');
  process.exit(1);
}

// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ç–µ–≥–æ–≤ –Ω–∞ –º–∞—Å—Å–∏–≤
const tags = tagsStr.split(',').map(tag => tag.trim());

updateBookTags(bookId, tags);