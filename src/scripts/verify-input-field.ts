import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

async function verifyInputField() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞ "–õ–∏–º–∏—Ç"...');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    const testLimits = [1, 10, 50, 100, 250, 500, 1000];
    
    console.log('üìä –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:');
    testLimits.forEach(limit => {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
      const validatedLimit = Math.max(1, Math.min(1000, limit));
      console.log(`  ${limit} -> ${validatedLimit} (–≤–∞–ª–∏–¥–Ω–æ: ${validatedLimit === limit})`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    console.log('\n‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π:');
    const edgeCases = [0, -1, 1001, 2000];
    edgeCases.forEach(value => {
      const validated = Math.max(1, Math.min(1000, Number(value) || 100));
      console.log(`  ${value} -> ${validated}`);
    });
    
    console.log('\n‚úÖ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞:');
    console.log('  - –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å');
    console.log('  - –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç 1 –¥–æ 1000');
    console.log('  - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100');
    console.log('  - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  } finally {
    console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

verifyInputField();