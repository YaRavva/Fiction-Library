#!/usr/bin/env tsx

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import { uploadFile } from '../lib/cloud-ru-s3-service';
import { Buffer } from 'buffer';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥ –∏–∑ Supabase Storage –≤ Cloud.ru S3
 */

async function uploadCoversFromSupabase() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥ –∏–∑ Supabase Storage –≤ Cloud.ru S3');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  const coversBucketName = process.env.S3_COVERS_BUCKET_NAME || 'fiction-library-covers';
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    console.log('- NEXT_PUBLIC_SUPABASE_URL');
    console.log('- SUPABASE_SERVICE_ROLE_KEY');
    console.log('- S3_COVERS_BUCKET_NAME (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: fiction-library-covers)');
    return;
  }
  
  console.log(`\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±–ª–æ–∂–µ–∫:`);
  console.log(`Supabase URL: ${supabaseUrl}`);
  console.log(`Cloud.ru Bucket –¥–ª—è –æ–±–ª–æ–∂–µ–∫: ${coversBucketName}`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
  const supabase = createClient(supabaseUrl, supabaseServiceKey);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìö –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, cover_url, cover_path')
      .not('cover_path', 'is', null)
      .order('created_at', { ascending: true });
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:', booksError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ —Å –æ–±–ª–æ–∂–∫–∞–º–∏`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–±–ª–æ–∂–∫–∏ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ Cloud.ru S3
    const booksToMigrate = books.filter(book => 
      book.cover_url && !book.cover_url.includes('s3.cloud.ru')
    );
    
    console.log(`üìã –ö–Ω–∏–≥ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±–ª–æ–∂–µ–∫: ${booksToMigrate.length}`);
    
    if (booksToMigrate.length === 0) {
      console.log('‚ÑπÔ∏è  –í—Å–µ –æ–±–ª–æ–∂–∫–∏ —É–∂–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ Cloud.ru S3');
      return;
    }
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let processedCount = 0;
    let uploadedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –æ–±–ª–æ–∂–µ–∫...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < booksToMigrate.length; i++) {
      const book = booksToMigrate[i];
      const progress = `${i + 1}/${booksToMigrate.length}`;
      
      console.log(`\n[${progress}] ${book.author} - ${book.title}`);
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ
        if (!book.cover_path) {
          console.log(`  ‚ö†Ô∏è  –ù–µ—Ç –ø—É—Ç–∏ –∫ –æ–±–ª–æ–∂–∫–µ`);
          skippedCount++;
          processedCount++;
          continue;
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É –∏–∑ Supabase Storage
        console.log(`  üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –∏–∑ Supabase Storage: ${book.cover_path}`);
        const { data: fileData, error: downloadError } = await supabase.storage
          .from('covers')
          .download(book.cover_path);
        
        if (downloadError) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: ${downloadError.message}`);
          errorCount++;
          processedCount++;
          continue;
        }
        
        if (!fileData) {
          console.log(`  ‚ùå –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase Storage`);
          errorCount++;
          processedCount++;
          continue;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Blob –≤ Buffer
        const arrayBuffer = await fileData.arrayBuffer();
        const coverBuffer = Buffer.from(arrayBuffer);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const fileExtension = book.cover_path.includes('.') 
          ? book.cover_path.substring(book.cover_path.lastIndexOf('.')) 
          : '.jpg';
        const fileName = `${book.id}${fileExtension}`;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É –≤ Cloud.ru S3
        console.log(`  ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏ –≤ Cloud.ru S3...`);
        const uploadResult = await uploadFile(coversBucketName, fileName, coverBuffer);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const newCoverUrl = `https://s3.cloud.ru/${coversBucketName}/${fileName}`;
        
        const { error: updateError } = await supabase
          .from('books')
          .update({
            cover_url: newCoverUrl,
            updated_at: new Date().toISOString()
          })
          .eq('id', book.id);
        
        if (updateError) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, updateError.message);
          errorCount++;
          processedCount++;
          continue;
        }
        
        uploadedCount++;
        console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        processedCount++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error: any) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏:`, error.message);
        errorCount++;
        processedCount++;
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò—Ç–æ–≥–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±–ª–æ–∂–µ–∫:');
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} –∫–Ω–∏–≥`);
    console.log(`  üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫: ${uploadedCount} —à—Ç.`);
    console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –∫–Ω–∏–≥`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —à—Ç.`);
    console.log(`  üìö –í—Å–µ–≥–æ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞: ${booksToMigrate.length} –∫–Ω–∏–≥`);
    
    if (errorCount === 0) {
      console.log('\nüéâ –ü–µ—Ä–µ–Ω–æ—Å –æ–±–ª–æ–∂–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    } else {
      console.log(`\n‚ö†Ô∏è  –ü–µ—Ä–µ–Ω–æ—Å –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å ${errorCount} –æ—à–∏–±–∫–∞–º–∏`);
    }
    
  } catch (error: any) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±–ª–æ–∂–µ–∫:', error.message);
    console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±–ª–æ–∂–µ–∫
if (require.main === module) {
  uploadCoversFromSupabase()
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { uploadCoversFromSupabase };