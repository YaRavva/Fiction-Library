import JSZip from 'jszip';
import dotenv from 'dotenv';

dotenv.config();

async function testFilePaths() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤...');
    
    // URL —Ñ–∞–π–ª–∞ –≤ S3
    const fileUrl = 'https://fiction-library-1760461283197.s3.cloud.ru/4379.zip';
    
    console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${fileUrl}`);
    
    const response = await fetch(fileUrl);
    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
      return;
    }
    
    const arrayBuffer = await response.arrayBuffer();
    const zip = new JSZip();
    const zipContent = await zip.loadAsync(arrayBuffer);
    
    console.log('\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞:');
    const fileContents: {name: string, content: string}[] = [];
    const filePromises: Promise<void>[] = [];
    
    zipContent.forEach((relativePath: string, zipEntry: JSZip.JSZipObject) => {
      if (!zipEntry.dir) {
        console.log(`  üìÑ ${relativePath}`);
      } else {
        console.log(`  üìÅ ${relativePath}`);
      }
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã macOS (–∫–∞–∫ –≤ —á–∏—Ç–∞–ª–∫–µ)
      if (!zipEntry.dir && 
          (relativePath.endsWith('.fb2') || relativePath.endsWith('.txt')) &&
          !relativePath.includes('__MACOSX/') &&
          !relativePath.includes('/._')) {
        filePromises.push(
          zipEntry.async('text').then((content: string) => {
            fileContents.push({ name: relativePath, content });
          })
        );
      }
    });
    
    await Promise.all(filePromises);
    
    console.log(`\nüìä –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è —á—Ç–µ–Ω–∏—è: ${fileContents.length}`);
    
    fileContents.forEach((file, index) => {
      console.log(`\nüìÑ –§–∞–π–ª ${index + 1}:`);
      console.log(`  –ü—É—Ç—å: ${file.name}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      if (file.name.includes('/')) {
        const parts = file.name.split('/');
        console.log(`  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${parts.slice(0, -1).join('/')}`);
        console.log(`  –ò–º—è —Ñ–∞–π–ª–∞: ${parts[parts.length - 1]}`);
      } else {
        console.log(`  –ò–º—è —Ñ–∞–π–ª–∞: ${file.name}`);
      }
      
      console.log(`  –†–∞–∑–º–µ—Ä: ${file.content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    console.log('\nüñ•Ô∏è  –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ:');
    fileContents.forEach((file, index) => {
      console.log(`  –ö–Ω–æ–ø–∫–∞ ${index + 1}: "${file.name}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∏–º—è –≤ –∫–Ω–æ–ø–∫—É (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
      if (file.name.length > 50) {
        console.log(`    ‚ö†Ô∏è  –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª–∏–Ω–Ω–æ–µ (${file.name.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        const shortName = file.name.length > 60 ? file.name.substring(0, 57) + '...' : file.name;
        console.log(`    üìè –°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –∏–º—è: "${shortName}"`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

testFilePaths();