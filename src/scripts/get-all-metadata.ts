import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import dotenv from 'dotenv';

dotenv.config();

async function getAllMetadata() {
  console.log('üîç Getting all book metadata from Telegram channel...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    console.log('\nüì± Initializing Telegram client...');
    const telegramService = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì° Getting metadata channel...');
    const channel = await telegramService.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ?
        (channel.id as { toString: () => string }).toString() :
        String(channel.id);
    
    console.log(`‚úÖ Connected to channel ID: ${channelId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log('\nüì• Getting all messages from channel...');
    const allMessages = await telegramService.getAllMessages(channelId, 100);
    
    console.log(`‚úÖ Retrieved ${allMessages.length} messages`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    console.log('\nüìù Processing messages and extracting metadata...');
    const metadataList: any[] = [];
    let processedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    for (const message of allMessages) {
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        let messageText = '';
        if (message && typeof message === 'object') {
          if ('message' in message && message.message && typeof message.message === 'string') {
            messageText = message.message;
          } else if ('text' in message && message.text && typeof message.text === 'string') {
            messageText = message.text;
          }
        }
        
        // @ts-ignore
        const messageId = message.id;
        
        if (!messageText) {
          console.log(`‚ö†Ô∏è Message ${messageId} does not contain any text. Skipping.`);
          skippedCount++;
          continue;
        }
        
        // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        const metadata = MetadataParser.parseMessage(messageText);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if (!metadata.author || !metadata.title) {
          console.log(`‚ö†Ô∏è Message ${messageId} is missing author or title. Skipping.`);
          skippedCount++;
          continue;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        metadata.messageId = messageId;
        
        metadataList.push(metadata);
        processedCount++;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (processedCount % 50 === 0) {
          console.log(`üìä Progress: ${processedCount} messages processed`);
        }
        
      } catch (error) {
        // @ts-ignore
        console.error(`‚ùå Error processing message ${message.id}:`, error);
        errorCount++;
      }
    }
    
    console.log('\nüìà === PROCESSING RESULTS ===');
    console.log(`‚úÖ Successfully processed: ${processedCount} messages`);
    console.log(`‚è≠Ô∏è Skipped messages: ${skippedCount}`);
    console.log(`‚ùå Messages with errors: ${errorCount}`);
    console.log(`üìö Total books extracted: ${metadataList.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìã Sample of extracted metadata:');
    for (let i = 0; i < Math.min(5, metadataList.length); i++) {
      const metadata = metadataList[i];
      console.log(`\n--- Book ${i + 1} ---`);
      console.log(`  ID: ${metadata.messageId}`);
      console.log(`  Author: ${metadata.author}`);
      console.log(`  Title: ${metadata.title}`);
      if (metadata.series) {
        console.log(`  Series: ${metadata.series}`);
      }
      if (metadata.genres.length > 0) {
        console.log(`  Genres: ${metadata.genres.join(', ')}`);
      }
      if (metadata.tags.length > 0) {
        console.log(`  Tags: ${metadata.tags.join(', ')}`);
      }
      console.log(`  Rating: ${metadata.rating}`);
      if (metadata.description) {
        console.log(`  Description: ${metadata.description.substring(0, 100)}...`);
      }
      if (metadata.books.length > 0) {
        console.log(`  Books in series: ${metadata.books.length}`);
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    console.log('\nüíæ Saving metadata to file...');
    const fs = require('fs');
    const path = require('path');
    
    const outputPath = path.join(__dirname, '..', '..', 'output', 'all-metadata.json');
    const outputDir = path.dirname(outputPath);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é output, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    fs.writeFileSync(outputPath, JSON.stringify(metadataList, null, 2), 'utf8');
    console.log(`‚úÖ Metadata saved to: ${outputPath}`);
    
    console.log('\n‚úÖ Metadata extraction completed successfully');
    
  } catch (error) {
    console.error('‚ùå Error during metadata extraction:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    try {
      const telegramService = await TelegramService.getInstance();
      await telegramService.disconnect();
      console.log('üì± Telegram client disconnected');
    } catch (disconnectError) {
      console.error('‚ö†Ô∏è  Error disconnecting Telegram client:', disconnectError);
    }
  }
}

// Run the script
getAllMetadata().catch(console.error);