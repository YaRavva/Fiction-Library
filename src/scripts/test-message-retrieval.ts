import { config } from 'dotenv';
import { join } from 'path';
import { TelegramService } from '../lib/telegram/client';

// Load environment variables from .env file
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

async function testMessageRetrieval() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"\n');
    
    // Initialize Telegram client
    console.log('üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    const telegramClient = await TelegramService.getInstance();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // Get files channel
    console.log('üìö –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"...');
    const channel = await telegramClient.getFilesChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
        
    console.log(`üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: ${(channel as any).title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // Test getting a specific message by ID
    const testMessageId = 4379; // –ü—Ä–∏–º–µ—Ä ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–≥–æ–≤
    console.log(`\nüì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${testMessageId}...`);
    
    // @ts-ignore
    const messages: any[] = await telegramClient.client.getMessages(channel, { ids: [testMessageId] });
    
    if (!messages || messages.length === 0) {
      console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${testMessageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    } else {
      const message = messages[0];
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:`);
      console.log(`   ID: ${message.id}`);
      console.log(`   –î–∞—Ç–∞: ${message.date}`);
      
      if (message.media) {
        console.log(`   –ú–µ–¥–∏–∞: –î–∞`);
        console.log(`   –¢–∏–ø –º–µ–¥–∏–∞: ${(message.media as any).className || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      } else {
        console.log(`   –ú–µ–¥–∏–∞: –ù–µ—Ç`);
      }
      
      if (message.document) {
        console.log(`   –î–æ–∫—É–º–µ–Ω—Ç: –î–∞`);
        if (message.document.attributes) {
          const filenameAttr = (message.document.attributes as any[]).find(
            (attr: any) => attr.className === 'DocumentAttributeFilename'
          );
          if (filenameAttr && filenameAttr.fileName) {
            console.log(`   –ò–º—è —Ñ–∞–π–ª–∞: ${filenameAttr.fileName}`);
          }
        }
      }
    }
    
    // Test getting multiple messages
    console.log('\nüì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π...');
    const recentMessages = await telegramClient.getMessages(channelId, 5) as any[];
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${recentMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π:`);
    recentMessages.forEach((msg, index) => {
      console.log(`   ${index + 1}. ID: ${msg.id}, –î–∞—Ç–∞: ${msg.date}`);
      if (msg.document) {
        if (msg.document.attributes) {
          const filenameAttr = (msg.document.attributes as any[]).find(
            (attr: any) => attr.className === 'DocumentAttributeFilename'
          );
          if (filenameAttr && filenameAttr.fileName) {
            console.log(`      –§–∞–π–ª: ${filenameAttr.fileName}`);
          }
        }
      }
    });
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    process.exit(1);
  }
}

testMessageRetrieval();