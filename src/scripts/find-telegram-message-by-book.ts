import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function findTelegramMessageByBook(author: string, title: string) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –¥–ª—è –∫–Ω–∏–≥–∏: "${title}" –∞–≤—Ç–æ—Ä–∞ ${author}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üì° –ö–∞–Ω–∞–ª ID: ${channelId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (–ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π)
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞...');
    const messages = await telegramClient.getMessages(channelId, 200) as any;
    
    if (!messages || messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    let foundMessage = null;
    let foundMessageId = null;
    
    for (const message of messages) {
      if (message.text) {
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const metadata = MetadataParser.parseMessage(message.text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if (metadata.author && metadata.title) {
          const authorMatch = metadata.author.toLowerCase().includes(author.toLowerCase()) || 
                             author.toLowerCase().includes(metadata.author.toLowerCase());
          const titleMatch = metadata.title.toLowerCase().includes(title.toLowerCase()) || 
                            title.toLowerCase().includes(metadata.title.toLowerCase());
          
          if (authorMatch && titleMatch) {
            foundMessage = message;
            foundMessageId = message.id;
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏:`);
            console.log(`  ID: ${message.id}`);
            console.log(`  –ê–≤—Ç–æ—Ä: ${metadata.author}`);
            console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.title}`);
            break;
          }
        }
      }
    }
    
    if (!foundMessage) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (foundMessage.text) {
      console.log('\nüìñ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:');
      const metadata = MetadataParser.parseMessage(foundMessage.text);
      console.log(`  –ê–≤—Ç–æ—Ä: ${metadata.author}`);
      console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.title}`);
      console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${metadata.description ? metadata.description.substring(0, 200) + '...' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      const descriptionMatch = foundMessage.text.match(/–†–µ–π—Ç–∏–Ω–≥:[\s\S]*?\n([\s\S]*?)(?:\n\s*\n|–°–æ—Å—Ç–∞–≤:|$)/i);
      if (descriptionMatch) {
        const description = descriptionMatch[1].trim();
        console.log(`\nüìù –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:`);
        console.log(description);
        return description;
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const telegramClient = await TelegramService.getInstance();
    if (telegramClient) {
      await telegramClient.disconnect();
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const author = process.argv[2];
const title = process.argv[3];

if (!author || !title) {
  console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx src/scripts/find-telegram-message-by-book.ts "<author>" "<title>"');
  process.exit(1);
}

findTelegramMessageByBook(author, title);