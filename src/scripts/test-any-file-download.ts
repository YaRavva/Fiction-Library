import { TelegramService } from '../lib/telegram/client';
import { serverSupabase } from '../lib/serverSupabase';
import { putObject } from '../lib/s3-service';
import dotenv from 'dotenv';
import { createHash } from 'crypto';

dotenv.config();

interface Book {
  id: string;
  title: string;
  author: string;
  score?: number;
}

interface TelegramMessage {
  id: number;
  media?: any;
  file?: {
    name?: string;
  };
}

interface ExistingBook {
  file_url: string;
  file_size: number;
  storage_path: string;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∑–∞–º–µ–Ω—è–µ—Ç —ë –Ω–∞ –µ, –π –Ω–∞ –∏)
 */
function normalizeText(text: string): string {
  return text
    .normalize('NFD')
    .replace(/—ë/g, '–µ')
    .replace(/–Å/g, '–ï')
    .replace(/–π/g, '–∏')
    .replace(/–ô/g, '–ò')
    .toLowerCase();
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö—ç—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
 */
async function calculateFileHash(buffer: Buffer): Promise<string> {
  return createHash('md5').update(buffer).digest('hex');
}

/**
 * –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
 */
async function findRelevantBook(title: string, author: string) {
  console.log(`üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏: "${title}" –∞–≤—Ç–æ—Ä–∞ ${author}`);
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const normalizedTitle = normalizeText(title);
  const normalizedAuthor = normalizeText(author);
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const titleWords = normalizedTitle.split(/\s+/).filter(word => word.length > 2);
  const authorWords = normalizedAuthor.split(/\s+/).filter(word => word.length > 2);
  const allSearchWords = [...titleWords, ...authorWords].filter(word => word.length > 0);
  
  console.log(`  –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: [${allSearchWords.join(', ')}]`);
  
  if (allSearchWords.length === 0) {
    console.log(`‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞`);
    return null;
  }
  
  // –ò—â–µ–º –∫–Ω–∏–≥–∏, –≥–¥–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const searchPromises = allSearchWords.map(async (word) => {
    const { data: titleMatches } = await serverSupabase
      .from('books')
      .select('id, title, author')
      .ilike('title', `%${word}%`)
      .limit(5);
    
    const { data: authorMatches } = await serverSupabase
      .from('books')
      .select('id, title, author')
      .ilike('author', `%${word}%`)
      .limit(5);
    
    const allMatches: Book[] = [...(titleMatches || []), ...(authorMatches || [])];
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
    const uniqueMatches = allMatches.filter((bookItem, index, self) => 
      index === self.findIndex(b => b.id === bookItem.id)
    );
    
    return uniqueMatches;
  });
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const results = await Promise.all(searchPromises);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const allMatches: Book[] = results.flat();
  
  // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
  const uniqueMatches = allMatches.filter((bookItem, index, self) => 
    index === self.findIndex(b => b.id === bookItem.id)
  );
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
  const matchesWithScores = uniqueMatches.map(bookItem => {
    const bookTitleWords = normalizeText(bookItem.title).split(/\s+/);
    const bookAuthorWords = normalizeText(bookItem.author).split(/\s+/);
    const allBookWords = [...bookTitleWords, ...bookAuthorWords];
    
    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–ª–æ–≤ —Å —Å–ª–æ–≤–∞–º–∏ –≤ –∫–Ω–∏–≥–µ
    let score = 0;
    for (const searchWord of allSearchWords) {
      let found = false;
      for (const bookWord of allBookWords) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
        if (bookWord.includes(searchWord) || searchWord.includes(bookWord)) {
          score++;
          found = true;
          break; // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        }
      }
    }
    
    return { ...bookItem, score };
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
  matchesWithScores.sort((a, b) => (b.score || 0) - (a.score || 0));
  
  // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  const topMatches = matchesWithScores.slice(0, 5);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é >= 2
  const relevantMatches = topMatches.filter(match => (match.score || 0) >= 2);
  
  if (relevantMatches.length > 0) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${relevantMatches.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:`);
    relevantMatches.forEach((match, index) => {
      console.log(`  ${index + 1}. "${match.title}" –∞–≤—Ç–æ—Ä–∞ ${match.author} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${match.score})`);
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    return relevantMatches[0];
  } else {
    console.log(`‚ö†Ô∏è  –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    return null;
  }
}

async function testAnyFileDownload() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram...');
    
    const telegramService = await TelegramService.getInstance();
    const filesChannel = await telegramService.getFilesChannel();
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
    // @ts-ignore
    const messages: TelegramMessage[] = await telegramService.getMessages(filesChannel.id, 3);
    
    if (!messages || messages.length === 0) {
      console.log('‚ö†Ô∏è  –í –∫–∞–Ω–∞–ª–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ —Ñ–∞–π–ª–æ–≤`);
    
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
    let fileMessage: TelegramMessage | null = null;
    let fileBuffer: Buffer | null = null;
    
    for (const message of messages) {
      // @ts-ignore
      if (message.media) {
        console.log(`üì• –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞: ${message.id}`);
        try {
          // @ts-ignore
          fileBuffer = await telegramService.downloadMedia(message);
          if (fileBuffer) {
            fileMessage = message;
            break;
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id}:`, error);
        }
      }
    }
    
    if (!fileMessage || !fileBuffer) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º');
      return;
    }
    
    // @ts-ignore
    const originalFileName = fileMessage.file?.name || `file_${fileMessage.id}`;
    // @ts-ignore
    const fileSize = fileBuffer.length;
    const fileHash = await calculateFileHash(fileBuffer);
    
    console.log(`‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: ${originalFileName} (${fileSize} –±–∞–π—Ç), —Ö—ç—à: ${fileHash}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    let fileExtension = 'zip'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (originalFileName.includes('.')) {
      fileExtension = originalFileName.split('.').pop() || 'zip';
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <telegram_file_id>.<extension>
    // @ts-ignore
    const newFileName = `${fileMessage.id}.${fileExtension}`;
    
    console.log(`üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤: ${newFileName}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ")
    let author = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä';
    let title = originalFileName;
    
    if (originalFileName.includes(' - ')) {
      const parts = originalFileName.split(' - ');
      author = parts[0];
      title = parts.slice(1).join(' - ').replace(/\.[^/.]+$/, ''); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    }
    
    console.log(`üìö –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞: –ê–≤—Ç–æ—Ä="${author}", –ù–∞–∑–≤–∞–Ω–∏–µ="${title}"`);
    
    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É –≤ –ë–î
    const book = await findRelevantBook(title, author);
    
    if (!book) {
      console.log('‚ö†Ô∏è  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–∏–≥–∞ –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–∏–≥–∞: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (ID: ${book.id})`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏
    const { data: existingBookData, error: fetchError }: any = await serverSupabase
      .from('books')
      .select('file_url, file_size')
      .eq('id', book.id)
      .single();
    
    const existingBook: ExistingBook | null = existingBookData;
    
    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞:', fetchError);
      return;
    }
    
    if (existingBook && existingBook.file_url) {
      console.log(`‚ö†Ô∏è  –î–ª—è –∫–Ω–∏–≥–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª:`);
      console.log(`   URL: ${existingBook.file_url}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${existingBook.file_size || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
      if (existingBook.file_size && existingBook.file_size === fileSize) {
        console.log(`‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.`);
        return;
      } else {
        console.log(`‚ö†Ô∏è  –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.`);
      }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3 –±–∞–∫–µ—Ç —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
    console.log('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3 –±–∞–∫–µ—Ç...');
    
    const bucketName = process.env.S3_BUCKET_NAME;
    if (!bucketName) {
      throw new Error('S3_BUCKET_NAME environment variable is not set.');
    }
    
    const storagePath = `${newFileName}`;
    
    try {
      await putObject(storagePath, fileBuffer, bucketName);
      console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: ${storagePath}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL —Ñ–∞–π–ª–∞
      const fileUrl = `https://${bucketName}.s3.cloud.ru/${storagePath}`;
      
      console.log(`üì§ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–Ω–∏–≥–µ –≤ –ë–î...`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–Ω–∏–≥–µ –≤ –ë–î
      const booksTable: any = serverSupabase.from('books');
      const { error: updateError }: any = await booksTable
        .update({
          file_url: fileUrl,
          file_size: fileSize,
          file_format: fileExtension,
          // @ts-ignore
          telegram_file_id: fileMessage.id.toString(),
          updated_at: new Date().toISOString()
        })
        .eq('id', book.id);
      
      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –∫–Ω–∏–≥–µ:', updateError);
        return;
      }
      
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –æ –∫–Ω–∏–≥–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–î`);
      console.log(`   URL —Ñ–∞–π–ª–∞: ${fileUrl}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${fileSize} –±–∞–π—Ç`);
      // @ts-ignore
      console.log(`   Telegram ID —Ñ–∞–π–ª–∞: ${fileMessage.id}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ S3:', error);
      return;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Å–∫—Ä–∏–ø—Ç–µ:', error);
  } finally {
    const telegramService = await TelegramService.getInstance();
    await telegramService.disconnect();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

testAnyFileDownload();