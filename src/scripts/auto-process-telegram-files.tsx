// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import dotenv from 'dotenv';
dotenv.config();

import { TelegramService } from '../lib/telegram/client';
import { TelegramSyncService } from '../lib/telegram/sync';
import { getSupabaseAdmin } from '../lib/supabase';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞
function extractWordsFromFilename(filename: string): string[] {
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    const words = nameWithoutExt
        .split(/[_\-\s]+/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º –∏ –¥–µ—Ñ–∏—Å–∞–º
        .filter(word => word.length > 1) // –£–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
        .map(word => word.trim().toLowerCase()) // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        .filter(word => word.length > 0); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞

    return words;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ —Å–ª–æ–≤–∞–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
async function searchBooksByWords(admin: any, words: string[]) {
    // –ò—â–µ–º –∫–Ω–∏–≥–∏, –≥–¥–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const searchPromises = words.map(async (word) => {
        const { data: titleMatches, error: titleError } = await (admin as any)
            .from('books')
            .select('id, title, author')
            .ilike('title', `%${word}%`)
            .limit(3);

        const { data: authorMatches, error: authorError } = await (admin as any)
            .from('books')
            .select('id, title, author')
            .ilike('author', `%${word}%`)
            .limit(3);

        const allMatches = [...(titleMatches || []), ...(authorMatches || [])];

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        const uniqueMatches = allMatches.filter((book, index, self) =>
            index === self.findIndex(b => b.id === book.id)
        );

        return uniqueMatches;
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.all(searchPromises);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allMatches = results.flat();

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
    const uniqueMatches = allMatches.filter((book, index, self) =>
        index === self.findIndex(b => b.id === book.id)
    );

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
    const matchesWithScores = uniqueMatches.map(book => {
        const titleWords = book.title.toLowerCase().split(/\s+/);
        const authorWords = book.author.toLowerCase().split(/\s+/);
        const allBookWords = [...titleWords, ...authorWords];

        const score = words.filter(word =>
            allBookWords.some(bookWord => bookWord.includes(word))
        ).length;

        return { ...book, score };
    });

    matchesWithScores.sort((a, b) => b.score - a.score);

    return matchesWithScores.slice(0, 3); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
}

async function autoProcessTelegramFiles() {
    console.log('=== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í –ò–ó TELEGRAM ===\n');

    let client: TelegramService | null = null;
    let syncService: TelegramSyncService | null = null;

    try {
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
        console.log('1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
        client = await TelegramService.getInstance();
        console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
        console.log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É —Å —Ñ–∞–π–ª–∞–º–∏...');
        const filesChannel = await client.getFilesChannel();
        console.log('   ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—É—á–µ–Ω');

        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
        console.log('3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏...');
        const messages = await client.getMessages(filesChannel, 5);

        if (messages.length === 0) {
            console.log('   ‚ö†Ô∏è  –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ');
            return;
        }

        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏\n`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ Supabase
        const admin = getSupabaseAdmin();
        if (!admin) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Supabase Admin');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        syncService = await TelegramSyncService.getInstance();

        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        let processedCount = 0;
        let skippedCount = 0;
        let errorCount = 0;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:');
        for (let i = 0; i < messages.length; i++) {
            const msg: any = messages[i];

            if (!msg.document) {
                continue;
            }

            // –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            let filename = 'unknown.fb2';
            if (msg.document.attributes) {
                const fileNameAttr = msg.document.attributes.find((attr: any) =>
                    attr.className === 'DocumentAttributeFilename'
                );
                if (fileNameAttr && fileNameAttr.fileName) {
                    filename = fileNameAttr.fileName;
                }
            }

            console.log(`\n   üìÑ –§–∞–π–ª ${i + 1}: ${filename}`);

            // –ò—â–µ–º –ø–æ —Å–ª–æ–≤–∞–º
            const words = extractWordsFromFilename(filename);
            console.log(`     üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º: ${words.join(', ')}`);

            const potentialMatches = await searchBooksByWords(admin, words);

            if (potentialMatches.length > 0) {
                // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
                const bestMatch = potentialMatches[0];
                console.log(`     üéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:`);
                console.log(`        "${bestMatch.title}" –∞–≤—Ç–æ—Ä–∞ ${bestMatch.author}`);
                console.log(`        ID: ${bestMatch.id} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${bestMatch.score})`);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª
                console.log(`     üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ —Ñ–∞–π–ª–∞...`);
                try {
                    await syncService.processFile(msg, bestMatch.id);
                    console.log(`     ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ`);
                    processedCount++;
                } catch (processError) {
                    console.log(`     ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–ø—Ä–∏–≤—è–∑–∫–µ —Ñ–∞–π–ª–∞: ${processError}`);
                    errorCount++;
                }
            } else {
                console.log(`     ‚ö†Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Ñ–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω`);
                skippedCount++;
            }

            if (i < messages.length - 1) {
                console.log('     ' + '‚îÄ'.repeat(50));
            }
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        await syncService.shutdown();
        if (client && typeof (client as any).disconnect === 'function') {
            await (client as any).disconnect();
            console.log('\n5. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...');
            console.log('   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        }

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò ===');
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} —Ñ–∞–π–ª–æ–≤`);
        console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ñ–∞–π–ª–æ–≤`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤`);
        console.log(`   üìä –í—Å–µ–≥–æ: ${messages.length} —Ñ–∞–π–ª–æ–≤`);

        console.log('\n=== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);

        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (syncService) {
            try {
                await syncService.shutdown();
            } catch (shutdownError) {
                console.log('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', shutdownError);
            }
        }

        if (client && typeof (client as any).disconnect === 'function') {
            try {
                await (client as any).disconnect();
                console.log('   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            } catch (disconnectError) {
                console.log('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', disconnectError);
            }
        }
    }
}

autoProcessTelegramFiles().catch(console.error);