import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import { TelegramSyncService } from '../lib/telegram/sync';
import { MetadataParser } from '../lib/telegram/parser';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config();

async function fixDuplicates() {
  try {
    console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º telegram_post_id...\n');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    if (!syncService['telegramClient']) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Telegram –∫–ª–∏–µ–Ω—Ç—É');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await syncService['telegramClient'].getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º telegram_post_id
    console.log('\nüîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º telegram_post_id...');
    const { data: allBooks, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, telegram_post_id, description, genres, tags, cover_url, created_at, updated_at');
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', booksError);
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ telegram_post_id
    const booksByTelegramId = new Map<string, any[]>();
    for (const book of allBooks) {
      if (book.telegram_post_id) {
        if (!booksByTelegramId.has(book.telegram_post_id)) {
          booksByTelegramId.set(book.telegram_post_id, []);
        }
        booksByTelegramId.get(book.telegram_post_id)!.push(book);
      }
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–≥—Ä—É–ø–ø—ã —Å –±–æ–ª–µ–µ —á–µ–º –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π)
    const duplicates = Array.from(booksByTelegramId.entries()).filter(([_, books]) => books.length > 1);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    for (const [telegramId, books] of duplicates) {
      console.log(`\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è telegram_post_id: ${telegramId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –ø–æ ID
      console.log(`  üì° –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${telegramId} –∏–∑ Telegram...`);
      const messages = await syncService['telegramClient'].getMessages(channelId, 1, parseInt(telegramId)) as unknown[];
      
      if (messages.length > 0) {
        const msg = messages[0] as { id?: number; text?: string };
        if (msg.id === parseInt(telegramId) && msg.text) {
          // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
          const metadata = MetadataParser.parseMessage(msg.text);
          console.log(`  üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram: ${metadata.author} - ${metadata.title}`);
          
          // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥—É —Å –ª—É—á—à–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π)
          let bestBook = books[0];
          let maxFields = 0;
          
          for (const book of books) {
            const fieldCount = [
              book.description,
              book.genres && book.genres.length > 0 ? 1 : 0,
              book.tags && book.tags.length > 0 ? 1 : 0,
              book.cover_url
            ].filter(Boolean).length;
            
            if (fieldCount > maxFields) {
              maxFields = fieldCount;
              bestBook = book;
            }
          }
          
          console.log(`  üéØ –õ—É—á—à–∞—è –∫–Ω–∏–≥–∞: ${bestBook.author} - ${bestBook.title} (ID: ${bestBook.id})`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à—É—é –∫–Ω–∏–≥—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
          console.log(`  üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram...`);
          const { error: updateError } = await supabase
            .from('books')
            .update({
              title: metadata.title,
              author: metadata.author,
              description: metadata.description || bestBook.description,
              genres: metadata.genres.length > 0 ? metadata.genres : bestBook.genres,
              tags: metadata.tags.length > 0 ? metadata.tags : bestBook.tags,
              updated_at: new Date().toISOString()
            })
            .eq('id', bestBook.id);
          
          if (updateError) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:`, updateError);
            continue;
          }
          
          console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
          
          // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
          const booksToDelete = books.filter(book => book.id !== bestBook.id);
          console.log(`  üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${booksToDelete.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...`);
          
          for (const book of booksToDelete) {
            console.log(`    –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏: ${book.author} - ${book.title} (ID: ${book.id})`);
            
            // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const { error: deleteError } = await supabase
              .from('books')
              .delete()
              .eq('id', book.id);
            
            if (deleteError) {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:`, deleteError);
            } else {
              console.log(`    ‚úÖ –ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞`);
            }
          }
        } else {
          console.log(`  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞`);
        }
      } else {
        console.log(`  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
      }
    }
    
    console.log('\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const syncService = await TelegramSyncService.getInstance();
    await syncService.shutdown();
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
  fixDuplicates();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
export { fixDuplicates };
