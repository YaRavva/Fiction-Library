import dotenv from 'dotenv';
dotenv.config();

import { TelegramFileService } from '../lib/telegram/file-service';

// –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function extractSearchTerms(filename: string): string[] {
  // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ NFC —Ñ–æ—Ä–º—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
  const normalized = nameWithoutExt.normalize('NFC');
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞
  const words = normalized
      .split(/[_\-\s]+/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º –∏ –¥–µ—Ñ–∏—Å–∞–º
      .filter(word => word.length > 0) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞
      .map(word => word.trim()) // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
      .filter(word => word.length > 1); // –£–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π 1 —Å–∏–º–≤–æ–ª
  
  return words;
}

async function testEncodingIssues() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π...\n');
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
  const testCases = [
    '–ê—Ä–≤–µ–Ω–¥–µ–π–ª.zip',
    '–ê—Ä–≤–µ–Ω–¥–µ–π–ª_–¢–µ—Å—Ç.zip',
    '–¢–µ—Å—Ç_–ê—Ä–≤–µ–Ω–¥–µ–π–ª.zip',
    '–ê—Ä–≤–µ–Ω–¥–µ–π–ª - –ù–∞–∑–≤–∞–Ω–∏–µ.zip',
    '–ê–≤—Ç–æ—Ä_–ê—Ä–≤–µ–Ω–¥–µ–π–ª.zip'
  ];
  
  for (const filename of testCases) {
    console.log(`\nüìÅ –§–∞–π–ª: ${filename}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Å—Ç—Ä–æ–∫–∏
    console.log(`  üî§ –î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏: ${filename.length}`);
    console.log(`  üî¢ –ö–æ–¥—ã —Å–∏–º–≤–æ–ª–æ–≤: ${Array.from(filename).map(char => char.charCodeAt(0)).join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const hasCyrillic = /[–∞-—è–ê-–Ø]/.test(filename);
    const hasIChar = filename.includes('–π');
    console.log(`  üá∑üá∫ –°–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É: ${hasCyrillic}`);
    console.log(`  üÖ∏ –°–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É "–π": ${hasIChar}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = TelegramFileService.extractMetadataFromFilename(filename);
    console.log(`  üìä –ò–∑–≤–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: author="${metadata.author}", title="${metadata.title}"`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    const searchTerms = extractSearchTerms(filename);
    console.log(`  üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: [${searchTerms.map((term: string) => `"${term}"`).join(', ')}]`);
  }
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Unicode
  console.log('\nüîç –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Unicode:');
  const testString = '–ê—Ä–≤–µ–Ω–¥–µ–π–ª';
  console.log(`  –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: "${testString}"`);
  console.log(`  –î–ª–∏–Ω–∞: ${testString.length}`);
  console.log(`  –ö–æ–¥—ã —Å–∏–º–≤–æ–ª–æ–≤: ${Array.from(testString).map(char => {
    const code = char.charCodeAt(0);
    return `${char}(${code})`;
  }).join(', ')}`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  const nfc = testString.normalize('NFC');
  const nfd = testString.normalize('NFD');
  const nfkc = testString.normalize('NFKC');
  const nfkd = testString.normalize('NFKD');
  
  console.log(`  NFC: "${nfc}" (–¥–ª–∏–Ω–∞: ${nfc.length})`);
  console.log(`  NFD: "${nfd}" (–¥–ª–∏–Ω–∞: ${nfd.length})`);
  console.log(`  NFKC: "${nfkc}" (–¥–ª–∏–Ω–∞: ${nfkc.length})`);
  console.log(`  NFKD: "${nfkd}" (–¥–ª–∏–Ω–∞: ${nfkd.length})`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
  console.log(`  NFC === –∏—Å—Ö–æ–¥–Ω–∞—è: ${nfc === testString}`);
  console.log(`  NFD === –∏—Å—Ö–æ–¥–Ω–∞—è: ${nfd === testString}`);
  console.log(`  NFKC === –∏—Å—Ö–æ–¥–Ω–∞—è: ${nfkc === testString}`);
  console.log(`  NFKD === –∏—Å—Ö–æ–¥–Ω–∞—è: ${nfkd === testString}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testEncodingIssues().catch(console.error);