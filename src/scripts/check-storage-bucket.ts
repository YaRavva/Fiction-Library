/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∫–µ—Ç–∞ books –≤ Supabase Storage
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö –ø—É—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx src/scripts/check-storage-bucket.ts
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞');
  console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

import { createClient } from '@supabase/supabase-js';

async function checkStorageBucket() {
  console.log('üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∫–µ—Ç–∞ books...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role key –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Storage
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ books
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ books...');
    
    const { data, error } = await supabase
      .storage
      .from('books')
      .list('', {
        limit: 100,
        offset: 0,
        sortBy: { column: 'name', order: 'asc' }
      });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
      process.exit(1);
    }
    
    if (!data || data.length === 0) {
      console.log('‚ÑπÔ∏è  –ë–∞–∫–µ—Ç books –ø—É—Å—Ç');
      return;
    }
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${data.length}`);
    console.log('\nüìÑ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:');
    console.log('----------------------------------------');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    data.sort((a, b) => a.name.localeCompare(b.name));
    
    for (const file of data) {
      console.log(`üìÑ ${file.name}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${file.metadata?.size || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –±–∞–π—Ç`);
      console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${file.created_at || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      console.log(`   –ü—É—Ç—å: ${file.id}`);
      console.log('----------------------------------------');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
      if (file.name.includes('/')) {
        console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ: ${file.name}`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
    const filesWithFolders = data.filter(file => file.name.includes('/'));
    if (filesWithFolders.length > 0) {
      console.log(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö: ${filesWithFolders.length}`);
      for (const file of filesWithFolders) {
        console.log(`  - ${file.name}`);
      }
    } else {
      console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –±–∞–∫–µ—Ç–∞');
    }
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∫–µ—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkStorageBucket();