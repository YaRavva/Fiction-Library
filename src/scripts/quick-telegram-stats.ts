/**
 * Quick script to get Telegram stats without loading all messages
 */

import { config } from 'dotenv';
import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import { TelegramService } from '../lib/telegram/client';
import { Api } from 'telegram';

// Load environment variables FIRST
config({ path: '.env.local' });
config({ path: '.env' });

async function quickTelegramStats() {
  try {
    console.log('üîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram\n');
    
    // Initialize Supabase client
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceRoleKey) {
      throw new Error('Missing Supabase environment variables');
    }
    
    const supabase = createSupabaseClient(supabaseUrl, supabaseServiceRoleKey);
    
    // Initialize Telegram client
    console.log('üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    const telegramClient = await TelegramService.getInstance();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // Get metadata channel
    console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
        
    console.log(`üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: ${(channel as any).title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // Try to get dialog info for quick message count
    console.log('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–ª–æ–≥–µ...');
    try {
      // @ts-ignore
      const dialogs = await telegramClient.client.getDialogs();
      const targetDialog = dialogs.find((dialog: any) => {
        // @ts-ignore
        return dialog.entity && dialog.entity.id && dialog.entity.id.toString() === channelId;
      });
      
      if (targetDialog) {
        // @ts-ignore
        console.log(`   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ (–∏–∑ –¥–∏–∞–ª–æ–≥–∞): ${targetDialog.unreadCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      } else {
        console.log('   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–ª–æ–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (dialogError) {
      console.log('   –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ:', (dialogError as Error).message);
    }
    
    // Get a few messages to estimate density
    console.log('\nüîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏...');
    const sampleMessages = await telegramClient.getMessages(channelId, 50) as any[];
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ ${sampleMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    
    // Analyze message IDs to understand the range
    if (sampleMessages.length > 0) {
      const messageIds = sampleMessages
        .filter(msg => msg.id)
        .map(msg => msg.id)
        .sort((a, b) => a - b);
      
      if (messageIds.length > 0) {
        const minId = messageIds[0];
        const maxId = messageIds[messageIds.length - 1];
        console.log(`   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤—ã–±–æ—Ä–∫–µ: ${minId}`);
        console.log(`   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤—ã–±–æ—Ä–∫–µ: ${maxId}`);
        console.log(`   –†–∞–∑–Ω–∏—Ü–∞ –≤ ID: ${maxId - minId}`);
      }
    }
    
    // Get processed messages from database
    console.log('\nüìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { count: processedMessages, error: processedError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true });
    
    if (processedError) {
      throw new Error(`Error counting processed messages: ${processedError.message}`);
    }
    
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${processedMessages}`);
    
    // Get current database stats
    console.log('\nüìö –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    const { count: totalBooks, error: totalBooksError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true });
    
    if (totalBooksError) {
      throw new Error(`Error counting total books: ${totalBooksError.message}`);
    }
    
    console.log(`   –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${totalBooks}`);
    
    const { count: booksWithFiles, error: filesError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true })
      .not('file_url', 'is', null);
    
    if (filesError) {
      throw new Error(`Error counting books with files: ${filesError.message}`);
    }
    
    console.log(`   –ö–Ω–∏–≥ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏: ${booksWithFiles}`);
    
    // Summary
    console.log('\nüìã –°–í–û–î–ö–ê:');
    console.log(`   ========================================`);
    console.log(`   –ö–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${totalBooks}`);
    console.log(`   –ö–Ω–∏–≥ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏: ${booksWithFiles}`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram: ${processedMessages}`);
    
    // Close Telegram client
    await telegramClient.disconnect();
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –∞–Ω–∞–ª–∏–∑–µ Telegram:', error);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  quickTelegramStats();
}