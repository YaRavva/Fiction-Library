import { taskManager } from '../lib/task-manager';
import { BackgroundDownloadHandler } from '../lib/background-download';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∫–∞–∫ –≤ –∞–¥–º–∏–Ω–∫–µ
 */
async function testAdminDownloadFlow() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
  const operationId = `download-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID: ${operationId}`);
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ taskManager (–∫–∞–∫ –≤ API endpoint'–µ)
  taskManager.createTask(operationId);
  console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–∞–∫ –≤ –∞–¥–º–∏–Ω–∫–µ –ø—Ä–∏ polling'–µ)
  const taskStatus = taskManager.getTaskStatus(operationId);
  if (!taskStatus) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (Operation not found)`);
    return;
  }
  console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞:`, taskStatus);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "running"
  taskManager.updateTaskStatus(operationId, 'running', 'üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...');
  console.log(`üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "running"`);
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É (–∫–∞–∫ –≤ BackgroundDownloadHandler)
  console.log(`üì• –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
  taskManager.updateTaskProgress(operationId, 0, 'üì• –ù–∞–π–¥–µ–Ω–æ 3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...');
  console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 0%`);
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
  for (let i = 1; i <= 3; i++) {
    const progress = Math.round((i / 3) * 100);
    const message = `üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${i}/3: test-file-${i}.fb2 (ID: ${1000 + i})`;
    taskManager.updateTaskProgress(operationId, progress, message);
    console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ ${progress}%: ${message}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
  const finalMessage = `üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –£—Å–ø–µ—à–Ω–æ: 3 | –û—à–∏–±–∫–∏: 0 | –ü—Ä–æ–ø—É—â–µ–Ω–æ: 0 | –í—Å–µ–≥–æ: 3`;
  taskManager.updateTaskStatus(operationId, 'completed', finalMessage);
  taskManager.updateTaskProgress(operationId, 100, finalMessage, {
    successCount: 3,
    failedCount: 0,
    skippedCount: 0,
    totalFiles: 3,
    results: [
      { filename: 'test-file-1.fb2', success: true },
      { filename: 'test-file-2.fb2', success: true },
      { filename: 'test-file-3.fb2', success: true }
    ]
  });
  console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å (–∫–∞–∫ –≤ –∞–¥–º–∏–Ω–∫–µ –ø—Ä–∏ polling'–µ)
  const finalTaskStatus = taskManager.getTaskStatus(operationId);
  if (!finalTaskStatus) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Operation not found)`);
    return;
  }
  console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:`, finalTaskStatus);
  
  console.log('\nüèÅ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testAdminDownloadFlow().catch(console.error);
}