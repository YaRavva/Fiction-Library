import { serverSupabase } from '../lib/serverSupabase';
import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function syncMissingDescriptions() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π
    const { data: books, error } = await (serverSupabase as any)
      .from('books')
      .select('*')
      .or('description.is.null,description.eq.')
      .limit(50);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error);
      return;
    }
    
    if (!books || books.length === 0) {
      console.log('‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ –∏–º–µ—é—Ç –æ–ø–∏—Å–∞–Ω–∏—è');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üì° –ö–∞–Ω–∞–ª ID: ${channelId}`);
    
    // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ Telegram
    for (const book of books) {
      console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: ${book.title} (${book.author}) ---`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ Telegram post ID
      if (!book.telegram_post_id) {
        console.log('  ‚ÑπÔ∏è  –£ –∫–Ω–∏–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Telegram post ID, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        continue;
      }
      
      const messageId = parseInt(book.telegram_post_id, 10);
      if (isNaN(messageId)) {
        console.log(`  ‚ÑπÔ∏è  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram post ID: ${book.telegram_post_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      console.log(`  üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${messageId}...`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram
        const messages = await telegramClient.getMessages(channelId, 1, messageId) as any;
        
        if (!messages || messages.length === 0) {
          console.log(`  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
          continue;
        }
        
        const message = messages[0];
        console.log(`  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ (ID: ${message.id})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (!message.text) {
          console.log(`  ‚ÑπÔ∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞`);
          continue;
        }
        
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const metadata = MetadataParser.parseMessage(message.text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        const authorMatch = metadata.author && 
          (metadata.author.toLowerCase().includes(book.author.toLowerCase()) || 
           book.author.toLowerCase().includes(metadata.author.toLowerCase()));
        const titleMatch = metadata.title && 
          (metadata.title.toLowerCase().includes(book.title.toLowerCase()) || 
           book.title.toLowerCase().includes(metadata.title.toLowerCase()));
        
        if (!authorMatch || !titleMatch) {
          console.log(`  ‚ö†Ô∏è  –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:`);
          console.log(`    –ö–Ω–∏–≥–∞: ${book.author} - ${book.title}`);
          console.log(`    –°–æ–æ–±—â–µ–Ω–∏–µ: ${metadata.author} - ${metadata.title}`);
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        if (!metadata.description) {
          console.log(`  ‚ÑπÔ∏è  –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ`);
          continue;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log(`  üìù –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏...`);
        const updateData: any = { description: metadata.description };
        const { data: updatedBook, error: updateError } = await (serverSupabase as any)
          .from('books')
          .update(updateData)
          .eq('id', book.id)
          .select()
          .single();
        
        if (updateError) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è:`, updateError);
          continue;
        }
        
        console.log(`  ‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const telegramClient = await TelegramService.getInstance();
    if (telegramClient) {
      await telegramClient.disconnect();
    }
  }
}

syncMissingDescriptions();