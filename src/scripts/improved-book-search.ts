import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config();

interface BookSearchResult {
  id: string;
  title: string;
  author: string;
  score: number;
  matchType: 'exact' | 'relevant' | 'fuzzy';
}

async function searchBooksByRelevance(title: string, author: string): Promise<BookSearchResult[]> {
  console.log(`üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: "${title}" –∞–≤—Ç–æ—Ä–∞ ${author}`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return [];
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(supabaseUrl, supabaseKey);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const normalizedTitle = title.toLowerCase().trim();
    const normalizedAuthor = author.toLowerCase().trim();
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const titleWords = normalizedTitle.split(/\s+/).filter(word => word.length > 1);
    const authorWords = normalizedAuthor.split(/\s+/).filter(word => word.length > 1);
    
    console.log(`  –°–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: [${titleWords.join(', ')}]`);
    console.log(`  –°–ª–æ–≤–∞ –≤ –∞–≤—Ç–æ—Ä–µ: [${authorWords.join(', ')}]`);
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    console.log('  üîé –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é...');
    const { data: exactMatches, error: exactError } = await supabase
      .from('books')
      .select('id, title, author')
      .ilike('title', `%${title}%`)
      .ilike('author', `%${author}%`);
    
    if (exactError) {
      console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é:', exactError);
    } else if (exactMatches && exactMatches.length > 0) {
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${exactMatches.length} —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
      return exactMatches.map(book => ({
        id: book.id,
        title: book.title,
        author: book.author,
        score: 100,
        matchType: 'exact'
      }));
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    console.log('  üîé –ü–æ–∏—Å–∫ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏...');
    const allSearchWords = [...titleWords, ...authorWords];
    const searchResults: BookSearchResult[] = [];
    
    // –ò—â–µ–º –∫–Ω–∏–≥–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤—É
    for (const word of allSearchWords) {
      // –ü–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      const { data: titleMatches } = await supabase
        .from('books')
        .select('id, title, author')
        .ilike('title', `%${word}%`);
      
      // –ü–æ–∏—Å–∫ –≤ –∞–≤—Ç–æ—Ä–µ
      const { data: authorMatches } = await supabase
        .from('books')
        .select('id, title, author')
        .ilike('author', `%${word}%`);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const allMatches = [...(titleMatches || []), ...(authorMatches || [])];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      for (const book of allMatches) {
        const existingResult = searchResults.find(r => r.id === book.id);
        if (existingResult) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
          existingResult.score += 1;
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
          searchResults.push({
            id: book.id,
            title: book.title,
            author: book.author,
            score: 1,
            matchType: 'relevant'
          });
        }
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    searchResults.sort((a, b) => b.score - a.score);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const relevantMatches = searchResults.filter(result => result.score >= 2);
    
    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${relevantMatches.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
    
    if (relevantMatches.length > 0) {
      console.log('  –¢–æ–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:');
      relevantMatches.slice(0, 5).forEach((match, index) => {
        console.log(`    ${index + 1}. "${match.title}" –∞–≤—Ç–æ—Ä–∞ ${match.author} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${match.score})`);
      });
    }
    
    return relevantMatches;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:', error);
    return [];
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥');
  
  // –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–Ω–∏–≥–∏ "–ê–Ω—Ç–æ–Ω –ö–∞—Ä–µ–ª–∏–Ω - –•—Ä–æ–Ω–∏–∫–∏ –û–ø—É—Å—Ç–æ—à—ë–Ω–Ω—ã—Ö –∑–µ–º–µ–ª—å"
  const title = "–•—Ä–æ–Ω–∏–∫–∏ –û–ø—É—Å—Ç–æ—à—ë–Ω–Ω—ã—Ö –∑–µ–º–µ–ª—å";
  const author = "–ê–Ω—Ç–æ–Ω –ö–∞—Ä–µ–ª–∏–Ω";
  
  const results = await searchBooksByRelevance(title, author);
  
  if (results.length > 0) {
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:');
    results.slice(0, 5).forEach((result, index) => {
      console.log(`${index + 1}. "${result.title}" –∞–≤—Ç–æ—Ä–∞ ${result.author}`);
      console.log(`   ID: ${result.id}`);
      console.log(`   –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${result.matchType}`);
      console.log(`   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${result.score}`);
      console.log('---');
    });
  } else {
    console.log('‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }
}

main();