/**
 * Enhanced script to analyze data quality between telegram_messages_index and books tables
 * This script accounts for the fact that not all indexed posts contain books
 * and checks for potential duplicates
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://ygqyswivvdtpgpnxrpzl.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlncXlzd2l2dmR0cGdwbnhycHpsIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1ODg2ODY3NCwiZXhwIjoyMDc0NDQ0Njc0fQ.O1K3gUEr5Hjxy1Wwdt7oSU2-qQ6vYkmS1i70X51OvxY';

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function analyzeDataQuality() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏...');
  console.log('===========================================');

  try {
    // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...');

    const { count: totalIndexed, error: totalIndexedError } = await supabase
      .from('telegram_messages_index')
      .select('*', { count: 'exact', head: true });

    const { count: totalBooks, error: totalBooksError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true })
      .not('telegram_post_id', 'is', null);

    if (totalIndexedError || totalBooksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      return;
    }

    console.log(`–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ telegram_messages_index: ${totalIndexed || 0}`);
    console.log(`–í—Å–µ–≥–æ –∫–Ω–∏–≥ —Å telegram_post_id –≤ books: ${totalBooks || 0}`);

    // 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –≤ –∏–Ω–¥–µ–∫—Å–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥
    console.log('\nüìä 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥...');

    const { data: indexWithBooks, error: indexWithBooksError } = await supabase
      .from('telegram_messages_index')
      .select('message_id, author, title')
      .not('author', 'is', null)
      .not('title', 'is', null);

    if (indexWithBooksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏:', indexWithBooksError);
      return;
    }

    const recordsWithBooks = indexWithBooks?.length || 0;
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ –∏–Ω–¥–µ–∫—Å–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∞–≤—Ç–æ—Ä–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º: ${recordsWithBooks}`);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–æ–º –∏ –∫–Ω–∏–≥–∞–º–∏
    console.log('\nüìä 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...');

    // –ü–æ–ª—É—á–∏–º –∑–∞–ø–∏—Å–∏ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const { data: indexRecords, error: indexRecordsError } = await supabase
      .from('telegram_messages_index')
      .select('message_id, author, title')
      .not('author', 'is', null)
      .not('title', 'is', null);

    if (indexRecordsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏–Ω–¥–µ–∫—Å–∞:', indexRecordsError);
      return;
    }

    // –ü–æ–ª—É—á–∏–º –∫–Ω–∏–≥–∏ —Å telegram_post_id
    const { data: bookRecords, error: bookRecordsError } = await supabase
      .from('books')
      .select('telegram_post_id, author, title')
      .not('telegram_post_id', 'is', null);

    if (bookRecordsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', bookRecordsError);
      return;
    }

    // –ù–∞–π–¥–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    const linkedCount = indexRecords?.filter((indexRecord: any) =>
      bookRecords?.some((book: any) => book.telegram_post_id === indexRecord.message_id)
    ).length || 0;

    console.log(`–°–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (–∏–Ω–¥–µ–∫—Å + –∫–Ω–∏–≥–∏): ${linkedCount}`);

    // 4. –ü–æ–∏—Å–∫ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä 4. –ü–æ–∏—Å–∫ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');

    const mismatchedRecords: any[] = [];
    indexRecords?.forEach((indexRecord: any) => {
      const bookRecord = bookRecords?.find((book: any) => book.telegram_post_id === indexRecord.message_id);
      if (bookRecord && (indexRecord.author !== bookRecord.author || indexRecord.title !== bookRecord.title)) {
        mismatchedRecords.push({
          message_id: indexRecord.message_id,
          index_author: indexRecord.author,
          index_title: indexRecord.title,
          book_author: bookRecord.author,
          book_title: bookRecord.title
        });
      }
    });

    console.log(`–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${mismatchedRecords.length}`);
    if (mismatchedRecords.length > 0 && mismatchedRecords.length <= 10) {
      mismatchedRecords.forEach((record, index) => {
        console.log(`  ${index + 1}. Message ID: ${record.message_id}`);
        console.log(`     –í –∏–Ω–¥–µ–∫—Å–µ - "${record.index_author}" - "${record.index_title}"`);
        console.log(`     –í books   - "${record.book_author}" - "${record.book_title}"`);
      });
    }

    // 5. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
    console.log('\nüìä 5. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥...');

    const { data: recordsWithoutBooks, error: recordsWithoutBooksError } = await supabase
      .from('telegram_messages_index')
      .select('message_id, author, title')
      .or('author.is.null,title.is.null');

    if (recordsWithoutBooksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', recordsWithoutBooksError);
      return;
    }

    const recordsWithoutBooksCount = recordsWithoutBooks?.length || 0;
    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ –∏–Ω–¥–µ–∫—Å–µ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥: ${recordsWithoutBooksCount}`);

    if (recordsWithoutBooks && recordsWithoutBooks.length <= 10) {
      recordsWithoutBooks.forEach((record: any, index: number) => {
        console.log(`  ${index + 1}. Message ID: ${record.message_id}`);
        console.log(`     –ê–≤—Ç–æ—Ä: ${record.author || '–Ω–µ —É–∫–∞–∑–∞–Ω'}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${record.title || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      });
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å–µ
    console.log('\nüìä 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å–µ...');

    const { data: allIndexRecords, error: allIndexError } = await supabase
      .from('telegram_messages_index')
      .select('message_id');

    if (allIndexError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–Ω–¥–µ–∫—Å–∞:', allIndexError);
      return;
    }

    const messageIds = allIndexRecords?.map((record: any) => record.message_id) || [];
    const uniqueMessageIds = new Set(messageIds);
    const duplicateCount = messageIds.length - uniqueMessageIds.size;

    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏–Ω–¥–µ–∫—Å–µ: ${messageIds.length}`);
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö message_id: ${uniqueMessageIds.size}`);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateCount}`);

    // 7. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    console.log('\nüìä 7. –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...');
    console.log('=====================================');

    const validIndexRecords = totalIndexed ? totalIndexed - recordsWithoutBooksCount : 0;
    const completenessPercentage = validIndexRecords > 0 ? (linkedCount / validIndexRecords * 100).toFixed(2) : '0.00';

    console.log(`–ó–∞–ø–∏—Å–µ–π –≤ –∏–Ω–¥–µ–∫—Å–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥: ${validIndexRecords}`);
    console.log(`–ò–∑ –Ω–∏—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–Ω–∏–≥–∞–º–∏ –≤ books: ${linkedCount}`);
    console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–Ω–æ—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${completenessPercentage}%`);
    console.log(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${mismatchedRecords.length}`);
    console.log(`–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: ${duplicateCount}`);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (parseFloat(completenessPercentage) < 80) {
      console.log('‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–Ω–æ—Ç—ã - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
    }
    if (mismatchedRecords.length > 0) {
      console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
    }
    if (duplicateCount > 0) {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å–µ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
    if (totalIndexed && recordsWithoutBooksCount > totalIndexed * 0.5) {
      console.log('‚ÑπÔ∏è –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞');
    }

    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

analyzeDataQuality();