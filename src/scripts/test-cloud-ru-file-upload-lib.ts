#!/usr/bin/env tsx

import 'dotenv/config';
import { uploadFileToCloudRu, getFileFromCloudRu } from '../lib/cloud-ru-file-upload';
import { Buffer } from 'buffer';

async function testCloudRuFileUploadLib() {
  console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ Cloud.ru ===');
  
  const bucketName = process.env.S3_BUCKET_NAME || 'books';
  console.log(`–ë–∞–∫–µ—Ç: ${bucketName}`);
  
  try {
    // 1. –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    console.log('\n1. –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const testTextFileName = `lib-test-text-${Date.now()}.txt`;
    const testTextContent = `–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª\n–î–∞—Ç–∞: ${new Date().toISOString()}\n–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: ${Math.random()}`;
    
    const uploadResult = await uploadFileToCloudRu(
      bucketName,
      testTextFileName,
      testTextContent,
      'text/plain'
    );
    
    if (uploadResult.success) {
      console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
      console.log(`–°—Ç–∞—Ç—É—Å: ${uploadResult.statusCode} ${uploadResult.statusText}`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', uploadResult.error);
      return;
    }
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const getTextResult = await getFileFromCloudRu(bucketName, testTextFileName);
    
    if (getTextResult.success) {
      console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!');
      console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:');
      console.log(getTextResult.content);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', getTextResult.error);
    }
    
    // 3. –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, JSON)
    console.log('\n3. –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–∞...');
    const testJsonFileName = `lib-test-data-${Date.now()}.json`;
    const testJsonContent = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª',
      timestamp: new Date().toISOString(),
      version: '1.0',
      data: {
        id: Math.floor(Math.random() * 1000),
        values: [1, 2, 3, 4, 5]
      }
    };
    
    const uploadJsonResult = await uploadFileToCloudRu(
      bucketName,
      testJsonFileName,
      JSON.stringify(testJsonContent, null, 2),
      'application/json'
    );
    
    if (uploadJsonResult.success) {
      console.log('‚úÖ JSON —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
      console.log(`–°—Ç–∞—Ç—É—Å: ${uploadJsonResult.statusCode} ${uploadJsonResult.statusText}`);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON —Ñ–∞–π–ª–∞:', uploadJsonResult.error);
      return;
    }
    
    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞...');
    const getJsonResult = await getFileFromCloudRu(bucketName, testJsonFileName);
    
    if (getJsonResult.success) {
      console.log('‚úÖ JSON —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!');
      try {
        const jsonData = JSON.parse(getJsonResult.content!);
        console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
        console.log(JSON.stringify(jsonData, null, 2));
      } catch (parseError) {
        console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON):');
        console.log(getJsonResult.content);
      }
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞:', getJsonResult.error);
    }
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error: any) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('\n–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testCloudRuFileUploadLib()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testCloudRuFileUploadLib };