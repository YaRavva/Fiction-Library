/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ª–∏—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages
 * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª–∞–º –≤ Storage
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function cleanupExcessRecords() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ Storage
    console.log('üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ Storage...');
    const { data: storageFiles, error: storageError } = await supabase
      .storage
      .from('books')
      .list('', { limit: 1000 });
      
    if (storageError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', storageError.message);
      return;
    }
    
    const fileIds = storageFiles?.map(file => file.name.replace(/\.[^/.]+$/, "")) || [];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ Storage: ${fileIds.length}`);
    console.log(`   –§–∞–π–ª—ã: ${fileIds.join(', ')}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ telegram_processed_messages —Å telegram_file_id
    console.log('\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Å telegram_file_id...');
    const { data: recordsWithFileId, error: recordsError } = await supabase
      .from('telegram_processed_messages')
      .select('id, message_id, telegram_file_id, book_id')
      .not('telegram_file_id', 'is', null);
      
    if (recordsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', recordsError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å telegram_file_id: ${recordsWithFileId?.length || 0}`);
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ Storage
    let deletedRecords = 0;
    
    if (recordsWithFileId) {
      for (const record of recordsWithFileId) {
        const fileId = record.telegram_file_id;
        if (fileId && !fileIds.includes(fileId)) {
          console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ ${fileId}...`);
          const { error: deleteError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('id', record.id);
            
          if (deleteError) {
            console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${deleteError.message}`);
          } else {
            console.log(`    ‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞`);
            deletedRecords++;
          }
        }
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ telegram_processed_messages –±–µ–∑ telegram_file_id
    console.log('\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id...');
    const { data: recordsWithoutFileId, error: recordsWithoutFileIdError } = await supabase
      .from('telegram_processed_messages')
      .select('id, message_id, telegram_file_id, book_id')
      .is('telegram_file_id', null);
      
    if (recordsWithoutFileIdError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id:', recordsWithoutFileIdError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id: ${recordsWithoutFileId?.length || 0}`);
    
    // –î–ª—è –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–∏–≥–∏
    let deletedMetadataRecords = 0;
    
    if (recordsWithoutFileId) {
      for (const record of recordsWithoutFileId) {
        if (record.book_id) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞
          const { data: book, error: bookError } = await supabase
            .from('books')
            .select('id')
            .eq('id', record.book_id)
            .single();
            
          if (bookError && bookError.code !== 'PGRST116') { // PGRST116 - –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–Ω–∏–≥–∏ ${record.book_id}: ${bookError.message}`);
            continue;
          }
          
          if (!book) {
            console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ ${record.book_id}...`);
            const { error: deleteError } = await supabase
              .from('telegram_processed_messages')
              .delete()
              .eq('id', record.id);
              
            if (deleteError) {
              console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${deleteError.message}`);
            } else {
              console.log(`    ‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞`);
              deletedMetadataRecords++;
            }
          }
        }
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ message_id (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å)
    console.log('\nüîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ message_id...');
    const { data: allRecords, error: allRecordsError } = await supabase
      .from('telegram_processed_messages')
      .select('id, message_id, telegram_file_id, book_id, processed_at')
      .order('message_id', { ascending: true });
      
    if (allRecordsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π:', allRecordsError.message);
      return;
    }
    
    let deletedDuplicates = 0;
    
    if (allRecords) {
      const groupedByMessageId: Record<string, any[]> = {};
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ message_id
      for (const record of allRecords) {
        if (record.message_id) {
          if (!groupedByMessageId[record.message_id]) {
            groupedByMessageId[record.message_id] = [];
          }
          groupedByMessageId[record.message_id].push(record);
        }
      }
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –ø–æ –∫–∞–∂–¥–æ–º—É message_id)
      for (const [messageId, records] of Object.entries(groupedByMessageId)) {
        if (records.length > 1) {
          console.log(`  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${records.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è message_id ${messageId}`);
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
          records.sort((a, b) => new Date(b.processed_at).getTime() - new Date(a.processed_at).getTime());
          
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
          for (let i = 1; i < records.length; i++) {
            const record = records[i];
            console.log(`    üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞ ID ${record.id}...`);
            const { error: deleteError } = await supabase
              .from('telegram_processed_messages')
              .delete()
              .eq('id', record.id);
              
            if (deleteError) {
              console.log(`      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${deleteError.message}`);
            } else {
              console.log(`      ‚úÖ –î—É–±–ª–∏–∫–∞—Ç —É–¥–∞–ª–µ–Ω`);
              deletedDuplicates++;
            }
          }
        }
      }
    }
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏:');
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${deletedRecords}`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–∏–≥–∞–º–∏: ${deletedMetadataRecords}`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${deletedDuplicates}`);
    console.log(`   –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: ${deletedRecords + deletedMetadataRecords + deletedDuplicates}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π...');
    const { count: finalCount, error: finalCountError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true });
      
    if (finalCountError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π:', finalCountError.message);
      return;
    }
    
    console.log(`‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${finalCount || 0}`);
    
    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
cleanupExcessRecords().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});