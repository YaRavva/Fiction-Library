import { config } from 'dotenv';
import { join } from 'path';
import { createClient } from '@supabase/supabase-js';
import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';

// Load environment variables from .env file
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram
async function countUniqueBooksInTelegram(telegramClient: TelegramService, channel: any): Promise<number> {
  try {
    console.log('Counting unique books in Telegram channel...');
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('Fetching existing books from database for comparison...');
    const { data: existingBooks, error: booksError } = await supabaseAdmin
      .from('books')
      .select('id, title, author');
    
    if (booksError) {
      console.error(`Error fetching books from database: ${booksError.message}`);
      throw new Error(`Error fetching books from database: ${booksError.message}`);
    }
    
    console.log(`Loaded ${existingBooks?.length || 0} books from database`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const existingBooksMap = new Map<string, any>();
    existingBooks?.forEach(book => {
      const key = `${book.author}|${book.title}`;
      existingBooksMap.set(key, book);
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
    console.log('Analyzing messages from Telegram channel...');
    
    let totalMessages = 0;
    let bookMessages = 0;
    let offsetId: number | undefined = undefined;
    const batchSize = 100;
    const bookSet = new Set<string>(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram
    
    while (true) {
      console.log(`Processing batch of messages (total processed: ${totalMessages})...`);
      const messages = await telegramClient.getMessages(channelId, batchSize, offsetId) as any[];
      
      if (messages.length === 0) {
        break;
      }
      
      totalMessages += messages.length;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      for (const message of messages) {
        if (message.text) {
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
            const metadata = MetadataParser.parseMessage(message.text);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —ç—Ç–æ –∫–∞–∫ –∫–Ω–∏–≥–∞ (–µ—Å—Ç—å –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
            if (metadata.author && metadata.title) {
              bookMessages++;
              const bookKey = `${metadata.author}|${metadata.title}`;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥
              if (!bookSet.has(bookKey)) {
                bookSet.add(bookKey);
              }
            }
          } catch (parseError) {
            // –ù–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–∏–≥–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          }
        }
      }
      
      console.log(`  Processed: ${messages.length} messages, found books: ${bookMessages}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏
      const lastMessage = messages[messages.length - 1];
      if (lastMessage.id) {
        offsetId = lastMessage.id;
      } else {
        break;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Telegram API
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`Total unique books in Telegram: ${bookSet.size}`);
    return bookSet.size;
    
  } catch (error) {
    console.error('Error counting unique books in Telegram:', error);
    throw error;
  }
}

async function updateTelegramStats() {
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let booksInDatabase = 0;
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const { count, error: booksCountError } = await supabaseAdmin
        .from('books')
        .select('*', { count: 'exact', head: true });

      if (booksCountError) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${booksCountError.message}`);
      } else {
        booksInDatabase = count || 0;
      }
      console.log(`–ö–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${booksInDatabase}`);
    } catch (error: unknown) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    let booksWithoutFiles = 0;
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤...');
      const { count, error: booksWithoutFilesError } = await supabaseAdmin
        .from('books')
        .select('*', { count: 'exact', head: true })
        .is('file_url', null);

      if (booksWithoutFilesError) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${booksWithoutFilesError.message}`);
      } else {
        booksWithoutFiles = count || 0;
      }
      console.log(`–ö–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${booksWithoutFiles}`);
    } catch (error: unknown) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤:', error);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram –∫–∞–Ω–∞–ª–µ
    let booksInTelegram = 0;
    try {
      console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram –∫–∞–Ω–∞–ª–µ...');
      const telegramClient = await TelegramService.getInstance();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
      const channel = await telegramClient.getMetadataChannel();
      console.log(`‚úÖ –ö–∞–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω: ${(channel as any).title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤ Telegram
      console.log('–ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram...');
      booksInTelegram = await countUniqueBooksInTelegram(telegramClient, channel);
      console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram: ${booksInTelegram}`);
    } catch (error: unknown) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥ –≤ Telegram:', error);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const statsData = {
      books_in_database: booksInDatabase,
      books_in_telegram: booksInTelegram,
      missing_books: Math.max(0, booksInTelegram - booksInDatabase),
      books_without_files: booksWithoutFiles,
      updated_at: new Date().toISOString()
    };

    console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ telegram_stats
    const { error: upsertError } = await supabaseAdmin
      .from('telegram_stats')
      .upsert(statsData, { onConflict: 'id' });

    if (upsertError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', upsertError);
    } else {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    }

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   ========================================`);
    console.log(`   –ö–Ω–∏–≥ –≤ Telegram: ${statsData.books_in_telegram}`);
    console.log(`   –ö–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${statsData.books_in_database}`);
    console.log(`   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥: ${statsData.missing_books}`);
    console.log(`   –ö–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${statsData.books_without_files}`);
    console.log(`   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${statsData.updated_at}`);
    
    console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram:', error);
    process.exit(1);
  }
}

updateTelegramStats();