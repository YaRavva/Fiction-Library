/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Telegram
 * –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é download-single-file.ts
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
config({ path: path.resolve(process.cwd(), '.env') });

async function findUnprocessedFiles() {
  console.log('üöÄ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ telegram_processed_messages —Å book_id, –Ω–æ –±–µ–∑ telegram_file_id
    // –≠—Ç–æ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–æ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª
    const { data: records, error } = await supabase
      .from('telegram_processed_messages')
      .select('id, book_id, message_id, processed_at')
      .is('telegram_file_id', null)
      .order('processed_at', { ascending: false })
      .limit(10);
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error.message);
      return;
    }
    
    if (!records || records.length === 0) {
      console.log('‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ telegram_processed_messages —É–∂–µ –∏–º–µ—é—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã');
      return;
    }
    
    console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:`);
    console.log('ID  | Book ID                            | Message ID | Processed At');
    console.log('----|------------------------------------|------------|-------------------');
    
    records.forEach((record, index) => {
      console.log(`${(index + 1).toString().padStart(3)} | ${record.book_id} | ${record.message_id}       | ${record.processed_at || 'N/A'}`);
    });
    
    // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É
    console.log('\nüìö –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–∞—Ö:');
    
    for (const record of records) {
      const { data: book, error: bookError } = await supabase
        .from('books')
        .select('title, author')
        .eq('id', record.book_id)
        .single();
        
      if (bookError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ ${record.book_id}: ${bookError.message}`);
      } else if (book) {
        console.log(`üìñ ${book.author} - ${book.title} (Book ID: ${record.book_id})`);
      } else {
        console.log(`‚ùì –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (Book ID: ${record.book_id})`);
      }
    }
    
    console.log('\nüí° –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log('npx tsx src/scripts/download-single-file.ts <messageId>');
    console.log('–≥–¥–µ <messageId> - —ç—Ç–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ Telegram');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
findUnprocessedFiles().catch(console.error);