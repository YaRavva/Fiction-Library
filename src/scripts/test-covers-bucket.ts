#!/usr/bin/env tsx

import 'dotenv/config';
import { 
  HeadBucketCommand,
  ListObjectsCommand
} from '@aws-sdk/client-s3';
import { cloudRuS3 } from '../lib/cloud-ru-s3-service';

async function testCoversBucket() {
  console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±–ª–æ–∂–µ–∫ ===');
  
  const bucketName = process.env.S3_COVERS_BUCKET_NAME || 'fiction-library-covers';
  console.log(`–ë–∞–∫–µ—Ç: ${bucketName}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∫–µ—Ç–∞...');
    const headCommand = new HeadBucketCommand({
      Bucket: bucketName,
    });
    
    await cloudRuS3.send(headCommand);
    console.log('‚úÖ –ë–∞–∫–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∫–µ—Ç–µ
    console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∫–µ—Ç–µ...');
    const listCommand = new ListObjectsCommand({
      Bucket: bucketName,
      MaxKeys: 10, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    });
    
    const response = await cloudRuS3.send(listCommand);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω');
    
    if (response.Contents && response.Contents.length > 0) {
      console.log('\nüì¶ –ü–µ—Ä–≤—ã–µ 10 –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∫–µ—Ç–µ:');
      response.Contents.slice(0, 10).forEach((obj: any) => {
        console.log(`  - ${obj.Key} (${obj.Size} –±–∞–π—Ç, –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${obj.LastModified})`);
      });
      
      if (response.Contents.length > 10) {
        console.log(`  ... –∏ –µ—â–µ ${response.Contents.length - 10} –æ–±—ä–µ–∫—Ç–æ–≤`);
      }
    } else {
      console.log('\nüì¶ –ë–∞–∫–µ—Ç –ø—É—Å—Ç');
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error: any) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.name);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error.$metadata) {
      console.error('HTTP Status:', error.$metadata.httpStatusCode);
      console.error('Request ID:', error.$metadata.requestId);
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('\n–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testCoversBucket()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –¢–µ—Å—Ç –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testCoversBucket };