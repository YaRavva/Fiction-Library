#!/usr/bin/env tsx

import 'dotenv/config';
import { PutObjectCommand } from '@aws-sdk/client-s3';
import { cloudRuS3 } from '../lib/cloud-ru-s3-service';

async function testUploadToExistingBucket() {
  console.log('=== –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–∫–µ—Ç ===');
  
  const bucketName = process.env.S3_BUCKET_NAME || 'fiction-library-1760461283197';
  const testFileName = 'test-upload.txt';
  const testContent = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–∫–µ—Ç Cloud.ru S3';
  
  console.log(`–ë–∞–∫–µ—Ç: ${bucketName}`);
  console.log(`–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: ${testFileName}`);
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–∞
    const command = new PutObjectCommand({
      Bucket: bucketName,
      Key: testFileName,
      Body: testContent,
    });
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const response = await cloudRuS3.send(command);
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('ETag:', response.ETag);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:');
    console.log(`–ë–∞–∫–µ—Ç: ${bucketName}`);
    console.log(`–§–∞–π–ª: ${testFileName}`);
    console.log('–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ');
    
  } catch (error: any) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò:', error.message);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.name);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error.$metadata) {
      console.error('HTTP Status:', error.$metadata.httpStatusCode);
      console.error('Request ID:', error.$metadata.requestId);
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('\n–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testUploadToExistingBucket()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testUploadToExistingBucket };