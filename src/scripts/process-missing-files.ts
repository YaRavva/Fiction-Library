import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({ path: resolve(__dirname, '../../.env') });

import { TelegramFileService } from '../lib/telegram/file-service';
import { serverSupabase } from '../lib/serverSupabase';

interface Book {
    id: string;
    title: string;
    author: string;
    telegram_post_id: string;
}

async function processMissingFiles() {
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å telegram_post_id, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_file_id
        const { data: booksWithoutFiles, error } = await serverSupabase
            .from('books')
            .select('id, title, author, telegram_post_id')
            .not('telegram_post_id', 'is', null)
            .is('telegram_file_id', null);
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error);
            return;
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${booksWithoutFiles?.length || 0} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤`);
        
        if (!booksWithoutFiles || booksWithoutFiles.length === 0) {
            console.log('‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ –∏–º–µ—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramFileService
        const fileService = await TelegramFileService.getInstance();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
        const booksToProcess = booksWithoutFiles.slice(0, 5);
        console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤—ã—Ö ${booksToProcess.length} –∫–Ω–∏–≥...`);
        
        for (const book of booksToProcess) {
            const typedBook = book as Book;
            console.log(`\nüìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: "${typedBook.title}" –∞–≤—Ç–æ—Ä–∞ ${typedBook.author} (ID: ${typedBook.id})`);
            console.log(`  üìß Telegram post ID: ${typedBook.telegram_post_id}`);
            
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
                console.log(`  ‚¨áÔ∏è  –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞...`);
                const result = await fileService.processSingleFileById(parseInt(typedBook.telegram_post_id, 10));
                
                if (result.success) {
                    console.log(`  ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
                    if (result.filename) {
                        console.log(`  üìÑ –ò–º—è —Ñ–∞–π–ª–∞: ${result.filename}`);
                    }
                    if (result.fileSize) {
                        console.log(`  üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${result.fileSize} –±–∞–π—Ç`);
                    }
                } else {
                    console.log(`  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${result.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
                }
            } catch (error) {
                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:`, error);
            }
        }
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–∞
        try {
            const fileService = await TelegramFileService.getInstance();
            await fileService.shutdown();
            console.log('\nüîå –°–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (shutdownError) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞:', shutdownError);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
processMissingFiles().catch(console.error);