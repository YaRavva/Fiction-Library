// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import { config } from 'dotenv';
import { join } from 'path';
import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('  NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('  SUPABASE_SERVICE_ROLE_KEY:', supabaseKey || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function updateAllSeriesCompositions() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –≤—Å–µ—Ö —Å–µ—Ä–∏–π');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, series_id');
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:', booksError);
      return;
    }
    
    if (!books || books.length === 0) {
      console.log('‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: ${books.length}`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    const telegramClient = await TelegramService.getInstance();
    
    let updatedCount = 0;
    let createdCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const channel = await telegramClient.getMetadataChannel();
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
      (channel.id as { toString: () => string }).toString() : 
      String(channel.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–∏–≥)
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞...');
    const messages = await telegramClient.getMessages(channelId, 100) as unknown as { id?: number; text?: string }[];
    
    if (!messages || messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const messageMap = new Map<string, { id?: number; text?: string }>();
    for (const message of messages) {
      if (message.text) {
        try {
          const metadata = MetadataParser.parseMessage(message.text);
          if (metadata.author && metadata.title) {
            const key = `${metadata.author}|||${metadata.title}`;
            messageMap.set(key, message);
          }
        } catch (parseError) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        }
      }
    }
    
    console.log(`üìã –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ ${messageMap.size} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
    for (let i = 0; i < books.length; i++) {
      const book = books[i];
      try {
        console.log(`\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥—É ${i + 1}/${books.length}: ${book.author} - ${book.title}`);
        
        // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        const key = `${book.author}|||${book.title}`;
        const message = messageMap.get(key);
        
        if (!message || !message.text) {
          console.log(`  ‚ÑπÔ∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö`);
          skippedCount++;
          continue;
        }
        
        // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const metadata = MetadataParser.parseMessage(message.text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–∞–≤
        if (!metadata.books || metadata.books.length === 0) {
          console.log(`  ‚ÑπÔ∏è  –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å–æ—Å—Ç–∞–≤–∞`);
          skippedCount++;
          continue;
        }
        
        console.log(`  üìö –ù–∞–π–¥–µ–Ω —Å–æ—Å—Ç–∞–≤ –∏–∑ ${metadata.books.length} –∫–Ω–∏–≥`);
        
        // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤
        if (book.series_id) {
          console.log(`  ‚ÑπÔ∏è  –ö–Ω–∏–≥–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏ ${book.series_id}`);
          
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
          const { data: series, error: seriesError } = await supabase
            .from('series')
            .select('series_composition')
            .eq('id', book.series_id)
            .single();
          
          if (seriesError) {
            console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∏:`, seriesError);
            errorCount++;
            continue;
          }
          
          // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤
          const currentComposition = series.series_composition || [];
          console.log(`  üìä –¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –≤ –±–∞–∑–µ: ${currentComposition.length} –∫–Ω–∏–≥`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–æ—Å—Ç–∞–≤
          let compositionsMatch = true;
          if (currentComposition.length !== metadata.books.length) {
            compositionsMatch = false;
          } else {
            for (let j = 0; j < metadata.books.length; j++) {
              const bookFromMessage = metadata.books[j];
              const bookFromSeries = currentComposition[j];
              if (bookFromMessage.title !== bookFromSeries.title || bookFromMessage.year !== bookFromSeries.year) {
                compositionsMatch = false;
                break;
              }
            }
          }
          
          if (!compositionsMatch) {
            console.log(`  ‚ö†Ô∏è  –°–æ—Å—Ç–∞–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏
            const { error: updateError } = await supabase
              .from('series')
              .update({ series_composition: metadata.books })
              .eq('id', book.series_id);
            
            if (updateError) {
              console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–∏–∏:`, updateError);
              errorCount++;
            } else {
              console.log(`  ‚úÖ –°–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω`);
              updatedCount++;
            }
          } else {
            console.log(`  ‚úÖ –°–æ—Å—Ç–∞–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
            skippedCount++;
          }
        } else {
          // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é
          console.log(`  üìó –ö–Ω–∏–≥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é...`);
          
          // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é
          const seriesData: any = {
            title: book.title,
            author: book.author,
            description: metadata.description || '',
            genres: metadata.genres.length > 0 ? metadata.genres : [],
            tags: metadata.tags.length > 0 ? metadata.tags : [],
            rating: metadata.rating || null,
            telegram_post_id: String(message.id || ''),
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            series_composition: metadata.books
          };
          
          const { data: insertedSeries, error: seriesError } = await supabase
            .from('series')
            .insert(seriesData)
            .select()
            .single();
          
          if (seriesError) {
            console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏:`, seriesError);
            errorCount++;
          } else {
            const newSeriesId = (insertedSeries as any).id;
            console.log(`  ‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newSeriesId}`);
            
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –∫ —Å–µ—Ä–∏–∏
            const { error: updateError } = await supabase
              .from('books')
              .update({ series_id: newSeriesId })
              .eq('id', book.id);
            
            if (updateError) {
              console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–Ω–∏–≥–∏ –∫ —Å–µ—Ä–∏–∏:`, updateError);
              errorCount++;
            } else {
              console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏`);
              createdCount++;
            }
          }
        }
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏ ${book.id}:`, error);
        errorCount++;
      }
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É Telegram –∫–ª–∏–µ–Ω—Ç–∞
    if (typeof (telegramClient as unknown as { disconnect?: () => Promise<void> }).disconnect === 'function') {
      await (telegramClient as unknown as { disconnect: () => Promise<void> }).disconnect!();
    }
    
    console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`  –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–∏–π: ${updatedCount}`);
    console.log(`  –°–æ–∑–¥–∞–Ω–æ —Å–µ—Ä–∏–π: ${createdCount}`);
    console.log(`  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
    console.log(`  –û—à–∏–±–æ–∫: ${errorCount}`);
    
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateAllSeriesCompositions();