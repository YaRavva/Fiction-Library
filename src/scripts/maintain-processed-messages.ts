/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã telegram_processed_messages
 * –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function maintainProcessedMessages() {
  console.log('üîß –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã telegram_processed_messages\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let stats = {
      totalRecords: 0,
      duplicateGroups: 0,
      deletedDuplicates: 0,
      orphanedRecords: 0,
      deletedOrphaned: 0,
      recordsWithoutBookId: 0,
      deletedWithoutBookId: 0
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ telegram_processed_messages...');
    const { data: allRecords, error: allRecordsError } = await supabase
      .from('telegram_processed_messages')
      .select('*')
      .order('telegram_file_id', { ascending: true });
      
    if (allRecordsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', allRecordsError.message);
      return;
    }
    
    stats.totalRecords = allRecords?.length || 0;
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${stats.totalRecords} –∑–∞–ø–∏—Å–µ–π`);
    
    if (!allRecords || allRecords.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ telegram_file_id
    const recordsByFileId: Record<string, any[]> = {};
    for (const record of allRecords) {
      if (record.telegram_file_id) {
        if (!recordsByFileId[record.telegram_file_id]) {
          recordsByFileId[record.telegram_file_id] = [];
        }
        recordsByFileId[record.telegram_file_id].push(record);
      }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    console.log('\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    const duplicates = Object.entries(recordsByFileId).filter(([_, records]) => records.length > 1);
    stats.duplicateGroups = duplicates.length;
    
    for (const [fileId, records] of duplicates) {
      console.log(`  üìÅ Telegram File ID: ${fileId} (${records.length} –∑–∞–ø–∏—Å–µ–π)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ Storage
      const fileName = `${fileId}.zip`;
      const { data: storageFiles, error: storageError } = await supabase
        .storage
        .from('books')
        .list('', { search: fileName });
        
      const fileExists = !storageError && storageFiles && storageFiles.length > 0;
      
      if (!fileExists) {
        // –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        console.log(`    ‚ö†Ô∏è  –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π...`);
        for (const record of records) {
          const { error: deleteError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('id', record.id);
            
          if (!deleteError) {
            stats.deletedDuplicates++;
          }
        }
      } else {
        // –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å (—Å–∞–º—É—é –Ω–æ–≤—É—é)
        console.log(`    ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å...`);
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        records.sort((a, b) => new Date(b.processed_at).getTime() - new Date(a.processed_at).getTime());
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        for (let i = 1; i < records.length; i++) {
          const { error: deleteError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('id', records[i].id);
            
          if (!deleteError) {
            stats.deletedDuplicates++;
          }
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ book_id
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ book_id...');
    const recordsWithoutBookId = allRecords.filter(record => !record.book_id);
    stats.recordsWithoutBookId = recordsWithoutBookId.length;
    
    for (const record of recordsWithoutBookId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ Storage
      if (record.telegram_file_id) {
        const fileName = `${record.telegram_file_id}.zip`;
        const { data: storageFiles, error: storageError } = await supabase
          .storage
          .from('books')
          .list('', { search: fileName });
          
        const fileExists = !storageError && storageFiles && storageFiles.length > 0;
        
        if (!fileExists) {
          // –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
          console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ${record.id} –±–µ–∑ book_id –∏ —Ñ–∞–π–ª–∞...`);
          const { error: deleteError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('id', record.id);
            
          if (!deleteError) {
            stats.deletedWithoutBookId++;
          }
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –≤ Storage
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –≤ Storage...');
    for (const [fileId, records] of Object.entries(recordsByFileId)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ Storage
      const fileName = `${fileId}.zip`;
      const { data: storageFiles, error: storageError } = await supabase
        .storage
        .from('books')
        .list('', { search: fileName });
        
      const fileExists = !storageError && storageFiles && storageFiles.length > 0;
      
      if (!fileExists) {
        // –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º fileId
        console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ ${fileId}...`);
        for (const record of records) {
          const { error: deleteError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('id', record.id);
            
          if (!deleteError) {
            stats.deletedOrphaned++;
          }
        }
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.totalRecords}`);
    console.log(`   –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${stats.duplicateGroups}`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${stats.deletedDuplicates}`);
    console.log(`   –ó–∞–ø–∏—Å–µ–π –±–µ–∑ book_id: ${stats.recordsWithoutBookId}`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ book_id: ${stats.deletedWithoutBookId}`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ orphaned –∑–∞–ø–∏—Å–µ–π: ${stats.deletedOrphaned}`);
    console.log(`   –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${stats.deletedDuplicates + stats.deletedWithoutBookId + stats.deletedOrphaned}`);
    
    console.log('\n‚úÖ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
maintainProcessedMessages().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});