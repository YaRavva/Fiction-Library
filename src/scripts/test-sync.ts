/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx src/scripts/test-sync.ts
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞');
  console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

import { TelegramSyncService } from '../lib/telegram/sync.js';
import { MetadataParser } from '../lib/telegram/parser.js';

async function testSync() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Telegram...\n');

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram...');
    const syncService = await TelegramSyncService.getInstance();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log('üìö –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–∞...');
    const limit = 5; // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    const metadata = await syncService.syncMetadata(limit);
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${metadata.length} –∑–∞–ø–∏—Å–µ–π\n`);

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–µ
    metadata.forEach((book, index) => {
      console.log(`üìñ –ö–Ω–∏–≥–∞ ${index + 1}:`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`);
      console.log(`   –ê–≤—Ç–æ—Ä: ${book.author}`);
      if (book.series) {
        console.log(`   –°–µ—Ä–∏—è: ${book.series}`);
      }
      if (book.rating) {
        console.log(`   –†–µ–π—Ç–∏–Ω–≥: ${book.rating}`);
      }
      if (book.genres.length > 0) {
        console.log(`   –ñ–∞–Ω—Ä—ã: ${book.genres.join(', ')}`);
      }
      if (book.tags.length > 0) {
        console.log(`   –¢–µ–≥–∏: ${book.tags.join(', ')}`);
      }
      if (book.description) {
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${book.description.substring(0, 100)}...`);
      }
      console.log('');
    });

    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await syncService.shutdown();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSync();

