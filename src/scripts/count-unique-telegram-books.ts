/**
 * Script to count unique books in Telegram channel
 */

import { config } from 'dotenv';
import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';

// Load environment variables FIRST
config({ path: '.env.local' });
config({ path: '.env' });

async function countUniqueTelegramBooks() {
  try {
    console.log('üîç –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram –∫–∞–Ω–∞–ª–µ\n');
    
    // Initialize Supabase client
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceRoleKey) {
      throw new Error('Missing Supabase environment variables');
    }
    
    const supabase = createSupabaseClient(supabaseUrl, supabaseServiceRoleKey);
    
    // Initialize Telegram client
    console.log('üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    const telegramClient = await TelegramService.getInstance();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // Get metadata channel
    console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
        
    console.log(`üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: ${(channel as any).title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // Get all books from database for comparison
    console.log('\nüìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...');
    const { data: existingBooks, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, telegram_post_id');
    
    if (booksError) {
      throw new Error(`Error fetching books from database: ${booksError.message}`);
    }
    
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${existingBooks?.length || 0} –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    
    // Create a map of existing books for quick lookup
    const existingBooksMap = new Map<string, any>();
    existingBooks?.forEach(book => {
      const key = `${book.author}|${book.title}`;
      existingBooksMap.set(key, book);
    });
    
    // Get messages from Telegram channel and analyze them
    console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram...');
    
    let totalMessages = 0;
    let bookMessages = 0;
    let uniqueBooksInTelegram = 0;
    let newBooksFound = 0;
    let offsetId: number | undefined = undefined;
    const batchSize = 100;
    const bookSet = new Set<string>(); // To track unique books in Telegram
    
    while (true) {
      console.log(`   –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalMessages})...`);
      const messages = await telegramClient.getMessages(channelId, batchSize, offsetId) as any[];
      
      if (messages.length === 0) {
        break;
      }
      
      totalMessages += messages.length;
      
      // Process each message
      for (const message of messages) {
        if (message.text) {
          try {
            // Try to parse message as book metadata
            const metadata = MetadataParser.parseMessage(message.text);
            
            // Check if it looks like a book (has author and title)
            if (metadata.author && metadata.title) {
              bookMessages++;
              const bookKey = `${metadata.author}|${metadata.title}`;
              
              // Add to set of unique books
              if (!bookSet.has(bookKey)) {
                bookSet.add(bookKey);
                uniqueBooksInTelegram++;
                
                // Check if this book already exists in database
                if (!existingBooksMap.has(bookKey)) {
                  newBooksFound++;
                }
              }
            }
          } catch (parseError) {
            // Not a book message, skip
          }
        }
      }
      
      console.log(`     –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥: ${bookMessages}`);
      
      // Set offsetId for next batch
      const lastMessage = messages[messages.length - 1];
      if (lastMessage.id) {
        offsetId = lastMessage.id;
      } else {
        break;
      }
      
      // Add delay to avoid overwhelming Telegram API
      await new Promise(resolve => setTimeout(resolve, 300));
    }
    
    // Results
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`   ========================================`);
    console.log(`   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: ${totalMessages}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–∏–≥–∞–º–∏: ${bookMessages}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram: ${uniqueBooksInTelegram}`);
    console.log(`   –ù–æ–≤—ã—Ö –∫–Ω–∏–≥ (–µ—â–µ –Ω–µ –≤ –±–∞–∑–µ): ${newBooksFound}`);
    console.log(`   –ö–Ω–∏–≥ —É–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${uniqueBooksInTelegram - newBooksFound}`);
    
    // Compare with database
    console.log('\nüìö –°–†–ê–í–ù–ï–ù–ò–ï –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•:');
    console.log(`   ========================================`);
    console.log(`   –ö–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${existingBooks?.length || 0}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${existingBooksMap.size}`);
    
    // Close Telegram client
    await telegramClient.disconnect();
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥:', error);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  countUniqueTelegramBooks();
}