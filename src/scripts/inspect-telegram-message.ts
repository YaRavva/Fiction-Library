/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
 * –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ö—Ä–∞–Ω—è—Ç—Å—è –æ–±–ª–æ–∂–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx src/scripts/inspect-telegram-message.ts
 */

import dotenv from 'dotenv';
import path from 'path';
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import { inspect } from 'util';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

async function inspectMessages() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π Telegram...\n');

  const apiId = process.env.TELEGRAM_API_ID;
  const apiHash = process.env.TELEGRAM_API_HASH;
  const sessionString = process.env.TELEGRAM_SESSION;
  const metadataChannel = process.env.TELEGRAM_METADATA_CHANNEL;

  if (!apiId || !apiHash || !sessionString || !metadataChannel) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    const session = new StringSession(sessionString);
    const client = new TelegramClient(session, parseInt(apiId), apiHash, {
      connectionRetries: 5,
    });

    await client.start({
      phoneNumber: async () => await Promise.reject('Interactive login not supported'),
      phoneCode: async () => await Promise.reject('Interactive login not supported'),
      password: async () => await Promise.reject('Interactive login not supported'),
      onError: (err) => console.error('Telegram client error:', err),
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
    const username = metadataChannel.split('/').pop() || metadataChannel;
    const channel = await client.getEntity(username);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    console.log('üìñ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n');
    const messages = await client.getMessages(channel, { limit: 1 });
    const msg = messages[0];

    if (!msg) {
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      process.exit(1);
    }

    console.log('üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏:');
    console.log(`   ID: ${msg.id}`);
    console.log(`   –î–∞—Ç–∞: ${msg.date}`);
    console.log('');

    // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (msg.message) {
      console.log('üìÑ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:');
      console.log('‚îÄ'.repeat(60));
      console.log(msg.message.substring(0, 500));
      console.log('‚îÄ'.repeat(60));
      console.log('');
    }

    // –î–µ—Ç–∞–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–¥–∏–∞
    const anyMsg: any = msg;
    
    if (anyMsg.media) {
      console.log('üñºÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–¥–∏–∞:');
      console.log('‚îÄ'.repeat(60));
      console.log(`–¢–∏–ø: ${anyMsg.media.className}`);
      console.log('');
      
      // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–¥–∏–∞
      console.log('–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
      console.log(inspect(anyMsg.media, { depth: 5, colors: true }));
      console.log('‚îÄ'.repeat(60));
      console.log('');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞
      if (anyMsg.media.className === 'MessageMediaWebPage') {
        console.log('üì∞ –≠—Ç–æ –≤–µ–±-–ø—Ä–µ–≤—å—é (MessageMediaWebPage)');
        
        if (anyMsg.media.webpage) {
          console.log(`   –¢–∏–ø –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${anyMsg.media.webpage.className}`);
          
          if (anyMsg.media.webpage.photo) {
            console.log('   ‚úÖ –í–µ–±-–ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ!');
            console.log(`   –¢–∏–ø —Ñ–æ—Ç–æ: ${anyMsg.media.webpage.photo.className}`);
            console.log('');
            console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ç–æ:');
            console.log(inspect(anyMsg.media.webpage.photo, { depth: 3, colors: true }));
          } else {
            console.log('   ‚ö†Ô∏è –í–µ–±-–ø—Ä–µ–≤—å—é –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ');
          }
        }
      } else if (anyMsg.media.className === 'MessageMediaPhoto') {
        console.log('üì∏ –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ (MessageMediaPhoto)');
        console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–æ—Ç–æ:');
        console.log(inspect(anyMsg.media.photo, { depth: 3, colors: true }));
      } else if (anyMsg.media.className === 'MessageMediaDocument') {
        console.log('üìé –≠—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç (MessageMediaDocument)');
        console.log('   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:');
        console.log(inspect(anyMsg.media.document, { depth: 3, colors: true }));
      }
    } else {
      console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞');
    }

    console.log('');
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –æ–±–ª–æ–∂–µ–∫');

    await client.disconnect();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
inspectMessages();

