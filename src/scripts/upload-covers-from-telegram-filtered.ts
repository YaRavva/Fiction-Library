#!/usr/bin/env tsx

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import { uploadFile } from '../lib/cloud-ru-s3-service';
import { Buffer } from 'buffer';
import * as fs from 'fs';
import * as path from 'path';
import { MetadataParser } from '../lib/telegram/parser';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞ –≤ Cloud.ru S3
 * –¢–æ–ª—å–∫–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–∞–∫ –∫–Ω–∏–≥–∏
 */

async function uploadCoversFromTelegramFiltered() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞ –≤ Cloud.ru S3 (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  const telegramApiId = process.env.TELEGRAM_API_ID;
  const telegramApiHash = process.env.TELEGRAM_API_HASH;
  const telegramSession = process.env.TELEGRAM_SESSION;
  const telegramMetadataChannel = process.env.TELEGRAM_METADATA_CHANNEL;
  const coversBucketName = process.env.S3_COVERS_BUCKET_NAME || 'fiction-library-covers';
  
  if (!supabaseUrl || !supabaseServiceKey || !telegramApiId || !telegramApiHash || !telegramSession || !telegramMetadataChannel) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    console.log('- NEXT_PUBLIC_SUPABASE_URL');
    console.log('- SUPABASE_SERVICE_ROLE_KEY');
    console.log('- TELEGRAM_API_ID');
    console.log('- TELEGRAM_API_HASH');
    console.log('- TELEGRAM_SESSION');
    console.log('- TELEGRAM_METADATA_CHANNEL');
    console.log('- S3_COVERS_BUCKET_NAME (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: fiction-library-covers)');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –æ–±–ª–æ–∂–µ–∫
  const backupDir = path.join(process.cwd(), 'local-backup-covers');
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }
  
  console.log(`\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫:`);
  console.log(`Supabase URL: ${supabaseUrl}`);
  console.log(`Telegram –∫–∞–Ω–∞–ª: ${telegramMetadataChannel}`);
  console.log(`Cloud.ru Bucket –¥–ª—è –æ–±–ª–æ–∂–µ–∫: ${coversBucketName}`);
  console.log(`–õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${backupDir}`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
  const supabase = createClient(supabaseUrl, supabaseServiceKey);
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞
    console.log('\nüì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    const client = new TelegramClient(
      new StringSession(telegramSession),
      parseInt(telegramApiId),
      telegramApiHash,
      { connectionRetries: 5 }
    );
    
    await client.start({
      botAuthToken: process.env.BOT_TOKEN || '',
    });
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    console.log('\nüì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ...');
    const channel = await client.getEntity(telegramMetadataChannel);
    console.log(`‚úÖ –ö–∞–Ω–∞–ª: ${(channel as any).title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìö –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, cover_url, telegram_post_id')
      .order('created_at', { ascending: true });
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:', booksError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –æ–±–ª–æ–∂–µ–∫
    const booksWithoutCovers = books.filter(book => !book.cover_url);
    console.log(`üìã –ö–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫: ${booksWithoutCovers.length}`);
    
    if (booksWithoutCovers.length === 0) {
      console.log('‚ÑπÔ∏è  –í—Å–µ –∫–Ω–∏–≥–∏ —É–∂–µ –∏–º–µ—é—Ç –æ–±–ª–æ–∂–∫–∏');
      return;
    }
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let processedCount = 0;
    let uploadedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    let notBookCount = 0;
    
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–µ–∫...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < booksWithoutCovers.length; i++) {
      const book = booksWithoutCovers[i];
      const progress = `${i + 1}/${booksWithoutCovers.length}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ telegram_post_id
      if (!book.telegram_post_id) {
        console.log(`\n[${progress}] ${book.author} - ${book.title} | ‚ö†Ô∏è  –ù–µ—Ç telegram_post_id`);
        skippedCount++;
        continue;
      }
      
      console.log(`\n[${progress}] ${book.author} - ${book.title} | üìã Telegram ID: ${book.telegram_post_id}`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞
        const messages = await client.getMessages(channel, {
          ids: [parseInt(book.telegram_post_id)]
        });
        
        if (!messages || messages.length === 0 || !messages[0]) {
          console.log(`  ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Telegram`);
          skippedCount++;
          continue;
        }
        
        const msg = messages[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–∏–≥–æ–π
        if (!msg.text) {
          console.log(`  ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞`);
          notBookCount++;
          continue;
        }
        
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–Ω–∏–≥—É
          const metadata = MetadataParser.parseMessage(msg.text);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
          if (!metadata.author || !metadata.title) {
            console.log(`  ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–∏–≥–æ–π (–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)`);
            notBookCount++;
            continue;
          }
          
          console.log(`  üìö –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: ${metadata.author} - ${metadata.title}`);
        } catch (parseError) {
          console.log(`  ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–∏–≥–æ–π (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞)`);
          notBookCount++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (!msg.media) {
          console.log(`  ‚ö†Ô∏è  –ù–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏`);
          skippedCount++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if (!(msg.media instanceof Api.MessageMediaPhoto)) {
          console.log(`  ‚ö†Ô∏è  –í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ`);
          skippedCount++;
          continue;
        }
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        console.log(`  üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏...`);
        const buffer = await client.downloadMedia(msg, {
          outputFile: new Buffer(0),
        });
        
        if (!buffer) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏`);
          errorCount++;
          continue;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Buffer, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫
        let coverBuffer: Buffer;
        if (buffer instanceof Uint8Array) {
          coverBuffer = Buffer.from(buffer);
        } else {
          coverBuffer = buffer as unknown as Buffer;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const fileExtension = '.jpg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é JPG –¥–ª—è —Ñ–æ—Ç–æ –∏–∑ Telegram
        const fileName = `${book.id}${fileExtension}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –æ–±–ª–æ–∂–∫–∏
        const localFilePath = path.join(backupDir, fileName);
        fs.writeFileSync(localFilePath, coverBuffer);
        console.log(`  üíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${localFilePath}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É –≤ Cloud.ru S3
        console.log(`  ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏ –≤ Cloud.ru S3...`);
        const uploadResult = await uploadFile(coversBucketName, fileName, coverBuffer);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const newCoverUrl = `https://s3.cloud.ru/${coversBucketName}/${fileName}`;
        
        const { error: updateError } = await supabase
          .from('books')
          .update({
            cover_url: newCoverUrl,
            updated_at: new Date().toISOString()
          })
          .eq('id', book.id);
        
        if (updateError) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, updateError.message);
          errorCount++;
          continue;
        }
        
        uploadedCount++;
        console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
        processedCount++;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error: any) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏:`, error.message);
        errorCount++;
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫:');
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} –∫–Ω–∏–≥`);
    console.log(`  üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫: ${uploadedCount} —à—Ç.`);
    console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –∫–Ω–∏–≥`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —à—Ç.`);
    console.log(`  üìö –ù–µ –∫–Ω–∏–≥–∏: ${notBookCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log(`  üìö –í—Å–µ–≥–æ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫: ${booksWithoutCovers.length} –∫–Ω–∏–≥`);
    console.log(`  üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${backupDir}`);
    
    if (errorCount === 0) {
      console.log('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } else {
      console.log(`\n‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å ${errorCount} –æ—à–∏–±–∫–∞–º–∏`);
    }
    
  } catch (error: any) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫:', error.message);
    console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫
if (require.main === module) {
  uploadCoversFromTelegramFiltered()
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { uploadCoversFromTelegramFiltered };