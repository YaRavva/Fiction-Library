/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ bucket –∫–Ω–∏–≥
 * –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–æ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–Ω–∏–≥.
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * 1. –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ fb2 –∏ zip
 * 2. –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –≤–∏–¥ <MessageID>.zip (–∏–ª–∏ .fb2)
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import bigInt from 'big-integer';
import { uploadFileToStorage, getSupabaseAdmin } from '../lib/supabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è) –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
 * @param filename –ò–º—è —Ñ–∞–π–ª–∞
 * @returns –û–±—ä–µ–∫—Ç —Å –∞–≤—Ç–æ—Ä–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
 */
function extractMetadataFromFilename(filename: string): { author: string; title: string } {
  // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ"
  const dashPattern = /^([^-‚Äì‚Äî]+)[\-‚Äì‚Äî](.+)$/;
  const dashMatch = nameWithoutExt.match(dashPattern);
  if (dashMatch) {
    let author = dashMatch[1].trim();
    let title = dashMatch[2].trim();
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–º–∏—Ü–µ–ª–∏–π"
    if (title.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
      title = `—Ü–∏–∫–ª ${title}`;
    }
    
    // –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "—Ü–∏–∫–ª", –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (author.toLowerCase().includes('—Ü–∏–∫–ª ')) {
      title = `${author} ${title}`;
      author = author.replace(/—Ü–∏–∫–ª\s+/i, '').trim();
    } else if (title.toLowerCase().includes('—Ü–∏–∫–ª ')) {
      title = `—Ü–∏–∫–ª ${title.replace(/—Ü–∏–∫–ª\s+/i, '').trim()}`;
    }
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–û–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π —Ü–∏–∫–ª"
    if (title.toLowerCase().includes('–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π')) {
      title = `—Ü–∏–∫–ª ${title}`;
    }
    
    return { author, title };
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
  // –ü–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ—Ä1_–∏_–ê–≤—Ç–æ—Ä2_–ù–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "–ê–≤—Ç–æ—Ä1,_–ê–≤—Ç–æ—Ä2_–ù–∞–∑–≤–∞–Ω–∏–µ"
  if (nameWithoutExt.includes('_–∏_')) {
    const parts = nameWithoutExt.split('_–∏_');
    if (parts.length === 2) {
      const authorsPart = parts[0].replace(/_/g, ' ').trim();
      const titlePart = parts[1].replace(/_/g, ' ').trim();
      
      let title = titlePart;
      if (title.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
        title = `—Ü–∏–∫–ª ${title}`;
      }
      
      return { author: authorsPart, title };
    }
  }
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ—Ä1,_–ê–≤—Ç–æ—Ä2_–ù–∞–∑–≤–∞–Ω–∏–µ"
  if (nameWithoutExt.includes(',_')) {
    const parts = nameWithoutExt.split(',_');
    if (parts.length === 2) {
      const authorsPart = parts[0].replace(/_/g, ' ').trim();
      const titlePart = parts[1].replace(/_/g, ' ').trim();
      
      let title = titlePart;
      if (title.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
        title = `—Ü–∏–∫–ª ${title}`;
      }
      
      return { author: authorsPart, title };
    }
  }
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω: "–•—Ä–æ–Ω–∏–∫–∏" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  if (nameWithoutExt.includes('–•—Ä–æ–Ω–∏–∫–∏')) {
    const words = nameWithoutExt.split('_');
    const chroniclesIndex = words.findIndex(word => word.includes('–•—Ä–æ–Ω–∏–∫–∏'));
    
    if (chroniclesIndex > 0) {
      // –ê–≤—Ç–æ—Ä—ã - —ç—Ç–æ —Å–ª–æ–≤–∞ –¥–æ "–•—Ä–æ–Ω–∏–∫–∏"
      const authors = words.slice(0, chroniclesIndex).join(' ').replace(/_/g, ' ').trim();
      const title = words.slice(chroniclesIndex).join(' ').replace(/_/g, ' ').trim();
      
      return { author: authors, title };
    }
  }
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const words = nameWithoutExt
    .split(/[_\-\s]+/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º –∏ –¥–µ—Ñ–∏—Å–∞–º
    .filter(word => word.length > 0) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞
    .map(word => word.trim()); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
  
  // –ï—Å–ª–∏ –º–∞–ª–æ —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (words.length < 2) {
    return { 
      author: 'Unknown', 
      title: nameWithoutExt 
    };
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏—è (—Ü–∏–∫–ª, saga, series –∏ —Ç.–¥.)
  const titleIndicators = ['—Ü–∏–∫–ª', ' saga', ' series', '–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π'];
  let titleStartIndex = words.length; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
  
  for (let i = 0; i < words.length; i++) {
    const word = words[i].toLowerCase();
    if (titleIndicators.some(indicator => word.includes(indicator))) {
      titleStartIndex = i;
      break;
    }
  }
  
  // –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ—Ä—ã - —ç—Ç–æ —Å–ª–æ–≤–∞ –¥–æ –Ω–µ–≥–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ - –æ—Ç –Ω–µ–≥–æ –∏ –¥–∞–ª–µ–µ
  if (titleStartIndex < words.length) {
    const authors = words.slice(0, titleStartIndex).join(' ');
    let title = words.slice(titleStartIndex).join(' ');
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–º–∏—Ü–µ–ª–∏–π"
    if (title.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
      title = `—Ü–∏–∫–ª ${title}`;
    }
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–û–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π —Ü–∏–∫–ª"
    if (title.toLowerCase().includes('–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π')) {
      title = `—Ü–∏–∫–ª ${title}`;
    }
    
    return { 
      author: authors, 
      title: title 
    };
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  let title = nameWithoutExt;
  
  // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–º–∏—Ü–µ–ª–∏–π"
  if (nameWithoutExt.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
    title = `—Ü–∏–∫–ª ${nameWithoutExt}`;
  } else if (nameWithoutExt.includes('—Ü–∏–∫–ª')) {
    title = `—Ü–∏–∫–ª ${nameWithoutExt.replace(/—Ü–∏–∫–ª\s*/i, '')}`;
  } else if (nameWithoutExt.toLowerCase().includes('–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π')) {
    title = `—Ü–∏–∫–ª ${nameWithoutExt}`;
  }
  
  return { 
    author: 'Unknown', 
    title: title
  };
}

/**
 * –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
 * @param author –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
 * @param title –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
 * @param supabase –ö–ª–∏–µ–Ω—Ç Supabase
 * @returns –ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –∏–ª–∏ null
 */
async function findMatchingBook(author: string, title: string, supabase: any): Promise<any | null> {
  console.log(`üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: "${title}" –∞–≤—Ç–æ—Ä–∞ ${author}`);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  const { data: exactMatch, error: exactError } = await supabase
    .from('books')
    .select('*')
    .eq('title', title)
    .eq('author', author)
    .single();
  
  if (!exactError && exactMatch) {
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞ —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º: ${exactMatch.id}`);
    return exactMatch;
  }
  
  // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
  console.log('üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é...');
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const titleWords = title.split(/\s+/).filter(word => word.length > 2);
  const authorWords = author.split(/\s+/).filter(word => word.length > 2);
  const allSearchWords = [...titleWords, ...authorWords].filter(word => word.length > 0);
  
  console.log(`  –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: [${allSearchWords.join(', ')}]`);
  
  if (allSearchWords.length > 0) {
    // –ò—â–µ–º –∫–Ω–∏–≥–∏, –≥–¥–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const searchPromises = allSearchWords.map(async (word) => {
      const { data: titleMatches } = await supabase
        .from('books')
        .select('id, title, author')
        .ilike('title', `%${word}%`)
        .limit(5);
      
      const { data: authorMatches } = await supabase
        .from('books')
        .select('id, title, author')
        .ilike('author', `%${word}%`)
        .limit(5);
      
      const allMatches = [...(titleMatches || []), ...(authorMatches || [])];
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
      const uniqueMatches = allMatches.filter((bookItem, index, self) => 
        index === self.findIndex(b => (b as { id: string }).id === (bookItem as { id: string }).id)
      );
      
      return uniqueMatches;
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.all(searchPromises);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allMatches = results.flat();
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
    const uniqueMatches = allMatches.filter((bookItem, index, self) => 
      index === self.findIndex(b => (b as { id: string }).id === (bookItem as { id: string }).id)
    );
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
    const matchesWithScores = uniqueMatches.map(bookItem => {
      const typedBookItem = bookItem as { id: string; title: string; author: string };
      const bookTitleWords = typedBookItem.title.toLowerCase().split(/\s+/);
      const bookAuthorWords = typedBookItem.author.toLowerCase().split(/\s+/);
      const allBookWords = [...bookTitleWords, ...bookAuthorWords];
      
      // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–ª–æ–≤ —Å —Å–ª–æ–≤–∞–º–∏ –≤ –∫–Ω–∏–≥–µ
      let score = 0;
      for (const searchWord of allSearchWords) {
        const normalizedSearchWord = searchWord.toLowerCase();
        let found = false;
        for (const bookWord of allBookWords) {
          const normalizedBookWord = bookWord.toLowerCase();
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
          if (normalizedBookWord.includes(normalizedSearchWord) || normalizedSearchWord.includes(normalizedBookWord)) {
            score++;
            found = true;
            break; // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
          }
        }
      }
      
      return { ...typedBookItem, score };
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
    matchesWithScores.sort((a, b) => b.score - a.score);
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const topMatches = matchesWithScores.slice(0, 5);
    const relevantMatches = topMatches.filter(match => match.score >= 2);
    
    if (relevantMatches.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${relevantMatches.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      return relevantMatches[0];
    }
  }
  
  console.log('‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∞—è –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  return null;
}

async function finalSingleFileUpload() {
  console.log('üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...\n');
  
  let telegramClient: TelegramClient | null = null;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiId = process.env.TELEGRAM_API_ID;
    const apiHash = process.env.TELEGRAM_API_HASH;
    const sessionString = process.env.TELEGRAM_SESSION;
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!apiId || !apiHash || !sessionString || !supabaseUrl || !supabaseServiceRoleKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram...');
    const session = new StringSession(sessionString);
    telegramClient = new TelegramClient(session, parseInt(apiId), apiHash, {
      connectionRetries: 5,
    });
    
    await telegramClient.connect();
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω\n');
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Supabase
    const supabase = createSupabaseClient(supabaseUrl, supabaseServiceRoleKey);
    
    // –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Ñ–∞–π–ª–æ–≤
    const channelId = 1515159552; // ID –¥–ª—è "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"
    console.log(`üÜî –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: –ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏ (ID: ${channelId})\n`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
    const channelEntity = await telegramClient.getEntity(new Api.PeerChannel({ channelId: bigInt(channelId) }));
    console.log(`‚úÖ –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${(channelEntity as any).title}\n`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞...');
    const messages = await telegramClient.getMessages(channelEntity, { limit: 5 });
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);
    
    // –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
    let fileMessage = null;
    for (const msg of messages) {
      if ((msg as any).media && (msg as any).media.className === 'MessageMediaDocument') {
        fileMessage = msg;
        break;
      }
    }
    
    if (!fileMessage) {
      console.log('‚ùå –í –ø–µ—Ä–≤—ã—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º: ID ${fileMessage.id}\n`);
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    const document = (fileMessage as any).media.document;
    const filenameAttr = document.attributes?.find((attr: any) => attr.className === 'DocumentAttributeFilename');
    const originalFilename = filenameAttr?.fileName || `book_${fileMessage.id}`;
    const fileExtension = path.extname(originalFilename).toLowerCase();
    
    console.log(`üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ${originalFilename}`);
    console.log(`üìÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${fileExtension}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    const allowedExtensions = ['.fb2', '.zip'];
    if (!allowedExtensions.includes(fileExtension)) {
      console.log(`‚ö†Ô∏è  –¢–∏–ø —Ñ–∞–π–ª–∞ ${fileExtension} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: ${allowedExtensions.join(', ')}`);
      return;
    }
    console.log(`‚úÖ –¢–∏–ø —Ñ–∞–π–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω: ${fileExtension}\n`);
    
    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    console.log('üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram...');
    const fileBuffer = await telegramClient.downloadMedia(fileMessage, {});
    
    if (!fileBuffer) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Buffer –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    const buffer = Buffer.isBuffer(fileBuffer) ? fileBuffer : Buffer.from(fileBuffer as unknown as Uint8Array);
    
    console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω (${buffer.length} –±–∞–π—Ç)\n`);
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞...');
    const { author, title } = extractMetadataFromFilename(originalFilename);
    console.log(`  –ê–≤—Ç–æ—Ä: ${author}`);
    console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${title}\n`);
    
    // –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const matchingBook = await findMatchingBook(author, title, supabase);
    
    if (!matchingBook) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–∏–≥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–∏–≥–∞: "${matchingBook.title}" –∞–≤—Ç–æ—Ä–∞ ${matchingBook.author}\n`);
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <MessageID>.zip (–∏–ª–∏ .fb2)
    const storageFilename = `${fileMessage.id}${fileExtension}`;
    console.log(`üíæ –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${storageFilename}`);
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME-—Ç–∏–ø–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    const mimeTypes: Record<string, string> = {
      '.fb2': 'application/fb2+xml',
      '.zip': 'application/zip',
    };
    const mimeType = mimeTypes[fileExtension] || 'application/octet-stream';
    const fileFormat = fileExtension.replace('.', '');
    console.log(`üìÑ MIME-—Ç–∏–ø: ${mimeType}`);
    console.log(`üìÑ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${fileFormat}\n`);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage (bucket 'books')
    console.log('‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage...');
    try {
      const uploadResult = await uploadFileToStorage('books', storageFilename, buffer, mimeType);
      console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:`, uploadResult);
    } catch (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', uploadError);
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Ñ–∞–π–ª–∞
    const fileUrl = `${supabaseUrl}/storage/v1/object/public/books/${encodeURIComponent(storageFilename)}`;
    console.log(`üîó URL —Ñ–∞–π–ª–∞: ${fileUrl}\n`);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    try {
      const admin = getSupabaseAdmin();
      if (!admin) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Supabase Admin');
      }
      
      const updateData: Record<string, unknown> = {
        file_url: fileUrl,
        file_size: buffer.length,
        file_format: fileFormat,
        telegram_file_id: String(fileMessage.id),
        storage_path: storageFilename,
        updated_at: new Date().toISOString()
      };
      
      // Type assertion to fix typing issues with Supabase client
      const typedAdmin = admin as unknown as {
        from: (table: string) => {
          update: (data: Record<string, unknown>) => {
            eq: (column: string, value: unknown) => {
              select: () => {
                single: () => Promise<{ data: unknown; error: unknown }>;
              };
            };
          };
        };
      };
      
      const { data: updatedBook, error: updateError } = await typedAdmin
        .from('books')
        .update(updateData)
        .eq('id', matchingBook.id)
        .select()
        .single();
      
      if (updateError) {
        throw updateError;
      }
      
      console.log(`‚úÖ –ó–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:`, (updatedBook as { title: string }).title);
    } catch (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∫–Ω–∏–≥–∏:', updateError);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤ Storage
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤ Storage...');
    try {
      const { data: fileData, error: fileError } = await supabase
        .storage
        .from('books')
        .download(storageFilename);
      
      if (fileError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', fileError);
      } else if (fileData) {
        console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage (${fileData.size} –±–∞–π—Ç)`);
        console.log(`‚úÖ –ò–º—è —Ñ–∞–π–ª–∞ –≤ Storage: ${storageFilename}`);
      }
    } catch (downloadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', downloadError);
    }
    
    console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`   ‚Ä¢ –§–∞–π–ª: ${originalFilename}`);
    console.log(`   ‚Ä¢ –ê–≤—Ç–æ—Ä: ${author}`);
    console.log(`   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${title}`);
    console.log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${buffer.length} –±–∞–π—Ç`);
    console.log(`   ‚Ä¢ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${fileFormat}`);
    console.log(`   ‚Ä¢ Message ID: ${fileMessage.id}`);
    console.log(`   ‚Ä¢ Storage –∏–º—è: ${storageFilename}`);
    console.log(`   ‚Ä¢ URL —Ñ–∞–π–ª–∞: ${fileUrl}`);
    console.log(`   ‚Ä¢ –°–≤—è–∑–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞: "${matchingBook.title}" –∞–≤—Ç–æ—Ä–∞ ${matchingBook.author}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    if (telegramClient) {
      try {
        await telegramClient.disconnect();
        console.log('\nüßπ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
      } catch (disconnectError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', disconnectError);
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å GramJS
    console.log('\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞...');
    setTimeout(() => {
      process.exit(0);
    }, 1000);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
finalSingleFileUpload().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});