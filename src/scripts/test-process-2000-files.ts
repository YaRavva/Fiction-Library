import { FileProcessingService } from '../lib/telegram/file-processing-service';
import { S3Client, HeadObjectCommand } from "@aws-sdk/client-s3";
import { serverSupabase } from '../lib/serverSupabase';

// –°–æ–∑–¥–∞–µ–º S3 –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
const createS3Client = () => new S3Client({
  endpoint: "https://s3.cloud.ru",
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
  }
});

async function testProcess2000Files() {
  let s3Client: S3Client | null = null;
  
  try {
    console.log('üîç Testing processing of files from Telegram...');
    
    // Initialize the Telegram file service
    const fileService = await FileProcessingService.getInstance();
    console.log('‚úÖ TelegramFileService initialized');
    
    // Create S3 client
    s3Client = createS3Client();
    console.log('‚úÖ S3 client initialized');
    
    // Process only 10 files directly (without queue)
    console.log('üìö Processing 10 files from Telegram channel...');
    const results = await fileService.downloadAndProcessFilesDirectly(10);
    
    console.log(`\nüìä Results:`);
    console.log(`  Total processed: ${results.length}`);
    
    // Filter and display only successful matches with scores
    const successfulMatches = results.filter((r: any) => r.success && !r.skipped && r.bookTitle && r.bookAuthor);
    
    if (successfulMatches.length > 0) {
      console.log(`\nüìã Successful matches:`);
      successfulMatches.forEach((r: any) => {
        console.log(`  üìÑ ${r.filename}`);
        console.log(`  ‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è –∫–Ω–∏–≥–∞: "${r.bookTitle}" –∞–≤—Ç–æ—Ä–∞ ${r.bookAuthor}`);
        if (r.score !== undefined) {
          console.log(`  üìä –°—á–µ—Ç: ${r.score}`);
        }
        console.log('');
      });
    }
    
    const skipped = results.filter((r: any) => r.success && r.skipped).length;
    const failed = results.filter((r: any) => !r.success).length;
    
    console.log(`  Skipped files: ${skipped}`);
    console.log(`  Failed files: ${failed}`);
    
    console.log('\n‚ú® Test completed successfully!');
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å gramjs
    console.log('üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å...');
    process.exit(0);
  }
}

// Run the test
testProcess2000Files();