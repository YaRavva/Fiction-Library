import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({ path: resolve(__dirname, '../../.env') });

import { TelegramMetadataService } from '../lib/telegram/metadata-service';
import { serverSupabase } from '../lib/serverSupabase';

interface ProcessedMessage {
    message_id: string;
    processed_at: string;
}

async function checkMessageProcessingOrder() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const { data: lastProcessed, error } = await serverSupabase
            .from('telegram_processed_messages')
            .select('message_id, processed_at')
            .order('processed_at', { ascending: false })
            .limit(10);
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            return;
        }
        
        console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:');
        if (lastProcessed && lastProcessed.length > 0) {
            for (const msg of lastProcessed) {
                const typedMsg = msg as ProcessedMessage;
                console.log(`  - Message ID: ${typedMsg.message_id}, Processed at: ${typedMsg.processed_at}`);
            }
        } else {
            console.log('  –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—è –≤ Telegram
        console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ Telegram...');
        const metadataService = await TelegramMetadataService.getInstance();
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        console.log('  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
checkMessageProcessingOrder().catch(console.error);