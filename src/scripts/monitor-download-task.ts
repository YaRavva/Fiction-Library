import { taskManager } from '../lib/task-manager';

/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 * @param taskId ID –∑–∞–¥–∞—á–∏
 * @param interval –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2000ms)
 */
export async function monitorDownloadTask(taskId: string, interval: number = 2000): Promise<void> {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    taskManager.registerProgressCallback(taskId, (progress) => {
      console.log(`[${progress.progress}%] ${progress.message}`);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (progress.result && progress.result.bookTitle && progress.result.bookAuthor) {
        console.log(`      –ö–Ω–∏–≥–∞: ${progress.result.bookAuthor} - ${progress.result.bookTitle}`);
      }
    });
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    const checkStatus = () => {
      const taskStatus = taskManager.getTaskStatus(taskId);
      
      if (!taskStatus) {
        console.log('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        taskManager.unregisterProgressCallback(taskId);
        reject(new Error('Task not found'));
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
      if (taskStatus.status === 'completed') {
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${taskStatus.message}`);
        taskManager.unregisterProgressCallback(taskId);
        resolve();
        return;
      }
      
      if (taskStatus.status === 'failed') {
        console.log('‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π');
        console.log(`üìä –û—à–∏–±–∫–∞: ${taskStatus.message}`);
        taskManager.unregisterProgressCallback(taskId);
        reject(new Error(taskStatus.message));
        return;
      }
      
      // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      if (Date.now() - startTime > 30 * 60 * 1000) { // 30 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (30 –º–∏–Ω—É—Ç)');
        taskManager.unregisterProgressCallback(taskId);
        resolve();
        return;
      }
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      setTimeout(checkStatus, interval);
    };
    
    // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    checkStatus();
  });
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  if (process.argv.length < 3) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx monitor-download-task.ts <taskId>');
    process.exit(1);
  }
  
  const taskId = process.argv[2];
  console.log(`üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á–∏ ${taskId}...`);
  
  monitorDownloadTask(taskId).then(() => {
    console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω');
  }).catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
  });
}