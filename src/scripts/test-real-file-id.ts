/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
config({ path: path.resolve(process.cwd(), '.env') });

async function testRealFileId() {
  console.log('üöÄ –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );
    
    // –ò—â–µ–º –∑–∞–ø–∏—Å–∏ –≤ telegram_processed_messages —Å –Ω–µ-null telegram_file_id
    const { data: records, error } = await supabase
      .from('telegram_processed_messages')
      .select('telegram_file_id, book_id')
      .not('telegram_file_id', 'is', null)
      .limit(5);
      
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', error.message);
      return;
    }
    
    if (!records || records.length === 0) {
      console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ —Å telegram_file_id –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π —Å telegram_file_id:`);
    records.forEach((record, index) => {
      console.log(`  ${index + 1}. File ID: ${record.telegram_file_id}, Book ID: ${record.book_id}`);
    });
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testFileId = parseInt(records[0].telegram_file_id, 10);
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å File ID: ${testFileId}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const { downloadSingleFile } = await import('./download-single-file');
    const result = await downloadSingleFile(testFileId);
    console.log('\n' + result.report);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testRealFileId().catch(console.error);