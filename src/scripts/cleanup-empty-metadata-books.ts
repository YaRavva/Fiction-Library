import { config } from 'dotenv';
import { resolve } from 'path';
import { getSupabaseAdmin } from '../lib/supabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

async function cleanupEmptyMetadataBooks() {
  try {
    console.log('üîç –ò—â–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...');
    const supabase = getSupabaseAdmin();
    
    if (!supabase) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
      return;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    // @ts-ignore
    const { data: emptyMetadataBooks, error } = await supabase
      .from('books')
      .select('id, author, title, cover_url, telegram_post_id')
      .or('author.eq.,title.eq.')
      .limit(100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error.message);
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: ${emptyMetadataBooks?.length || 0}`);
    
    // –í—ã–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    if (emptyMetadataBooks && emptyMetadataBooks.length > 0) {
      console.log('\n–ü—Ä–∏–º–µ—Ä—ã –∫–Ω–∏–≥ —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏:');
      // @ts-ignore
      emptyMetadataBooks.slice(0, 10).forEach((book: any, index: number) => {
        console.log(`${index + 1}. ID: ${book.id}, –ê–≤—Ç–æ—Ä: "${book.author}", –ù–∞–∑–≤–∞–Ω–∏–µ: "${book.title}", Telegram ID: ${book.telegram_post_id || '–ù–µ—Ç'}`);
      });
      
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      console.log(`\n‚ö†Ô∏è  –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${emptyMetadataBooks.length} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.`);
      console.log('–í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...');
      
      // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      console.log('\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
      
      // @ts-ignore
      const { error: deleteError } = await supabase
        .from('books')
        .delete()
        .or('author.eq.,title.eq.');
      
      if (deleteError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥:', deleteError.message);
        return;
      }
      
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${emptyMetadataBooks.length} –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.`);
    } else {
      console.log('‚úÖ –ù–µ—Ç –∫–Ω–∏–≥ —Å –ø—É—Å—Ç—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanupEmptyMetadataBooks();