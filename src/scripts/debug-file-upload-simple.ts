/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import bigInt from 'big-integer';
import { uploadFileToStorage, getSupabaseAdmin } from '../lib/supabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function debugFileUploadSimple() {
  console.log('üîç –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...\n');
  
  let telegramClient: TelegramClient | null = null;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiId = process.env.TELEGRAM_API_ID;
    const apiHash = process.env.TELEGRAM_API_HASH;
    const sessionString = process.env.TELEGRAM_SESSION;
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!apiId || !apiHash || !sessionString || !supabaseUrl || !supabaseServiceRoleKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram...');
    const session = new StringSession(sessionString);
    telegramClient = new TelegramClient(session, parseInt(apiId), apiHash, {
      connectionRetries: 5,
    });
    
    await telegramClient.connect();
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω\n');
    
    // –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Ñ–∞–π–ª–æ–≤
    const channelId = 1515159552; // ID –¥–ª—è "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"
    console.log(`üÜî –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: –ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏ (ID: ${channelId})\n`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
    const channelEntity = await telegramClient.getEntity(new Api.PeerChannel({ channelId: bigInt(channelId) }));
    console.log(`‚úÖ –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${(channelEntity as any).title}\n`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log('üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞...');
    const messages = await telegramClient.getMessages(channelEntity, { limit: 3 });
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);
    
    // –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
    let fileMessage = null;
    for (const msg of messages) {
      if ((msg as any).media && (msg as any).media.className === 'MessageMediaDocument') {
        fileMessage = msg;
        break;
      }
    }
    
    if (!fileMessage) {
      console.log('‚ùå –í –ø–µ—Ä–≤—ã—Ö 3 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º: ID ${fileMessage.id}\n`);
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    const document = (fileMessage as any).media.document;
    const filenameAttr = document.attributes?.find((attr: any) => attr.className === 'DocumentAttributeFilename');
    const originalFilename = filenameAttr?.fileName || `book_${fileMessage.id}`;
    const fileExtension = path.extname(originalFilename).toLowerCase();
    
    console.log(`üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ${originalFilename}`);
    console.log(`üìÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${fileExtension}`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    const allowedExtensions = ['.fb2', '.zip'];
    if (!allowedExtensions.includes(fileExtension)) {
      console.log(`‚ö†Ô∏è  –¢–∏–ø —Ñ–∞–π–ª–∞ ${fileExtension} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: ${allowedExtensions.join(', ')}`);
      return;
    }
    console.log(`‚úÖ –¢–∏–ø —Ñ–∞–π–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω: ${fileExtension}\n`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –≤–º–µ—Å—Ç–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –≤–º–µ—Å—Ç–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞...');
    const testBuffer = Buffer.from('–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏', 'utf-8');
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω (${testBuffer.length} –±–∞–π—Ç)\n`);
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <MessageID>.zip (–∏–ª–∏ .fb2)
    const storageFilename = `${fileMessage.id}${fileExtension}`;
    console.log(`üíæ –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${storageFilename}`);
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME-—Ç–∏–ø–∞
    const mimeTypes: Record<string, string> = {
      '.fb2': 'application/fb2+xml',
      '.zip': 'application/zip',
    };
    const mimeType = mimeTypes[fileExtension] || 'application/octet-stream';
    console.log(`üìÑ MIME-—Ç–∏–ø: ${mimeType}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Supabase Admin
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Supabase Admin...');
    const admin = getSupabaseAdmin();
    if (!admin) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Supabase Admin');
      return;
    }
    console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ Supabase Admin –ø–æ–ª—É—á–µ–Ω\n');
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage (bucket 'books')
    console.log('‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage...');
    try {
      const uploadResult = await uploadFileToStorage('books', storageFilename, testBuffer, mimeType);
      console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage:`, uploadResult);
    } catch (uploadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', uploadError);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤ Storage
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤ Storage...');
    try {
      const { data: fileData, error: fileError } = await admin
        .storage
        .from('books')
        .download(storageFilename);
      
      if (fileError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', fileError);
      } else if (fileData) {
        console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage (${fileData.size} –±–∞–π—Ç)`);
        console.log(`‚úÖ –ò–º—è —Ñ–∞–π–ª–∞ –≤ Storage: ${storageFilename}`);
      }
    } catch (downloadError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', downloadError);
    }
    
    console.log('\n‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ª–∞–¥–∫–∏:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    if (telegramClient) {
      try {
        await telegramClient.disconnect();
        console.log('\nüßπ Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
      } catch (disconnectError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', disconnectError);
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å GramJS
    console.log('\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞...');
    setTimeout(() => {
      process.exit(0);
    }, 1000);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
debugFileUploadSimple().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});