import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({ path: resolve(__dirname, '../../.env') });

import { serverSupabase } from '../lib/serverSupabase';

interface Book {
    id: string;
    title: string;
    author: string;
    telegram_post_id: string | null;
}

async function analyzeBookDuplicates() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥...');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { data: allBooks, error } = await serverSupabase
            .from('books')
            .select('id, title, author, telegram_post_id');
            
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', error);
            return;
        }
        
        console.log(`üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${allBooks?.length || 0}`);
        
        if (!allBooks || allBooks.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
        const booksByTitleAuthor = new Map<string, Book[]>();
        
        for (const book of allBooks) {
            const typedBook = book as Book;
            const key = `${typedBook.title}::${typedBook.author}`;
            if (!booksByTitleAuthor.has(key)) {
                booksByTitleAuthor.set(key, []);
            }
            booksByTitleAuthor.get(key)?.push(typedBook);
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        let duplicateCount = 0;
        let duplicatesWithDifferentPosts = 0;
        
        for (const [key, books] of booksByTitleAuthor.entries()) {
            if (books.length > 1) {
                duplicateCount += books.length - 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                console.log(`\nüìñ –î—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è: ${key}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–Ω—ã–µ telegram_post_id
                const postIds = books.map(book => book.telegram_post_id).filter(id => id !== null);
                const uniquePostIds = new Set(postIds);
                
                if (uniquePostIds.size > 1) {
                    duplicatesWithDifferentPosts++;
                    console.log(`  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–Ω—ã–µ telegram_post_id: ${Array.from(uniquePostIds).join(', ')}`);
                }
                
                for (const book of books) {
                    console.log(`  - ID: ${book.id}, Telegram post: ${book.telegram_post_id || 'null'}`);
                }
            }
        }
        
        console.log(`\nüìä –°–≤–æ–¥–∫–∞:`);
        console.log(`   –í—Å–µ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateCount}`);
        console.log(`   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ telegram_post_id: ${duplicatesWithDifferentPosts}`);
        
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
analyzeBookDuplicates().catch(console.error);