import { config } from 'dotenv';
import { resolve } from 'path';
import { getSupabaseAdmin } from '../lib/supabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

async function checkClearedFields() {
  try {
    console.log('üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É –ø–æ–ª–µ–π —É —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase: any = getSupabaseAdmin();
    if (!supabase) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥
    const { data: books, error } = await supabase
      .from('books')
      .select('id, title, author, file_url, file_size, file_format, telegram_file_id')
      .limit(5);
    
    if (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: ${error.message}`);
    }
    
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º ${books.length} –∫–Ω–∏–≥:`);
    
    for (const book of books) {
      console.log(`\n–ö–Ω–∏–≥–∞: ${book.author} - ${book.title}`);
      console.log(`  file_url: ${book.file_url === null ? '–æ—á–∏—â–µ–Ω–æ' : '–æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ'}`);
      console.log(`  file_size: ${book.file_size === null ? '–æ—á–∏—â–µ–Ω–æ' : '–æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ'}`);
      console.log(`  file_format: ${book.file_format === null ? '–æ—á–∏—â–µ–Ω–æ' : '–æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ'}`);
      console.log(`  telegram_file_id: ${book.telegram_file_id === null ? '–æ—á–∏—â–µ–Ω–æ' : '–æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ'}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π:', error);
  }
}

checkClearedFields();