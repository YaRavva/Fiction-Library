import { taskManager } from '../lib/task-manager';

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API endpoint'–∞ /api/admin/download-files
 */
async function testApiEndpoint() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ API endpoint\'–∞');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
  const operationId = `test-api-${Date.now()}`;
  console.log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å ID: ${operationId}`);
  
  // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ taskManager (–∫–∞–∫ –≤ API endpoint'–µ POST)
  taskManager.createTask(operationId);
  console.log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞`);
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É GET endpoint'–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API endpoint...`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–∞–∫ –≤ API endpoint'–µ GET)
  const taskStatus = taskManager.getTaskStatus(operationId);
  if (!taskStatus) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ API: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (Operation not found)`);
    return;
  }
  console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ API endpoint:`, taskStatus.status);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
  taskManager.updateTaskStatus(operationId, 'running', '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å');
  console.log(`üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "running"`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API endpoint
  const updatedTaskStatus = taskManager.getTaskStatus(operationId);
  if (!updatedTaskStatus) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ API: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (Operation not found)`);
    return;
  }
  console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API endpoint:`, updatedTaskStatus.status);
  
  // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
  taskManager.updateTaskStatus(operationId, 'completed', '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API endpoint
  const finalTaskStatus = taskManager.getTaskStatus(operationId);
  if (!finalTaskStatus) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ API: –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Operation not found)`);
    return;
  }
  console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API endpoint:`, finalTaskStatus.status);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ–π
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞—è —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–µ–π...`);
  const nonExistentTask = taskManager.getTaskStatus('non-existent-task-id');
  if (!nonExistentTask) {
    console.log(`‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è undefined –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏`);
  } else {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –î–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ`);
  }
  
  console.log('\nüèÅ –¢–µ—Å—Ç API endpoint\'–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testApiEndpoint().catch(console.error);
}