/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º offsetId
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';
import { TelegramSyncService } from '../lib/telegram/sync';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function testOffsetProcessing() {
  console.log('üîç –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º offsetId\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
    const syncService = await TelegramSyncService.getInstance();
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω\n');
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ telegram_processed_messages
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    const { data: lastProcessed, error: lastProcessedError } = await supabase
      .from('telegram_processed_messages')
      .select('message_id')
      .order('processed_at', { ascending: false })
      .limit(1);
    
    if (lastProcessedError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', lastProcessedError.message);
      return;
    }
    
    let lastMessageId: number | null = null;
    if (lastProcessed && lastProcessed.length > 0) {
      const lastMessage = lastProcessed[0];
      lastMessageId = parseInt(lastMessage.message_id, 10);
      console.log(`‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${lastMessageId}`);
    } else {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç —Ä–∞–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤ —Å –ª–∏–º–∏—Ç–æ–º 3
    console.log('\nüöÄ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ 3 —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º offsetId...');
    const results = await syncService.downloadAndProcessFilesDirectly(3);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
    console.log(`   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${results.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–º–µ—é—Ç ID –º–µ–Ω—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ (—Ç–∞–∫ –∫–∞–∫ –≤ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
    for (const result of results) {
      console.log(`   - Message ID: ${result.messageId}`);
      console.log(`     –£—Å–ø–µ—à–Ω–æ: ${result.success ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log(`     –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped ? '–î–∞' : '–ù–µ—Ç'}`);
      if (result.filename) console.log(`     –ò–º—è —Ñ–∞–π–ª–∞: ${result.filename}`);
      if (result.error) console.log(`     –û—à–∏–±–∫–∞: ${result.error}`);
      if (result.reason) console.log(`     –ü—Ä–∏—á–∏–Ω–∞: ${result.reason}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
      if (lastMessageId && typeof result.messageId === 'number') {
        if (result.messageId < lastMessageId) {
          console.log(`     –ü–æ—Ä—è–¥–æ–∫: ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (ID –º–µ–Ω—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ)`);
        } else {
          console.log(`     –ü–æ—Ä—è–¥–æ–∫: ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (ID –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º—É)`);
        }
      }
      console.log('');
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º offsetId –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
testOffsetProcessing().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});