import { config } from 'dotenv';
import { TelegramSyncService } from '../lib/telegram/sync';
import { MetadataParser } from '../lib/telegram/parser';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config();

async function analyzeSkippedMessages() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    if (!syncService['telegramClient']) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Telegram –∫–ª–∏–µ–Ω—Ç—É');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await syncService['telegramClient'].getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    
    console.log(`üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: ${(channel as { title?: string }).title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('\nüì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...');
    const messages = await syncService['telegramClient'].getMessages(channelId, 50) as unknown[];
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    let validBookMessages = 0;
    let invalidBookMessages = 0;
    let noTextMessages = 0;
    let emptyTextMessages = 0;
    
    for (const msg of messages) {
      const anyMsg = msg as { [key: string]: unknown };
      console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ ID: ${anyMsg.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
      if (!(msg as { text?: string }).text) {
        console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞`);
        noTextMessages++;
        continue;
      }
      
      const text = (msg as { text: string }).text;
      if (text.trim() === '') {
        console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç`);
        emptyTextMessages++;
        continue;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      try {
        const metadata = MetadataParser.parseMessage(text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
        if (metadata.title && metadata.author) {
          console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: ${metadata.author} - ${metadata.title}`);
          validBookMessages++;
        } else {
          console.log(`  ‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${metadata.title || '–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'} / ${metadata.author || '–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∞'}`);
          invalidBookMessages++;
        }
      } catch (parseError) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${(parseError as Error).message}`);
        invalidBookMessages++;
      }
      
      console.log('');
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    console.log('üìä –°–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(`   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥: ${validBookMessages}`);
    console.log(`   ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: ${invalidBookMessages}`);
    console.log(`   ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: ${noTextMessages}`);
    console.log(`   ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: ${emptyTextMessages}`);
    console.log(`   üìö –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
    const syncService = await TelegramSyncService.getInstance();
    await syncService.shutdown();
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
if (require.main === module) {
  analyzeSkippedMessages();
}