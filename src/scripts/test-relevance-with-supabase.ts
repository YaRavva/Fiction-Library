import { MetadataExtractionService } from '../lib/telegram/metadata-extraction-service';
import { serverSupabase } from '../lib/serverSupabase';
import dotenv from 'dotenv';

dotenv.config();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–Ω–∏–≥–∏
interface Book {
  id: string;
  title: string;
  author: string;
  file_url: string | null;
}

async function testRelevanceWithSupabase() {
  console.log('üîç Testing relevance algorithm with real data from Supabase...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìö Getting test files from database...');
    const { data: testFiles, error: filesError } = await serverSupabase
      .from('books')
      .select('file_url, title, author')
      .not('file_url', 'is', null)
      .limit(5);

    if (filesError) {
      console.error('‚ùå Error getting test files:', filesError);
      return;
    }

    if (!testFiles || testFiles.length === 0) {
      console.log('‚ö†Ô∏è  No test files found in database');
      return;
    }

    console.log(`‚úÖ Found ${testFiles.length} test files`);

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    for (let i = 0; i < testFiles.length; i++) {
      const file = testFiles[i] as Book;
      console.log(`\n=== Test ${i + 1} ===`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
      const fileName = file.file_url ? file.file_url.split('/').pop() || '' : '';
      console.log(`üìÑ Original file name from Telegram: ${fileName}`);
      console.log(`üìò Book title: ${file.title}`);
      console.log(`‚úçÔ∏è  Book author: ${file.author}`);
      
      if (!fileName) {
        console.log('‚ö†Ô∏è  File name not available, skipping...');
        continue;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      const { author: extractedAuthor, title: extractedTitle } = 
        MetadataExtractionService.extractMetadataFromFilename(fileName);
      
      console.log(`üîç Extracted metadata: "${extractedTitle}" by ${extractedAuthor}`);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      const searchTerms = MetadataExtractionService.extractSearchTerms(fileName);
      console.log(`üîç Search terms: [${searchTerms.join(', ')}]`);
      
      // –ò—â–µ–º –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —ç—Ç–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
      console.log('üîé Searching for matching books in database...');
      
      // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const { data: titleMatches, error: titleError } = await serverSupabase
        .from('books')
        .select('id, title, author')
        .ilike('title', `%${extractedTitle}%`)
        .limit(10);
      
      if (titleError) {
        console.error('‚ùå Error searching by title:', titleError);
        continue;
      }
      
      // –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É
      const { data: authorMatches, error: authorError } = await serverSupabase
        .from('books')
        .select('id, title, author')
        .ilike('author', `%${extractedAuthor}%`)
        .limit(10);
      
      if (authorError) {
        console.error('‚ùå Error searching by author:', authorError);
        continue;
      }
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const allMatches = [...(titleMatches || []), ...(authorMatches || [])];
      const uniqueMatches = allMatches.filter((bookItem: Book, index, self) => 
        index === self.findIndex((b: Book) => b.id === bookItem.id)
      );
      
      console.log(`üìö Found ${uniqueMatches.length} potential matches`);
      
      if (uniqueMatches.length === 0) {
        console.log('‚ö†Ô∏è  No matching books found');
        continue;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      const bestMatch = MetadataExtractionService.selectBestMatch(
        uniqueMatches,
        searchTerms,
        extractedTitle,
        extractedAuthor
      );
      
      if (bestMatch) {
        console.log(`‚úÖ Best book match selected: "${(bestMatch as Book).title}" by ${(bestMatch as Book).author}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç –ª—É—á—à–µ–≥–æ –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        // (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç —á–∞—Å—Ç—å—é –ª–æ–≥–∏–∫–∏ selectBestMatch)
        console.log(`üìä Score of the best match: Calculated by algorithm`);
      } else {
        console.log('‚ö†Ô∏è  No suitable match found by relevance algorithm');
      }
    }
    
    console.log('\n‚úÖ Testing completed');
  } catch (error) {
    console.error('‚ùå Error during testing:', error);
  }
}

// Run the test
testRelevanceWithSupabase().catch(console.error);