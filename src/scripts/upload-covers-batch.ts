#!/usr/bin/env tsx

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import { uploadFile } from '../lib/cloud-ru-s3-service';
import { Buffer } from 'buffer';
import { MetadataParser } from '../lib/telegram/parser';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞ –≤ Cloud.ru S3 —Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ Telegram –ø–∞—Ä—Ç–∏—è–º–∏ –ø–æ 1000 —à—Ç—É–∫
 */

async function uploadCoversBatch() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–µ–∫ –∫–Ω–∏–≥ –∏–∑ Telegram-–∫–∞–Ω–∞–ª–∞ –≤ Cloud.ru S3 (–ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  const telegramApiId = process.env.TELEGRAM_API_ID;
  const telegramApiHash = process.env.TELEGRAM_API_HASH;
  const telegramSession = process.env.TELEGRAM_SESSION;
  const telegramMetadataChannel = process.env.TELEGRAM_METADATA_CHANNEL;
  const coversBucketName = process.env.S3_COVERS_BUCKET_NAME || 'fiction-library-covers';
  const batchSize = 1000; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram
  
  if (!supabaseUrl || !supabaseServiceKey || !telegramApiId || !telegramApiHash || !telegramSession || !telegramMetadataChannel) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
    console.log('- NEXT_PUBLIC_SUPABASE_URL');
    console.log('- SUPABASE_SERVICE_ROLE_KEY');
    console.log('- TELEGRAM_API_ID');
    console.log('- TELEGRAM_API_HASH');
    console.log('- TELEGRAM_SESSION');
    console.log('- TELEGRAM_METADATA_CHANNEL');
    console.log('- S3_COVERS_BUCKET_NAME (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: fiction-library-covers)');
    return;
  }
  
  console.log(`\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫:`);
  console.log(`Supabase URL: ${supabaseUrl}`);
  console.log(`Telegram –∫–∞–Ω–∞–ª: ${telegramMetadataChannel}`);
  console.log(`Cloud.ru Bucket –¥–ª—è –æ–±–ª–æ–∂–µ–∫: ${coversBucketName}`);
  console.log(`–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${batchSize} –ø–æ—Å—Ç–æ–≤`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
  const supabase = createClient(supabaseUrl, supabaseServiceKey);
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞
    console.log('\nüì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    const client = new TelegramClient(
      new StringSession(telegramSession),
      parseInt(telegramApiId),
      telegramApiHash,
      { connectionRetries: 5 }
    );
    
    await client.start({
      botAuthToken: process.env.BOT_TOKEN || '',
    });
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
    console.log('\nüì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ...');
    const channel = await client.getEntity(telegramMetadataChannel);
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
    console.log(`‚úÖ –ö–∞–Ω–∞–ª: ${(channel as any).title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (ID: ${channelId})`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìö –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, cover_url, telegram_post_id')
      .order('created_at', { ascending: true });
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥:', booksError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –æ–±–ª–æ–∂–µ–∫
    const booksWithoutCovers = books.filter(book => !book.cover_url);
    console.log(`üìã –ö–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫: ${booksWithoutCovers.length}`);
    
    if (booksWithoutCovers.length === 0) {
      console.log('‚ÑπÔ∏è  –í—Å–µ –∫–Ω–∏–≥–∏ —É–∂–µ –∏–º–µ—é—Ç –æ–±–ª–æ–∂–∫–∏');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫–Ω–∏–≥ –ø–æ telegram_post_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const booksMap = new Map<string, any>();
    booksWithoutCovers.forEach(book => {
      if (book.telegram_post_id) {
        booksMap.set(book.telegram_post_id, book);
      }
    });
    console.log(`üìä –ö–∞—Ä—Ç–∞ –∫–Ω–∏–≥ —Å–æ–∑–¥–∞–Ω–∞: ${booksMap.size} –∑–∞–ø–∏—Å–µ–π`);
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let processedCount = 0;
    let uploadedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    let notBookCount = 0;
    let offsetId: number | undefined = undefined;
    
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–µ–∫ (–ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –ø–∞—Ä—Ç–∏—è–º–∏
    while (true) {
      console.log(`\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram (offsetId: ${offsetId || '–Ω–∞—á–∞–ª–æ'})...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
      const messages = await client.getMessages(channel, {
        limit: batchSize,
        offsetId: offsetId
      }) as any[];
      
      if (messages.length === 0) {
        console.log('üèÅ –ë–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        break;
      }
      
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–∫–µ—Ç–µ
      for (let i = 0; i < messages.length; i++) {
        const msg = messages[i];
        const messageId = msg.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º telegram_post_id
        const book = booksMap.get(String(messageId));
        if (!book) {
          // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–Ω–∏–≥–æ–π –±–µ–∑ –æ–±–ª–æ–∂–∫–∏
          continue;
        }
        
        const progress = `${processedCount + 1}/${booksWithoutCovers.length}`;
        console.log(`\n[${progress}] ${book.author} - ${book.title} | üìã Telegram ID: ${messageId}`);
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–∏–≥–æ–π
          if (!msg.text) {
            console.log(`  ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞`);
            notBookCount++;
            processedCount++;
            continue;
          }
          
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–Ω–∏–≥—É
            const metadata = MetadataParser.parseMessage(msg.text);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if (!metadata.author || !metadata.title) {
              console.log(`  ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–∏–≥–æ–π (–Ω–µ—Ç –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è)`);
              notBookCount++;
              processedCount++;
              continue;
            }
            
            console.log(`  üìö –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: ${metadata.author} - ${metadata.title}`);
          } catch (parseError) {
            console.log(`  ‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–∏–≥–æ–π (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞)`);
            notBookCount++;
            processedCount++;
            continue;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
          if (!msg.media) {
            console.log(`  ‚ö†Ô∏è  –ù–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏`);
            skippedCount++;
            processedCount++;
            continue;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ
          if (!(msg.media instanceof Api.MessageMediaPhoto)) {
            console.log(`  ‚ö†Ô∏è  –í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–æ—Ç–æ`);
            skippedCount++;
            processedCount++;
            continue;
          }
          
          // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
          console.log(`  üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏...`);
          const buffer = await client.downloadMedia(msg, {
            outputFile: new Buffer(0),
          });
          
          if (!buffer) {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏`);
            errorCount++;
            processedCount++;
            continue;
          }
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Buffer, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫
          let coverBuffer: Buffer;
          if (buffer instanceof Uint8Array) {
            coverBuffer = Buffer.from(buffer);
          } else {
            coverBuffer = buffer as unknown as Buffer;
          }
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
          const fileExtension = '.jpg'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é JPG –¥–ª—è —Ñ–æ—Ç–æ –∏–∑ Telegram
          const fileName = `${book.id}${fileExtension}`;
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É –≤ Cloud.ru S3
          console.log(`  ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏ –≤ Cloud.ru S3...`);
          const uploadResult = await uploadFile(coversBucketName, fileName, coverBuffer);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          const newCoverUrl = `https://s3.cloud.ru/${coversBucketName}/${fileName}`;
          
          const { error: updateError } = await supabase
            .from('books')
            .update({
              cover_url: newCoverUrl,
              updated_at: new Date().toISOString()
            })
            .eq('id', book.id);
          
          if (updateError) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, updateError.message);
            errorCount++;
            processedCount++;
            continue;
          }
          
          uploadedCount++;
          console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∑–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
          processedCount++;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          await new Promise(resolve => setTimeout(resolve, 100));
          
        } catch (error: any) {
          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏:`, error.message);
          errorCount++;
          processedCount++;
        }
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
      const lastMessage = messages[messages.length - 1];
      if (lastMessage.id) {
        offsetId = lastMessage.id;
      } else {
        break;
      }
      
      // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      console.log(`\nüìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${booksWithoutCovers.length}`);
      console.log(`  üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫: ${uploadedCount}`);
      console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
      console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
      console.log(`  üìö –ù–µ –∫–Ω–∏–≥–∏: ${notBookCount}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      console.log(`\n‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...`);
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫:');
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount} –∫–Ω–∏–≥`);
    console.log(`  üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫: ${uploadedCount} —à—Ç.`);
    console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –∫–Ω–∏–≥`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —à—Ç.`);
    console.log(`  üìö –ù–µ –∫–Ω–∏–≥–∏: ${notBookCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log(`  üìö –í—Å–µ–≥–æ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫: ${booksWithoutCovers.length} –∫–Ω–∏–≥`);
    
    if (errorCount === 0) {
      console.log('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } else {
      console.log(`\n‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å ${errorCount} –æ—à–∏–±–∫–∞–º–∏`);
    }
    
  } catch (error: any) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫:', error.message);
    console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫
if (require.main === module) {
  uploadCoversBatch()
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { uploadCoversBatch };