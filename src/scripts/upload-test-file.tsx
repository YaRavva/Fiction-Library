// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import dotenv from 'dotenv';
dotenv.config();

import { TelegramSyncService } from '../lib/telegram/sync';
import { getSupabaseAdmin, upsertBookRecord } from '../lib/supabase';
import * as fs from 'fs';
import * as path from 'path';

async function createTestZipFile() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª
    const testContent = '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏';
    const buffer = Buffer.from(testContent, 'utf-8');
    return buffer;
}

async function uploadTestFile() {
    console.log('=== –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê ===\n');
    
    try {
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        console.log('1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª...');
        const fileBuffer = await createTestZipFile();
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º ${fileBuffer.length} –±–∞–π—Ç`);
        
        // 2. –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å —Ñ–∞–π–ª–æ–º
        const mockMessage: any = {
            id: 999999, // –¢–µ—Å—Ç–æ–≤—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
            document: {
                attributes: [
                    {
                        className: 'DocumentAttributeFilename',
                        fileName: '–í–∏–ª–º–∞ –ö–∞–¥–ª–µ—á–∫–æ–≤–∞ - –ú–∏—Ü–µ–ª–∏–π.zip'
                    }
                ]
            }
        };
        
        // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        let filenameCandidate = 'book_default.zip';
        if (mockMessage.document && mockMessage.document.attributes) {
            const attrFileName = mockMessage.document.attributes.find((attr: any) => 
                attr.className === 'DocumentAttributeFilename'
            );
            if (attrFileName && attrFileName.fileName) {
                filenameCandidate = attrFileName.fileName;
            }
        }
        
        console.log(`2. –ò–º—è —Ñ–∞–π–ª–∞: ${filenameCandidate}`);
        
        // 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const metadata = TelegramSyncService.extractMetadataFromFilename(filenameCandidate);
        console.log(`3. –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`);
        console.log(`   –ê–≤—Ç–æ—Ä: "${metadata.author}"`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: "${metadata.title}"`);
        
        // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–π–ª–∞
        const ext = path.extname(filenameCandidate).toLowerCase();
        const mimeTypes: Record<string, string> = {
            '.fb2': 'application/fb2+xml',
            '.zip': 'application/zip',
        };
        const allowedFormats: Record<string, string> = {
            '.fb2': 'fb2',
            '.zip': 'zip',
        };
        
        const mime = mimeTypes[ext] || 'application/octet-stream';
        const fileFormat = allowedFormats[ext] || 'fb2';
        const storageKey = `${mockMessage.id}${ext}`;
        
        console.log(`4. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–π–ª–∞:`);
        console.log(`   –§–æ—Ä–º–∞—Ç: ${fileFormat}`);
        console.log(`   MIME-—Ç–∏–ø: ${mime}`);
        console.log(`   –ö–ª—é—á Storage: ${storageKey}`);
        
        // 6. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
        console.log(`5. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage...`);
        const admin = getSupabaseAdmin();
        if (!admin) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Supabase Admin');
        }
        
        const { data: uploadData, error: uploadError } = await admin.storage
            .from('books')
            .upload(storageKey, fileBuffer, {
                contentType: mime,
                upsert: true,
            });
        
        if (uploadError) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${uploadError.message}`);
        }
        
        console.log(`   ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage`);
        
        // 7. –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–∞–π–ª–∞
        const fileUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/books/${encodeURIComponent(storageKey)}`;
        console.log(`6. URL —Ñ–∞–π–ª–∞: ${fileUrl}`);
        
        // 8. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–Ω–∏–≥–µ
        console.log(`7. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫ –∫–Ω–∏–≥–µ...`);
        const bookRecord: any = {
            title: metadata.title,
            author: metadata.author,
            file_url: fileUrl,
            file_size: fileBuffer.length,
            file_format: fileFormat,
            telegram_file_id: String(mockMessage.id),
            storage_path: storageKey,
            updated_at: new Date().toISOString()
        };
        
        const result = await upsertBookRecord(bookRecord);
        if (result) {
            console.log(`   ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ!`);
            console.log(`   ID –∫–Ω–∏–≥–∏: ${result.id}`);
            console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: "${result.title}"`);
            console.log(`   –ê–≤—Ç–æ—Ä: ${result.author}`);
        } else {
            console.log(`   ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ñ–∞–π–ª –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω`);
            
            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage, –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            console.log(`   üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage...`);
            await admin.storage.from('books').remove([storageKey]);
            console.log(`   ‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ Storage`);
        }
        
        console.log('\n=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    }
}

uploadTestFile().catch(console.error);