#!/usr/bin/env tsx

import 'dotenv/config';
import { 
  S3Client, 
  PutObjectCommand, 
  GetObjectCommand,
  ListBucketsCommand
} from '@aws-sdk/client-s3';
import { Buffer } from 'buffer';

async function testUploadToCloudRu() {
  console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç Cloud.ru ===');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY || !process.env.AWS_REGION || !process.env.S3_BUCKET_NAME) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('AWS_ACCESS_KEY_ID:', process.env.AWS_ACCESS_KEY_ID ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('AWS_SECRET_ACCESS_KEY:', process.env.AWS_SECRET_ACCESS_KEY ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('AWS_REGION:', process.env.AWS_REGION ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('S3_BUCKET_NAME:', process.env.S3_BUCKET_NAME ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return;
  }
  
  // –†–∞–∑–±–æ—Ä –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Cloud.ru
  // –§–æ—Ä–º–∞—Ç: tenantId:keyId
  const accessKeyParts = process.env.AWS_ACCESS_KEY_ID.split(':');
  if (accessKeyParts.length !== 2) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç AWS_ACCESS_KEY_ID. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "tenantId:keyId"');
    return;
  }
  
  const [tenantId, keyId] = accessKeyParts;
  console.log(`Tenant ID: ${tenantId}`);
  console.log(`Key ID: ${keyId}`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ S3 –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è Cloud.ru
  const s3Client = new S3Client({
    endpoint: 'https://s3.cloud.ru',
    region: process.env.AWS_REGION,
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
    },
  });
  
  const bucketName = process.env.S3_BUCKET_NAME;
  console.log(`–ë–∞–∫–µ—Ç: ${bucketName}`);
  console.log(`–†–µ–≥–∏–æ–Ω: ${process.env.AWS_REGION}`);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–∫–µ—Ç–æ–≤
    console.log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–∞–∫–µ—Ç–æ–≤...');
    const listBucketsCommand = new ListBucketsCommand({});
    const listResponse = await s3Client.send(listBucketsCommand);
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –±–∞–∫–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
    
    if (listResponse.Buckets) {
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∫–µ—Ç—ã:');
      listResponse.Buckets.forEach(bucket => {
        console.log(`  - ${bucket.Name} (—Å–æ–∑–¥–∞–Ω: ${bucket.CreationDate})`);
      });
    }
    
    // 2. –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    console.log('\n2. –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
    const testFileName = `test-upload-${Date.now()}.txt`;
    const testContent = Buffer.from('–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloud.ru S3\n–î–∞—Ç–∞: ' + new Date().toISOString(), 'utf-8');
    
    const putCommand = new PutObjectCommand({
      Bucket: bucketName,
      Key: testFileName,
      Body: testContent,
      ContentType: 'text/plain',
    });
    
    const uploadResponse = await s3Client.send(putCommand);
    console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!');
    console.log('ETag:', uploadResponse.ETag);
    
    // 3. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...');
    const getCommand = new GetObjectCommand({
      Bucket: bucketName,
      Key: testFileName,
    });
    
    const getResponse = await s3Client.send(getCommand);
    console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É
    if (getResponse.Body) {
      const bodyContents = await streamToString(getResponse.Body);
      console.log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:');
      console.log(bodyContents);
    }
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error: any) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.name);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error.$metadata) {
      console.error('HTTP Status:', error.$metadata.httpStatusCode);
      console.error('Request ID:', error.$metadata.requestId);
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('\n–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ReadableStream –≤ —Å—Ç—Ä–æ–∫—É
async function streamToString(stream: any): Promise<string> {
  const chunks = [];
  
  if (stream instanceof ReadableStream) {
    const reader = stream.getReader();
    let done = false;
    
    while (!done) {
      const { value, done: readerDone } = await reader.read();
      done = readerDone;
      if (value) {
        chunks.push(value);
      }
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Uint8Array –≤ —Å—Ç—Ä–æ–∫—É
    const decoder = new TextDecoder();
    return chunks.map(chunk => decoder.decode(chunk)).join('');
  } else if (typeof stream === 'object' && stream !== null) {
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ—Ç–æ–∫–æ–≤
    return new Promise((resolve, reject) => {
      const chunks: Buffer[] = [];
      stream.on('data', (chunk: Buffer) => chunks.push(chunk));
      stream.on('error', reject);
      stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf-8')));
    });
  } else {
    return String(stream);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testUploadToCloudRu()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testUploadToCloudRu };