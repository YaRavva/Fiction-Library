// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import { config } from 'dotenv';
import { join } from 'path';
import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('  NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('  SUPABASE_SERVICE_ROLE_KEY:', supabaseKey || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function updateSeriesFromTelegram() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏—è—Ö –∏–∑ Telegram');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–∏–≥—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è - —Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ"
    const { data: book, error: bookError } = await supabase
      .from('books')
      .select('*')
      .eq('title', '—Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ')
      .eq('author', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è')
      .single();
    
    if (bookError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', bookError);
      return;
    }
    
    if (!book) {
      console.log('‚ùå –ö–Ω–∏–≥–∞ "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è - —Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:`);
    console.log(`- –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`);
    console.log(`- –ê–≤—Ç–æ—Ä: ${book.author}`);
    console.log(`- Telegram Post ID: ${book.telegram_post_id}`);
    console.log(`- Series ID: ${book.series_id || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞'}`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    const telegramClient = await TelegramService.getInstance();
    
    let updated = 0;
    let skipped = 0;
    let errors = 0;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –ø–æ ID
      const messageId = parseInt(book.telegram_post_id);
      console.log(`\nüì° –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –∏–∑ Telegram...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const channel = await telegramClient.getMetadataChannel();
      const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messages = await telegramClient.getMessages(channelId, 5, messageId) as unknown as { id?: number; text?: string }[];
      
      if (!messages || messages.length === 0) {
        console.log(`  ‚ÑπÔ∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Telegram`);
        skipped++;
      } else {
        // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ID
        const targetMessage = messages.find(msg => msg.id === messageId);
        if (!targetMessage) {
          console.log(`  ‚ÑπÔ∏è  –¢–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (Telegram –≤–µ—Ä–Ω—É–ª —Å–æ—Å–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)`);
          skipped++;
        } else if (!targetMessage.text) {
          console.log(`  ‚ÑπÔ∏è  –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞`);
          skipped++;
        } else {
          // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
          const metadata = MetadataParser.parseMessage(targetMessage.text);
          console.log(`  üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: ${metadata.books.length} –∫–Ω–∏–≥ –≤ —Å–æ—Å—Ç–∞–≤–µ`);
          
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∏
          if (metadata.author !== book.author || metadata.title !== book.title) {
            console.log(`  ‚ö†Ô∏è  –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:`);
            console.log(`      –ê–≤—Ç–æ—Ä –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: "${metadata.author}"`);
            console.log(`      –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: "${book.author}"`);
            console.log(`      –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: "${metadata.title}"`);
            console.log(`      –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: "${book.title}"`);
            console.log(`      –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è`);
            skipped++;
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–∞–≤
            if (!metadata.books || metadata.books.length === 0) {
              console.log(`  ‚ÑπÔ∏è  –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å–æ—Å—Ç–∞–≤–∞`);
              skipped++;
            } else {
              console.log(`  üìö –£ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–∞–≤ –∏–∑ ${metadata.books.length} –∫–Ω–∏–≥`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏ –∫–Ω–∏–≥–∞ –∫ —Å–µ—Ä–∏–∏
              if (book.series_id) {
                console.log(`  ‚ÑπÔ∏è  –ö–Ω–∏–≥–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏ ${book.series_id}, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–∞–≤...`);
                
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
                const { data: series, error: seriesError } = await supabase
                  .from('series')
                  .select('*')
                  .eq('id', book.series_id)
                  .single();
                
                if (seriesError) {
                  console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∏:`, seriesError);
                  errors++;
                } else {
                  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤
                  const currentComposition = series.series_composition || [];
                  console.log(`  üìä –¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –≤ –±–∞–∑–µ: ${currentComposition.length} –∫–Ω–∏–≥`);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–æ—Å—Ç–∞–≤
                  let compositionsMatch = true;
                  if (currentComposition.length !== metadata.books.length) {
                    compositionsMatch = false;
                  } else {
                    for (let i = 0; i < metadata.books.length; i++) {
                      const bookFromMessage = metadata.books[i];
                      const bookFromSeries = currentComposition[i];
                      if (bookFromMessage.title !== bookFromSeries.title || bookFromMessage.year !== bookFromSeries.year) {
                        compositionsMatch = false;
                        break;
                      }
                    }
                  }
                  
                  if (!compositionsMatch) {
                    console.log(`  ‚ö†Ô∏è  –°–æ—Å—Ç–∞–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏
                    const { error: updateError } = await supabase
                      .from('series')
                      .update({ 
                        series_composition: metadata.books,
                        title: metadata.title,
                        author: metadata.author,
                        description: metadata.description || '',
                        genres: metadata.genres.length > 0 ? metadata.genres : [],
                        tags: metadata.tags.length > 0 ? metadata.tags : [],
                        rating: metadata.rating || null
                      })
                      .eq('id', book.series_id);
                    
                    if (updateError) {
                      console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–∏–∏:`, updateError);
                      errors++;
                    } else {
                      console.log(`  ‚úÖ –°–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω`);
                      updated++;
                    }
                  } else {
                    console.log(`  ‚úÖ –°–æ—Å—Ç–∞–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
                    skipped++;
                  }
                }
              } else {
                console.log(`  üìö –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é...`);
                
                // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é
                const seriesData: any = {
                  title: book.title,
                  author: book.author,
                  description: metadata.description || book.description || '',
                  genres: metadata.genres.length > 0 ? metadata.genres : book.genres || [],
                  tags: metadata.tags.length > 0 ? metadata.tags : book.tags || [],
                  rating: metadata.rating || book.rating || null,
                  telegram_post_id: book.telegram_post_id,
                  created_at: new Date().toISOString(),
                  updated_at: new Date().toISOString(),
                  series_composition: metadata.books
                };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if (book.cover_url) {
                  seriesData.cover_url = book.cover_url;
                }
                
                const { data: insertedSeries, error: seriesError } = await supabase
                  .from('series')
                  .insert(seriesData)
                  .select()
                  .single();
                
                if (seriesError) {
                  console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏:`, seriesError);
                  errors++;
                } else {
                  const newSeriesId = (insertedSeries as any).id;
                  console.log(`  ‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newSeriesId}`);
                  
                  // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –∫ —Å–µ—Ä–∏–∏
                  const { error: updateError } = await supabase
                    .from('books')
                    .update({ series_id: newSeriesId })
                    .eq('id', book.id);
                  
                  if (updateError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–Ω–∏–≥–∏ –∫ —Å–µ—Ä–∏–∏:`, updateError);
                    errors++;
                  } else {
                    console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏`);
                    updated++;
                  }
                }
              }
            }
          }
        }
      }
    } catch (error) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏:`, error);
      errors++;
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É Telegram –∫–ª–∏–µ–Ω—Ç–∞
    if (typeof (telegramClient as unknown as { disconnect?: () => Promise<void> }).disconnect === 'function') {
      await (telegramClient as unknown as { disconnect: () => Promise<void> }).disconnect!();
    }
    
    console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`  - –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    console.log(`  - –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    console.log(`  - –û—à–∏–±–æ–∫: ${errors}`);
    
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateSeriesFromTelegram();