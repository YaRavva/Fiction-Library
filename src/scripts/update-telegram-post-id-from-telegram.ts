import { config } from 'dotenv';
import { resolve } from 'path';
import { TelegramSyncService } from '../lib/telegram/sync';
import { MetadataParser } from '../lib/telegram/parser';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

async function updateTelegramPostIdFromTelegram() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ telegram_post_id –∏–∑ Telegram...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const { getSupabaseAdmin } = await import('../lib/supabase');
    const supabase: any = getSupabaseAdmin();
    if (!supabase) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Telegram
    const syncService = await TelegramSyncService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø—É—Å—Ç—ã–º –∏–ª–∏ UNKNOWN telegram_post_id
    const { data: books, error: fetchError } = await supabase
      .from('books')
      .select('id, title, author')
      .or('telegram_post_id.is.null,telegram_post_id.eq.,telegram_post_id.eq.UNKNOWN')
      .limit(100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    if (fetchError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: ${fetchError.message}`);
    }
    
    if (!books || books.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${books.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await (syncService as any).telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
      (channel.id as { toString: () => string }).toString() : 
      String(channel.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000)
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram...');
    const messages: any[] = await (syncService as any).telegramClient.getMessages(channelId, 1000);
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram`);
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
    const messageMap = new Map<string, number>();
    
    for (const msg of messages) {
      const anyMsg = msg as unknown as { [key: string]: unknown };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (!(msg as { text?: string }).text) {
        continue;
      }
      
      // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const metadata = MetadataParser.parseMessage((msg as { text: string }).text);
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞
      const key = `${metadata.author}|${metadata.title}`;
      messageMap.set(key, anyMsg.id as number);
    }
    
    console.log(`üìä –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–∞ –∏–∑ ${messageMap.size} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let updatedCount = 0;
    let notFoundCount = 0;
    
    for (const book of books) {
      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞
      const key = `${book.author}|${book.title}`;
      
      // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞—Ä—Ç–µ
      const messageId = messageMap.get(key);
      
      if (messageId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
        const { error: updateError } = await supabase
          .from('books')
          .update({
            telegram_post_id: String(messageId)
          })
          .eq('id', book.id);
        
        if (updateError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ${book.id}: ${updateError.message}`);
        } else {
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å: ${book.author} - ${book.title} -> ${messageId}`);
          updatedCount++;
        }
      } else {
        console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è: ${book.author} - ${book.title}`);
        notFoundCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`  –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
    console.log(`  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${notFoundCount}`);
    console.log(`  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${books.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è telegram_post_id:', error);
  } finally {
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      console.log('üîí –°–∫—Ä–∏–ø—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    }, 1000);
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
if (require.main === module) {
  updateTelegramPostIdFromTelegram()
    .then(() => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        console.log('üîí –°–∫—Ä–∏–ø—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
      }, 1000);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setTimeout(() => {
        process.exit(1);
      }, 1000);
    });
}

export { updateTelegramPostIdFromTelegram };