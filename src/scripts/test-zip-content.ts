import JSZip from 'jszip';
import dotenv from 'dotenv';
import { putObject } from '../lib/s3-service';

dotenv.config();

async function testZipContent() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ZIP —Ñ–∞–π–ª–∞...');
    
    // URL —Ñ–∞–π–ª–∞ –≤ S3
    const fileUrl = 'https://fiction-library-1760461283197.s3.cloud.ru/4379.zip';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${fileUrl}`);
    const response = await fetch(fileUrl);
    
    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
      return;
    }
    
    const arrayBuffer = await response.arrayBuffer();
    console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –†–∞–∑–º–µ—Ä: ${arrayBuffer.byteLength} –±–∞–π—Ç`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ZIP –∞—Ä—Ö–∏–≤–æ–º
    const zip = new JSZip();
    console.log('üì¶ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å ZIP –∞—Ä—Ö–∏–≤...');
    
    try {
      const zipContent = await zip.loadAsync(arrayBuffer);
      console.log('‚úÖ ZIP –∞—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
      console.log('üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π):');
      let fileCount = 0;
      const fileContents: {name: string, content: string}[] = [];
      const filePromises: Promise<void>[] = [];
      
      zipContent.forEach((relativePath: string, zipEntry: JSZip.JSZipObject) => {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã macOS (–∫–∞–∫ –≤ —á–∏—Ç–∞–ª–∫–µ)
        if (!zipEntry.dir && 
            (relativePath.endsWith('.fb2') || relativePath.endsWith('.txt')) &&
            !relativePath.includes('__MACOSX/') &&
            !relativePath.includes('/._')) {
          fileCount++;
          console.log(`  üìÑ ${relativePath} (–±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω)`);
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          filePromises.push(
            zipEntry.async('text').then((content: string) => {
              fileContents.push({ name: relativePath, content });
              console.log(`    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${relativePath} (${content.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
            }).catch((error: any) => {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${relativePath}:`, error.message);
            })
          );
        } else if (!zipEntry.dir) {
          console.log(`  üìÑ ${relativePath} (–ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω)`);
        } else {
          console.log(`  üìÅ ${relativePath}/`);
        }
      });
      
      console.log(`üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${fileCount}`);
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
      await Promise.all(filePromises);
      
      console.log(`üìä –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fileContents.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
      if (fileContents.length > 0) {
        console.log('üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):');
        console.log(fileContents[0].content.substring(0, 200) + '...');
      }
      
    } catch (zipError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ ZIP –∞—Ä—Ö–∏–≤–∞:', zipError);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const firstBytes = new Uint8Array(arrayBuffer.slice(0, 100));
      console.log('üîç –ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç —Ñ–∞–π–ª–∞ (–≤ hex):');
      console.log(Array.from(firstBytes).map(b => b.toString(16).padStart(2, '0')).join(' '));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

testZipContent();