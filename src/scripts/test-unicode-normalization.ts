#!/usr/bin/env tsx

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Unicode
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∏ –∫–Ω–∏–≥
 */

async function testUnicodeNormalization() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Unicode...\n');

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–±–ª–µ–º–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    const testCases = [
        {
            filename: '–ê—Ä–≤–µ–Ω–¥–µ–π–ª_–ê–≤—Ç–æ—Ä.zip',
            bookTitle: '–ê—Ä–≤–µ–Ω–¥–µ–π–ª',
            bookAuthor: '–ê–≤—Ç–æ—Ä'
        },
        {
            filename: '–ê—Ä–≤–µ–Ω–¥–µ–∏ÃÜ–ª_–ê–≤—Ç–æ—Ä.zip', // NFD —Ñ–æ—Ä–º–∞
            bookTitle: '–ê—Ä–≤–µ–Ω–¥–µ–π–ª', // NFC —Ñ–æ—Ä–º–∞
            bookAuthor: '–ê–≤—Ç–æ—Ä'
        },
        {
            filename: '–ú–∏—Ü–µ–ª–∏–π_–ê—Ä–≤–µ–Ω–¥–µ–π–ª.zip',
            bookTitle: '–ê—Ä–≤–µ–Ω–¥–µ–π–ª',
            bookAuthor: '–ê–≤—Ç–æ—Ä'
        }
    ];

    console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:');
    testCases.forEach((testCase, index) => {
        console.log(`${index + 1}. –§–∞–π–ª: "${testCase.filename}"`);
        console.log(`   –ö–Ω–∏–≥–∞: "${testCase.bookTitle}" –∞–≤—Ç–æ—Ä–∞ ${testCase.bookAuthor}`);
        console.log(`   –î–ª–∏–Ω–∞ filename: ${testCase.filename.length}`);
        console.log(`   –î–ª–∏–Ω–∞ bookTitle: ${testCase.bookTitle.length}`);
        console.log('');
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:');
    testCases.forEach((testCase, index) => {
        const normalizedFilename = testCase.filename.normalize('NFC');
        const normalizedTitle = testCase.bookTitle.normalize('NFC');

        console.log(`${index + 1}. –ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:`);
        console.log(`   filename: "${normalizedFilename}" (–¥–ª–∏–Ω–∞: ${normalizedFilename.length})`);
        console.log(`   title: "${normalizedTitle}" (–¥–ª–∏–Ω–∞: ${normalizedTitle.length})`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        const filenameLower = normalizedFilename.toLowerCase();
        const titleLower = normalizedTitle.toLowerCase();

        console.log(`   –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:`);
        console.log(`   filename.includes(title): ${filenameLower.includes(titleLower.replace(/\s+/g, '_'))}`);

        console.log('');
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    console.log('üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:');

    for (const testCase of testCases) {
        console.log(`–¢–µ—Å—Ç: "${testCase.filename}" -> "${testCase.bookTitle}"`);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ findMatchingFile
        const filename = testCase.filename.normalize('NFC').toLowerCase();
        const bookTitle = testCase.bookTitle.normalize('NFC').toLowerCase();
        const bookAuthor = testCase.bookAuthor.normalize('NFC').toLowerCase();

        let score = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ (—Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º)
        if (filename.includes(bookTitle.replace(/\s+/g, '_'))) {
            score += 20;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (—Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º)
        if (filename.includes(bookAuthor.replace(/\s+/g, '_'))) {
            score += 20;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤
        const bookTitleWords = bookTitle.split(/\s+/).filter(word => word.length > 2);
        for (const word of bookTitleWords) {
            if (filename.includes(word)) {
                score += 5;
            }
        }

        console.log(`   –°—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: ${score}`);
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${score >= 25 ? '‚úÖ –ù–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
        console.log('');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–∫–∞–∫ –≤ file-service.ts)
    console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞:');

    const testFilenames = [
        '–ê—Ä–≤–µ–Ω–¥–µ–π–ª_–ê–≤—Ç–æ—Ä.zip',
        '–ê—Ä–≤–µ–Ω–¥–µ–∏ÃÜ–ª_–ê–≤—Ç–æ—Ä.zip',
        '–ú–∏—Ü–µ–ª–∏–π_–ê—Ä–≤–µ–Ω–¥–µ–π–ª.zip',
        '–¶–∏–∫–ª_–ê—Ä–≤–µ–Ω–¥–µ–π–ª_–ê–≤—Ç–æ—Ä.zip'
    ];

    for (const filename of testFilenames) {
        console.log(`–§–∞–π–ª: "${filename}"`);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º extractMetadataFromFilename
        const nameWithoutExt = filename.replace(/\.[^/.]+$/, "").normalize('NFC');

        // –ü–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ"
        const dashPattern = /^([^-‚Äì‚Äî]+)[\-‚Äì‚Äî](.+)$/;
        const dashMatch = nameWithoutExt.match(dashPattern);

        if (dashMatch) {
            let author = dashMatch[1].trim();
            let title = dashMatch[2].trim();

            // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –º–∏—Ü–µ–ª–∏—è
            if (title.normalize('NFC').toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
                title = `—Ü–∏–∫–ª ${title}`;
            }

            // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ü–∏–∫–ª–∞
            if (author.normalize('NFC').toLowerCase().includes('—Ü–∏–∫–ª ')) {
                title = `${author} ${title}`;
                author = author.replace(/—Ü–∏–∫–ª\s+/i, '').trim();
            } else if (title.normalize('NFC').toLowerCase().includes('—Ü–∏–∫–ª ')) {
                title = `—Ü–∏–∫–ª ${title.replace(/—Ü–∏–∫–ª\s+/i, '').trim()}`;
            }

            console.log(`   –ò–∑–≤–ª–µ—á–µ–Ω–æ: –∞–≤—Ç–æ—Ä="${author}", –Ω–∞–∑–≤–∞–Ω–∏–µ="${title}"`);
        } else {
            console.log(`   –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ`);
        }
        console.log('');
    }

    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Unicode –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testUnicodeNormalization().catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
});