import { config } from 'dotenv';
import { resolve } from 'path';
import { TelegramSyncService } from '../lib/telegram/sync';
import { MetadataParser } from '../lib/telegram/parser';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–Ω–∏–≥–∏
 * @param bookTitle –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
 * @param bookAuthor –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
 */
export async function findBookMetadata(bookTitle: string, bookAuthor: string) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–Ω–∏–≥–∏: ${bookAuthor} - ${bookTitle}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log(`üì• –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...`);
    const channel = await (syncService as any).telegramClient.getMetadataChannel();
    if (!channel) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª');
    }
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
      (channel.id as { toString: () => string }).toString() : 
      String(channel.id);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log(`üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞...`);
    const messages: any[] = await (syncService as any).telegramClient.getMessages(channelId, 100);
    if (!messages || messages.length === 0) {
      console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      return;
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –Ω—É–∂–Ω–æ–π –∫–Ω–∏–≥–∏
    for (const msg of messages) {
      const anyMsg = msg as unknown as { [key: string]: unknown };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (!anyMsg.message) {
        continue;
      }
      
      // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const metadata = MetadataParser.parseMessage(anyMsg.message as string);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
      if (metadata.author === bookAuthor && metadata.title === bookTitle) {
        console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏!`);
        console.log(`ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${anyMsg.id}`);
        console.log(`–ê–≤—Ç–æ—Ä: ${metadata.author}`);
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${metadata.title}`);
        console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${metadata.description || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`–ñ–∞–Ω—Ä—ã: ${metadata.genres.join(', ')}`);
        console.log(`–†–µ–π—Ç–∏–Ω–≥: ${metadata.rating}`);
        
        return {
          messageId: anyMsg.id,
          metadata: metadata
        };
      }
    }
    
    console.log(`‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∫–Ω–∏–≥–∏ ${bookAuthor} - ${bookTitle} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
    return null;
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
if (require.main === module) {
  const bookTitle = process.argv[2] || '—Ü–∏–∫–ª –î—Ä–∏–º–µ—Ä—ã';
  const bookAuthor = process.argv[3] || '–°–µ—Ä–≥–µ–π –¢–∫–∞—á–µ–≤';
  
  findBookMetadata(bookTitle, bookAuthor)
    .then(result => {
      if (result) {
        console.log(`\n‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å ID: ${result.messageId}`);
      } else {
        console.log(`\n‚ùå –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
      console.log('üîí –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
      process.exit(1);
    });
}