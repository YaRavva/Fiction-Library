// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import dotenv from 'dotenv';
dotenv.config();

import { TelegramService } from '../lib/telegram/client';
import { TelegramSyncService } from '../lib/telegram/sync';
import { getSupabaseAdmin } from '../lib/supabase';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞
function extractWordsFromFilename(filename: string): string[] {
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    const words = nameWithoutExt
        .split(/[_\-\s]+/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º –∏ –¥–µ—Ñ–∏—Å–∞–º
        .filter(word => word.length > 1) // –£–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
        .map(word => word.trim().toLowerCase()) // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        .filter(word => word.length > 0); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞
    
    return words;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–Ω–∏–≥–∏
async function findExactBookMatch(admin: any, filename: string) {
    const metadata = TelegramSyncService.extractMetadataFromFilename(filename);
    if (metadata.author !== 'Unknown') {
        const { data: exactMatch, error: exactError } = await (admin as any)
            .from('books')
            .select('id, title, author')
            .eq('title', metadata.title)
            .eq('author', metadata.author)
            .single();
        
        if (!exactError && exactMatch) {
            return exactMatch;
        }
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ —Å–ª–æ–≤–∞–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
async function searchBooksByWords(admin: any, words: string[]) {
    // –ò—â–µ–º –∫–Ω–∏–≥–∏, –≥–¥–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const searchPromises = words.map(async (word) => {
        const { data: titleMatches, error: titleError } = await (admin as any)
            .from('books')
            .select('id, title, author')
            .ilike('title', `%${word}%`)
            .limit(3);
        
        const { data: authorMatches, error: authorError } = await (admin as any)
            .from('books')
            .select('id, title, author')
            .ilike('author', `%${word}%`)
            .limit(3);
        
        const allMatches = [...(titleMatches || []), ...(authorMatches || [])];
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        const uniqueMatches = allMatches.filter((book, index, self) => 
            index === self.findIndex(b => b.id === book.id)
        );
        
        return uniqueMatches;
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.all(searchPromises);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allMatches = results.flat();
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
    const uniqueMatches = allMatches.filter((book, index, self) => 
        index === self.findIndex(b => b.id === book.id)
    );
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
    const matchesWithScores = uniqueMatches.map(book => {
        const bookTitleWords = book.title.toLowerCase().split(/\s+/);
        const bookAuthorWords = book.author.toLowerCase().split(/\s+/);
        const allBookWords = [...bookTitleWords, ...bookAuthorWords];
        
        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–ª–æ–≤ —Å —Å–ª–æ–≤–∞–º–∏ –≤ –∫–Ω–∏–≥–µ
        let score = 0;
        for (const searchWord of words) {
          const normalizedSearchWord = searchWord.toLowerCase();
          let found = false;
          for (const bookWord of allBookWords) {
            const normalizedBookWord = bookWord.toLowerCase();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
            if (normalizedBookWord.includes(normalizedSearchWord) || normalizedSearchWord.includes(normalizedBookWord)) {
              score++;
              found = true;
              break; // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            }
          }
        }
        
        return { ...book, score };
    });
    
    matchesWithScores.sort((a, b) => b.score - a.score);
    
    // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const topMatches = matchesWithScores.slice(0, 5);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é >= 2
    return topMatches.filter(match => match.score >= 2);
}

async function showFileMatchingResults() {
    console.log('=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø –§–ê–ô–õ–û–í TELEGRAM –° –ö–ù–ò–ì–ê–ú–ò –í –ë–î ===\n');
    
    let client: TelegramService | null = null;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
        console.log('1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
        client = await TelegramService.getInstance();
        console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
        console.log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É —Å —Ñ–∞–π–ª–∞–º–∏...');
        const filesChannel = await client.getFilesChannel();
        console.log('   ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—É—á–µ–Ω');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
        console.log('3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏...');
        const messages = await client.getMessages(filesChannel, 10); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10
        
        if (messages.length === 0) {
            console.log('   ‚ö†Ô∏è  –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ');
            return;
        }
        
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏\n`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ Supabase
        const admin = getSupabaseAdmin();
        if (!admin) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Supabase Admin');
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:');
        for (let i = 0; i < messages.length; i++) {
            const msg: any = messages[i];
            
            if (!msg.document) {
                continue;
            }
            
            // –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            let filename = 'unknown.fb2';
            if (msg.document.attributes) {
                const fileNameAttr = msg.document.attributes.find((attr: any) => 
                    attr.className === 'DocumentAttributeFilename'
                );
                if (fileNameAttr && fileNameAttr.fileName) {
                    filename = fileNameAttr.fileName;
                }
            }
            
            console.log(`\n   üìÑ –§–∞–π–ª ${i + 1}: ${filename}`);
            
            // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
            console.log(`     üîç –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è...`);
            const exactMatch = await findExactBookMatch(admin, filename);
            
            if (exactMatch) {
                console.log(`     ‚úÖ –¢–û–ß–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï:`);
                console.log(`        –ù–∞–∑–≤–∞–Ω–∏–µ: "${exactMatch.title}"`);
                console.log(`        –ê–≤—Ç–æ—Ä: ${exactMatch.author}`);
                console.log(`        ID: ${exactMatch.id}`);
            } else {
                // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                console.log(`     üîç –ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º...`);
                const words = extractWordsFromFilename(filename);
                console.log(`        –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ${words.join(', ')}`);
                
                const potentialMatches = await searchBooksByWords(admin, words);
                
                if (potentialMatches.length > 0) {
                    console.log(`     üîÑ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –°–û–í–ü–ê–î–ï–ù–ò–Ø (${potentialMatches.length}):`);
                    potentialMatches.forEach((book: any, index: number) => {
                        console.log(`        ${index + 1}. "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
                        console.log(`           ID: ${book.id} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${book.score})`);
                    });
                } else {
                    console.log(`     ‚ö†Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                }
            }
            
            if (i < messages.length - 1) {
                console.log('     ' + '‚îÄ'.repeat(50));
            }
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        if (client && typeof (client as any).disconnect === 'function') {
            await (client as any).disconnect();
            console.log('\n5. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...');
            console.log('   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        }
        
        console.log('\n=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (client && typeof (client as any).disconnect === 'function') {
            try {
                await (client as any).disconnect();
                console.log('   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            } catch (disconnectError) {
                console.log('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', disconnectError);
            }
        }
    }
}

showFileMatchingResults().catch(console.error);