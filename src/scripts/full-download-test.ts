import { taskManager } from '../lib/task-manager';
import { BackgroundDownloadHandler } from '../lib/background-download';

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
async function fullDownloadTest() {
  try {
    console.log('üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
    console.log('=====================================');
    
    // –°–æ–∑–¥–∞–µ–º ID –∑–∞–¥–∞—á–∏
    const taskId = `full-test-${Date.now()}`;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    const task = taskManager.createTask(taskId);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${taskId}`);
    
    // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    let processedFilesHistory = '';
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    taskManager.registerProgressCallback(taskId, (progress) => {
      // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      console.clear();
      
      console.log('üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
      console.log('=====================================');
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞: ${taskId}`);
      console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.progress}%`);
      console.log('');
      
      // –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const messageLines = progress.message ? progress.message.split('\n') : []
      if (messageLines.length > 0) {
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (messageLines[0]) {
          console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${messageLines[0]}`);
        }
        
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        for (let i = 1; i < messageLines.length; i++) {
          if (messageLines[i]) {
            console.log(messageLines[i]);
          }
        }
      } else {
        console.log(progress.message || '');
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (progress.result) {
        if (progress.result.bookTitle && progress.result.bookAuthor) {
          console.log(`      üìò –ö–Ω–∏–≥–∞: ${progress.result.bookAuthor} - ${progress.result.bookTitle}`);
        }
        if (progress.result.fileSize) {
          console.log(`      üìè –†–∞–∑–º–µ—Ä: ${Math.round(progress.result.fileSize / 1024)} KB`);
        }
      }
    });
    
    console.log('\nüì• –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...');
    console.log('-------------------------------------');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    await BackgroundDownloadHandler.startDownload(taskId, 3); // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å 3 —Ñ–∞–π–ª–∞–º–∏
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    let isCompleted = false;
    while (!isCompleted) {
      const taskStatus = taskManager.getTaskStatus(taskId);
      if (taskStatus && (taskStatus.status === 'completed' || taskStatus.status === 'failed')) {
        isCompleted = true;
      } else {
        // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    const finalStatus = taskManager.getTaskStatus(taskId);
    if (finalStatus) {
      console.log('\n=====================================');
      console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
      console.log(`   –°—Ç–∞—Ç—É—Å: ${finalStatus.status}`);
      console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${finalStatus.progress}%`);
      
      // –†–∞–∑–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageLines = finalStatus.message ? finalStatus.message.split('\n') : []
      if (messageLines.length > 0) {
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${messageLines[0]}`);
        for (let i = 1; i < messageLines.length; i++) {
          if (messageLines[i]) {
            console.log(`   ${messageLines[i]}`);
          }
        }
      }
      
      if (finalStatus.result) {
        if (finalStatus.result.successCount !== undefined) {
          console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${finalStatus.result.successCount}`);
        }
        if (finalStatus.result.failedCount !== undefined) {
          console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${finalStatus.result.failedCount}`);
        }
        if (finalStatus.result.totalFiles !== undefined) {
          console.log(`   üìö –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${finalStatus.result.totalFiles}`);
        }
      }
      
      console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  (async () => {
    await fullDownloadTest();
  })();
}