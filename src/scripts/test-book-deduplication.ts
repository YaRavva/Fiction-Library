import { config } from 'dotenv';
import { join } from 'path';
import { createClient } from '@supabase/supabase-js';

// Load environment variables from .env file
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

async function testBookDeduplication() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–Ω–∏–≥\n');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ
    const testBooks = [
      { title: '—Ü–∏–∫–ª –®–∞–º–∞–Ω', author: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ö–∞–ª–±–∞–∑–æ–≤' },
      { title: '—Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ', author: '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è' },
      { title: '—Ü–∏–∫–ª –õ—É–Ω–∞', author: '–ô–µ–Ω –ú–∞–∫–¥–æ–Ω–∞–ª—å–¥' }
    ];
    
    for (const book of testBooks) {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥—É: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
      
      // @ts-ignore
      const { data: foundBooks, error: findError } = await supabaseAdmin
        .from('books')
        .select('id, title, author, cover_url')
        .eq('title', book.title)
        .eq('author', book.author);
        
      if (findError) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏:`, findError.message);
        continue;
      }
      
      if (foundBooks && foundBooks.length > 0) {
        const existingBook = foundBooks[0];
        console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        console.log(`     ID: ${existingBook.id}`);
        console.log(`     –û–±–ª–æ–∂–∫–∞: ${existingBook.cover_url || '–ù–µ—Ç'}`);
      } else {
        console.log(`  ‚ÑπÔ∏è –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ
    console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    // @ts-ignore
    const { count: totalBooks, error: countError } = await supabaseAdmin
      .from('books')
      .select('*', { count: 'exact', head: true });
      
    if (countError) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥:`, countError.message);
    } else {
      console.log(`  –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${totalBooks}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    // @ts-ignore
    const { count: processedMessages, error: messagesError } = await supabaseAdmin
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true });
      
    if (messagesError) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π:`, messagesError.message);
    } else {
      console.log(`  –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${processedMessages}`);
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

testBookDeduplication();