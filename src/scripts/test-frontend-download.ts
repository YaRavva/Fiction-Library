#!/usr/bin/env tsx

import 'dotenv/config';
import * as http from 'http';
import * as url from 'url';

async function testFrontendDownload() {
  console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ ===');
  
  const fileName = '1039.zip';
  const port = 3001; // –ü–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  
  console.log(`\n1. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${port}...`);
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const server = http.createServer(async (req, res) => {
    const parsedUrl = url.parse(req.url || '', true);
    
    if (parsedUrl.pathname === '/test-download') {
      console.log('\n2. –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...');
      
      try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–µ–≥–æ endpoint
        console.log('3. –í—ã–∑–æ–≤ –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–µ–≥–æ endpoint /api/cloud-ru-proxy...');
        
        // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑–≤–∞—Ç—å Next.js API endpoint –∏–∑ —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞,
        // –º—ã –∏–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–µ–≥–æ endpoint
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        const { getS3AuthHeaders } = await import('../lib/cloud-ru-s3-service');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const accessKeyId = process.env.AWS_ACCESS_KEY_ID;
        const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;
        
        if (!accessKeyId || !secretAccessKey) {
          throw new Error('Missing Cloud.ru S3 environment variables');
        }
        
        // –†–∞–∑–±–æ—Ä –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Cloud.ru
        const accessKeyParts = accessKeyId.split(':');
        if (accessKeyParts.length !== 2) {
          throw new Error('Invalid AWS_ACCESS_KEY_ID format');
        }
        
        const [tenantId, keyId] = accessKeyParts;
        const bucketName = process.env.S3_BUCKET_NAME || 'books';
        const region = process.env.AWS_REGION || 'ru-central-1';
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ GET –∑–∞–ø—Ä–æ—Å–∞
        const requestParams = {
          method: 'GET',
          pathname: `/${bucketName}/${fileName}`, // –ü—É—Ç—å —Å –∏–º–µ–Ω–µ–º –±–∞–∫–µ—Ç–∞
          query: {},
          headers: {
            'host': 's3.cloud.ru',
          },
          payload: '',
          keyId: keyId,
          keySecret: secretAccessKey,
          tenantId: tenantId,
          region: region,
          service: 's3'
        };
        
        console.log('4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
        const authHeaders = await getS3AuthHeaders(requestParams);
        console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        console.log('5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Cloud.ru S3 —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...');
        const cloudRuUrl = `https://s3.cloud.ru/${bucketName}/${fileName}`;
        
        const response = await fetch(cloudRuUrl, {
          method: 'GET',
          headers: {
            'Authorization': authHeaders.Authorization,
            'x-amz-date': authHeaders['x-amz-date'],
            'x-amz-content-sha256': authHeaders['x-amz-content-sha256'],
            'host': 's3.cloud.ru'
          }
        });
        
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
          console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ Cloud.ru S3 —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π!');
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          const arrayBuffer = await response.arrayBuffer();
          const buffer = Buffer.from(arrayBuffer);
          console.log(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${buffer.length} –±–∞–π—Ç`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ZIP —Ñ–∞–π–ª
          if (buffer.length >= 4) {
            const header = buffer.subarray(0, 4);
            const isZip = header[0] === 0x50 && header[1] === 0x4B && header[2] === 0x03 && header[3] === 0x04;
            console.log(`–§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º: ${isZip ? '–î–∞' : '–ù–µ—Ç'}`);
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É
          res.writeHead(200, {
            'Content-Type': 'application/zip',
            'Content-Disposition': `attachment; filename="${fileName}"`,
            'Content-Length': buffer.length
          });
          
          res.end(buffer);
          
          console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!');
          
        } else {
          const errorText = await response.text();
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
          console.log('–¢–µ–ª–æ –æ—à–∏–±–∫–∏:', errorText);
          
          res.writeHead(response.status, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ 
            error: `Cloud.ru S3 request failed: ${response.status} ${response.statusText}`,
            details: errorText
          }));
        }
        
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        res.writeHead(500, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: error.message }));
      }
      
    } else {
      res.writeHead(404, { 'Content-Type': 'text/plain' });
      res.end('Not Found');
    }
  });
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  server.listen(port, () => {
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    console.log('\n6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ª–æ–≥–∏–∫—É...');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    setTimeout(async () => {
      try {
        console.log('7. –í—ã–∑–æ–≤ fetch –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...');
        const response = await fetch(`http://localhost:${port}/test-download`);
        
        console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
        
        if (response.ok) {
          console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ª–æ–≥–∏–∫—É!');
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
          const arrayBuffer = await response.arrayBuffer();
          const buffer = Buffer.from(arrayBuffer);
          console.log(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${buffer.length} –±–∞–π—Ç`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ ZIP —Ñ–∞–π–ª
          if (buffer.length >= 4) {
            const header = buffer.subarray(0, 4);
            const isZip = header[0] === 0x50 && header[1] === 0x4B && header[2] === 0x03 && header[3] === 0x04;
            console.log(`–§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è ZIP –∞—Ä—Ö–∏–≤–æ–º: ${isZip ? '–î–∞' : '–ù–µ—Ç'}`);
          }
          
          console.log('\nüéâ –¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
          console.log('–ö–Ω–æ–ø–∫–∏ "–ß–∏—Ç–∞—Ç—å" –∏ "–°–∫–∞—á–∞—Ç—å" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
          
        } else {
          const errorText = await response.text();
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
          console.log('–¢–µ–ª–æ –æ—à–∏–±–∫–∏:', errorText);
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.close(() => {
          console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
        
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.close(() => {
          console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        });
      }
    }, 1000);
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  setTimeout(() => {
    if (server.listening) {
      console.log('\n‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
      server.close(() => {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      });
    }
  }, 10000);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testFrontendDownload()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –¢–µ—Å—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testFrontendDownload };