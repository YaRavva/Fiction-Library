/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
 * –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤—è–∑–∏ —Å –∫–Ω–∏–≥–æ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import bigInt from 'big-integer';
import { uploadFileToStorage, getSupabaseAdmin } from '../lib/supabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function testFileUploadComplete() {
  console.log('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n');
  
  let telegramClient: TelegramClient | null = null;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiId = process.env.TELEGRAM_API_ID;
    const apiHash = process.env.TELEGRAM_API_HASH;
    const sessionString = process.env.TELEGRAM_SESSION;
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!apiId || !apiHash || !sessionString || !supabaseUrl || !supabaseServiceRoleKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
    console.log('1Ô∏è‚É£  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram...');
    const session = new StringSession(sessionString);
    telegramClient = new TelegramClient(session, parseInt(apiId), apiHash, {
      connectionRetries: 5,
    });
    
    await telegramClient.connect();
    console.log('    ‚úÖ –ö–ª–∏–µ–Ω—Ç Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω\n');
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Supabase
    const supabase = createSupabaseClient(supabaseUrl, supabaseServiceRoleKey);
    
    // –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Ñ–∞–π–ª–æ–≤
    const channelId = 1515159552; // ID –¥–ª—è "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"
    console.log(`2Ô∏è‚É£  –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏" (ID: ${channelId})`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
    const channelEntity = await telegramClient.getEntity(new Api.PeerChannel({ channelId: bigInt(channelId) }));
    console.log(`    ‚úÖ –°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞: "${(channelEntity as any).title}"\n`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
    console.log('3Ô∏è‚É£  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞...');
    const messages = await telegramClient.getMessages(channelEntity, { limit: 3 });
    console.log(`    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);
    
    // –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
    let fileMessage = null;
    let fileIndex = 0;
    for (const msg of messages) {
      if ((msg as any).media && (msg as any).media.className === 'MessageMediaDocument') {
        fileMessage = msg;
        break;
      }
      fileIndex++;
    }
    
    if (!fileMessage) {
      console.log('    ‚ö†Ô∏è  –í –ø–µ—Ä–≤—ã—Ö 3 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤');
      console.log('    üìã –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
      const moreMessages = await telegramClient.getMessages(channelEntity, { limit: 10 });
      console.log(`    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${moreMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      // –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
      for (const msg of moreMessages) {
        if ((msg as any).media && (msg as any).media.className === 'MessageMediaDocument') {
          fileMessage = msg;
          break;
        }
      }
      
      if (!fileMessage) {
        console.log('    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏');
        return;
      }
    }
    
    console.log(`4Ô∏è‚É£  –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º: ID ${fileMessage.id}`);
    
    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    const document = (fileMessage as any).media.document;
    const filenameAttr = document.attributes?.find((attr: any) => attr.className === 'DocumentAttributeFilename');
    const originalFilename = filenameAttr?.fileName || `book_${fileMessage.id}`;
    const fileExtension = path.extname(originalFilename).toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    const allowedExtensions = ['.fb2', '.zip'];
    if (!allowedExtensions.includes(fileExtension)) {
      console.log(`    ‚ö†Ô∏è  –¢–∏–ø —Ñ–∞–π–ª–∞ "${fileExtension}" –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω`);
      console.log(`    üìã –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: ${allowedExtensions.join(', ')}`);
      return;
    }
    
    console.log(`    ‚úÖ –¢–∏–ø —Ñ–∞–π–ª–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω: ${fileExtension}`);
    console.log(`    üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ${originalFilename}\n`);
    
    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    console.log('5Ô∏è‚É£  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram...');
    const fileBuffer = await telegramClient.downloadMedia(fileMessage, {});
    
    if (!fileBuffer) {
      console.log('    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
      return;
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Buffer –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    const buffer = Buffer.isBuffer(fileBuffer) ? fileBuffer : Buffer.from(fileBuffer as unknown as Uint8Array);
    console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω (${buffer.length} –±–∞–π—Ç)\n`);
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <MessageID>.zip (–∏–ª–∏ .fb2)
    const storageFilename = `${fileMessage.id}${fileExtension}`;
    console.log(`6Ô∏è‚É£  –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è:`);
    console.log(`    üíæ –ò–º—è —Ñ–∞–π–ª–∞: ${storageFilename}`);
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME-—Ç–∏–ø–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    const mimeTypes: Record<string, string> = {
      '.fb2': 'application/fb2+xml',
      '.zip': 'application/zip',
    };
    const mimeType = mimeTypes[fileExtension] || 'application/octet-stream';
    const fileFormat = fileExtension.replace('.', '');
    console.log(`    üìÑ MIME-—Ç–∏–ø: ${mimeType}`);
    console.log(`    üìÑ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${fileFormat}\n`);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage (bucket 'books')
    console.log('7Ô∏è‚É£  –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Supabase Storage...');
    try {
      const uploadResult = await uploadFileToStorage('books', storageFilename, buffer, mimeType);
      console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage`);
      console.log(`    üìÅ –ü—É—Ç—å –≤ Storage: ${uploadResult.path}`);
    } catch (uploadError) {
      console.error('    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', (uploadError as Error).message);
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Ñ–∞–π–ª–∞
    const fileUrl = `${supabaseUrl}/storage/v1/object/public/books/${encodeURIComponent(storageFilename)}`;
    console.log(`8Ô∏è‚É£  –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Ñ–∞–π–ª–∞:`);
    console.log(`    üîó URL: ${fileUrl}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤ Storage
    console.log('9Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤ Storage...');
    try {
      const admin = getSupabaseAdmin();
      if (admin) {
        const { data: fileData, error: fileError } = await admin
          .storage
          .from('books')
          .download(storageFilename);
        
        if (fileError) {
          console.error('    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', (fileError as Error).message);
        } else if (fileData) {
          console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Storage (${fileData.size} –±–∞–π—Ç)`);
        }
      }
    } catch (downloadError) {
      console.error('    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –≤ Storage:', (downloadError as Error).message);
    }
    
    console.log('\nüéâ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:');
    console.log(`   üÜî Message ID —Ñ–∞–π–ª–∞: ${fileMessage.id}`);
    console.log(`   üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: ${originalFilename}`);
    console.log(`   üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${buffer.length} –±–∞–π—Ç`);
    console.log(`   üìù –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${fileFormat}`);
    console.log(`   üíæ –ò–º—è –≤ Storage: ${storageFilename}`);
    console.log(`   üîó URL —Ñ–∞–π–ª–∞: ${fileUrl}`);
    console.log('\n‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', (error as Error).message);
    console.error('   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    if (telegramClient) {
      try {
        await telegramClient.disconnect();
        console.log('\nüîå Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
      } catch (disconnectError) {
        console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', (disconnectError as Error).message);
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    console.log('\nüõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞...');
    setTimeout(() => {
      process.exit(0);
    }, 1000);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
testFileUploadComplete().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', (error as Error).message);
  process.exit(1);
});