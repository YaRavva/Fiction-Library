import { serverSupabase } from '../lib/serverSupabase';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

interface SeriesBook {
  title: string;
  year: number;
}

async function createSeriesForBook(bookId: string, seriesBooks: SeriesBook[]) {
  try {
    console.log(`üîç –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–ª—è –∫–Ω–∏–≥–∏ —Å ID: ${bookId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    const { data: book, error: bookError } = await (serverSupabase as any)
      .from('books')
      .select('id, title, author, description, genres, tags, cover_url')
      .eq('id', bookId)
      .single();
    
    if (bookError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ:', bookError);
      return;
    }
    
    if (!book) {
      console.log('‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    console.log(`üìö –ö–Ω–∏–≥–∞: ${book.title} (${book.author})`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é
    const seriesData: any = {
      title: book.title,
      author: book.author,
      description: book.description,
      genres: book.genres,
      tags: book.tags,
      cover_url: book.cover_url,
      series_composition: seriesBooks
    };
    
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏...');
    const { data: series, error: seriesError } = await (serverSupabase as any)
      .from('series')
      .insert(seriesData)
      .select()
      .single();
    
    if (seriesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏:', seriesError);
      return;
    }
    
    console.log(`‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${series.title} (${series.author})`);
    console.log(`  ID —Å–µ—Ä–∏–∏: ${series.id}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Å—ã–ª–∞–ª–∞—Å—å –Ω–∞ –Ω–æ–≤—É—é —Å–µ—Ä–∏—é
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏...');
    const { data: updatedBook, error: updateError } = await (serverSupabase as any)
      .from('books')
      .update({ series_id: series.id })
      .eq('id', bookId)
      .select()
      .single();
    
    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', updateError);
      return;
    }
    
    console.log('‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const bookId = process.argv[2];

if (!bookId) {
  console.error('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–Ω–∏–≥–∏');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx src/scripts/create-series-for-book.ts <bookId>');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–Ω–∏–≥ –≤ —Å–µ—Ä–∏–∏ "–î—Ä–∏–º–µ—Ä—ã"
const seriesBooks: SeriesBook[] = [
  { title: "–ü–æ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", year: 2019 },
  { title: "–ù–∞—Å–ª–µ–¥–∏–µ –ø–∞–¥—à–∏—Ö", year: 2019 },
  { title: "–°–æ–Ω –ø–∞–¥—à–∏—Ö", year: 2019 },
  { title: "–î—Ä–æ–∂—å –≤—Ä–µ–º–µ–Ω–∏", year: 2019 },
  { title: "–í–ª–∞—Å—Ç—å", year: 2020 }
];

createSeriesForBook(bookId, seriesBooks);