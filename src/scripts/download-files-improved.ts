import { config } from 'dotenv';
import { join } from 'path';

// Load environment variables from .env file
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

import { downloadMissingFilesAsync } from './download-files-async';

async function downloadFiles() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram');
  
  try {
    // Check if required environment variables are set
    const requiredEnvVars = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_SESSION'];
    const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);
    
    if (missingEnvVars.length > 0) {
      console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingEnvVars.join(', ')}`);
      process.exit(1);
    }
    
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
    // Download missing files with a limit of 10
    const result = await downloadMissingFilesAsync(10);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:');
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${result.message}`);
    
    if (result.files && result.files.length > 0) {
      console.log(`   –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.files.length}`);
    }
    
    if (result.actions && result.actions.length > 0) {
      result.actions.forEach((action: string, index: number) => {
        console.log(`   ${index + 1}. ${action}`);
      });
    }
    
    if (result.results && result.results.length > 0) {
      console.log('\nüìã –î–µ—Ç–∞–ª–∏:');
      result.results.forEach((detail: any, index: number) => {
        let status = '‚úÖ';
        if (detail.success === false) {
          status = '‚ùå';
        } else if (detail.skipped) {
          status = '‚ÑπÔ∏è';
        } else {
          status = 'üì•';
        }
        
        console.log(`${index + 1}. ${status} ${detail.messageId || '–ë–µ–∑ ID'}`);
        if (detail.filename) {
          console.log(`   –§–∞–π–ª: ${detail.filename}`);
        }
        if (detail.bookTitle && detail.bookAuthor) {
          console.log(`   –ö–Ω–∏–≥–∞: "${detail.bookTitle}" –∞–≤—Ç–æ—Ä–∞ ${detail.bookAuthor}`);
        }
        if (detail.reason) {
          console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${detail.reason}`);
        }
        if (detail.error) {
          console.log(`   –û—à–∏–±–∫–∞: ${detail.error}`);
        }
        console.log('---');
      });
    }
    
    console.log(`\nüìã –û—Ç—á–µ—Ç:`);
    console.log(result.report);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
    process.exit(1);
  }
}

downloadFiles();