import { config } from 'dotenv';
import { resolve } from 'path';
import { getSupabaseAdmin } from '../lib/supabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

async function countBooksWithoutCovers() {
  try {
    console.log('üîç –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫...');
    const supabase = getSupabaseAdmin();
    
    if (!supabase) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
      return;
    }
    
    // @ts-ignore
    const { data: booksWithoutCovers, error } = await supabase
      .from('books')
      .select('author, title, cover_url, telegram_post_id')
      .is('cover_url', null)
      .limit(50);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥:', error.message);
      return;
    }
    
    console.log(`üìä –ö–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫: ${booksWithoutCovers?.length || 0}`);
    
    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫
    if (booksWithoutCovers && booksWithoutCovers.length > 0) {
      console.log('\nüìö –ö–Ω–∏–≥–∏ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫:');
      // @ts-ignore
      booksWithoutCovers.forEach((book: any, index: number) => {
        console.log(`${index + 1}. ${book.author || '–ë–µ–∑ –∞–≤—Ç–æ—Ä–∞'} - ${book.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
        console.log(`   Telegram ID: ${book.telegram_post_id || '–ù–µ—Ç'}`);
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Å—á–µ—Ç
countBooksWithoutCovers();