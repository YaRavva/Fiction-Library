import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import { serverSupabase } from '../lib/serverSupabase';
import dotenv from 'dotenv';

dotenv.config();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–Ω–∏–≥–∏
interface Book {
  id: string;
  title: string;
  author: string;
}

async function countUniqueBooks() {
  console.log('üîç Counting unique books in Telegram channel...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    console.log('\nüì± Initializing Telegram client...');
    const telegramService = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    console.log('üì° Getting metadata channel...');
    const channel = await telegramService.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ?
        (channel.id as { toString: () => string }).toString() :
        String(channel.id);
    
    console.log(`‚úÖ Connected to channel ID: ${channelId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    console.log('\nüìö Loading existing books from database for comparison...');
    const { data: existingBooks, error: booksError } = await serverSupabase
      .from('books')
      .select('id, title, author');
    
    if (booksError) {
      throw new Error(`Error loading books from database: ${booksError.message}`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const existingBooksMap = new Map<string, Book>();
    existingBooks?.forEach((book: Book) => {
      const key = `${book.author}|${book.title}`;
      existingBooksMap.set(key, book);
    });
    
    console.log(`‚úÖ Loaded ${existingBooks?.length || 0} existing books from database`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
    let totalMessages = 0;
    let bookMessages = 0;
    let offsetId: number | undefined = undefined;
    const batchSize = 100;
    const bookSet = new Set<string>(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram
    let processed = 0;
    
    console.log('\nüì• Starting to scan Telegram channel...');
    
    while (true) {
      try {
        console.log(`\nüîÑ Getting messages batch (offsetId: ${offsetId || 'start'}, batchSize: ${batchSize})...`);
        const messages = await telegramService.getMessages(channelId, batchSize, offsetId) as any[];

        console.log(`üì• Received ${messages?.length || 0} messages`);
        
        if (!messages || messages.length === 0) {
          console.log('üîö No more messages to process');
          break;
        }

        totalMessages += messages.length;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for (const message of messages) {
          try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            let messageText = '';
            if (message && typeof message === 'object') {
              if ('message' in message && message.message && typeof message.message === 'string') {
                messageText = message.message;
              } else if ('text' in message && message.text && typeof message.text === 'string') {
                messageText = message.text;
              }
            }

            if (messageText && typeof messageText === 'string' && messageText.trim() !== '') {
              try {
                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
                const metadata = MetadataParser.parseMessage(messageText);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —ç—Ç–æ –∫–∞–∫ –∫–Ω–∏–≥–∞ (–µ—Å—Ç—å –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
                if (metadata.author && metadata.title) {
                  bookMessages++;
                  const bookKey = `${metadata.author}|${metadata.title}`;
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥
                  if (!bookSet.has(bookKey)) {
                    bookSet.add(bookKey);
                    console.log(`üÜï New unique book: "${metadata.title}" by ${metadata.author}`);
                  }
                }
              } catch (parseError) {
                // –ù–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–∏–≥–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
              }
            }
          } catch (messageError) {
            // –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏
            continue;
          }
          
          processed++;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
          if (processed % 50 === 0) {
            console.log(`üìä Progress: ${processed} messages processed, ${bookSet.size} unique books found`);
          }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏
        const lastMessage = messages[messages.length - 1];
        if (lastMessage && lastMessage.id) {
          offsetId = lastMessage.id;
          console.log(`‚è≠Ô∏è  Next batch will start from message ID: ${offsetId}`);
        } else {
          console.log('üîö Could not get last message ID, ending loop');
          break;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Telegram API
        await new Promise(resolve => setTimeout(resolve, 100));
      } catch (batchError) {
        console.error('‚ùå Error getting message batch:', batchError);
        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      }
    }
    
    console.log('\nüìà === FINAL RESULTS ===');
    console.log(`üìß Total messages processed: ${totalMessages}`);
    console.log(`üìö Messages with book metadata: ${bookMessages}`);
    console.log(`üÜï Unique books found in Telegram: ${bookSet.size}`);
    console.log(`üíæ Books already in database: ${existingBooks?.length || 0}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥
    console.log('\nüìã Sample of unique books found:');
    let count = 0;
    for (const bookKey of bookSet) {
      if (count >= 10) break;
      const [author, title] = bookKey.split('|');
      console.log(`  ‚Ä¢ "${title}" by ${author}`);
      count++;
    }
    
    if (bookSet.size > 10) {
      console.log(`  ... and ${bookSet.size - 10} more`);
    }
    
    console.log('\n‚úÖ Counting completed successfully');
    
  } catch (error) {
    console.error('‚ùå Error during counting:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    try {
      const telegramService = await TelegramService.getInstance();
      await telegramService.disconnect();
      console.log('üì± Telegram client disconnected');
    } catch (disconnectError) {
      console.error('‚ö†Ô∏è  Error disconnecting Telegram client:', disconnectError);
    }
  }
}

// Run the script
countUniqueBooks().catch(console.error);