/**
 * Script to count unique books in the database and compare with Telegram messages
 */

import { config } from 'dotenv';
import { createClient as createSupabaseClient } from '@supabase/supabase-js';

// Load environment variables FIRST
config({ path: '.env.local' });
config({ path: '.env' });

async function countUniqueBooks() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n');
    
    // Initialize Supabase client
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceRoleKey) {
      throw new Error('Missing Supabase environment variables');
    }
    
    const supabase = createSupabaseClient(supabaseUrl, supabaseServiceRoleKey);
    
    // 1. –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥
    console.log('1. –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥...');
    const { count: totalBooks, error: totalBooksError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true });
    
    if (totalBooksError) {
      throw new Error(`Error counting total books: ${totalBooksError.message}`);
    }
    
    console.log(`   –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${totalBooks}`);
    
    // 2. –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ title + author
    console.log('\n2. –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É...');
    const { data: uniqueBooksByTitleAuthor, error: uniqueBooksError } = await supabase
      .from('books')
      .select('title, author')
      .order('title', { ascending: true })
      .order('author', { ascending: true });
    
    if (uniqueBooksError) {
      throw new Error(`Error fetching books for unique count: ${uniqueBooksError.message}`);
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ title + author
    const uniqueBookSet = new Set();
    uniqueBooksByTitleAuthor?.forEach(book => {
      uniqueBookSet.add(`${book.title}|${book.author}`);
    });
    
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –∞–≤—Ç–æ—Ä—É): ${uniqueBookSet.size}`);
    
    // 3. –ü–æ–¥—Å—á–µ—Ç –∫–Ω–∏–≥ —Å telegram_post_id
    console.log('\n3. –ü–æ–¥—Å—á–µ—Ç –∫–Ω–∏–≥ —Å telegram_post_id...');
    const { count: booksWithTelegramId, error: telegramIdError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true })
      .not('telegram_post_id', 'is', null);
    
    if (telegramIdError) {
      throw new Error(`Error counting books with telegram_post_id: ${telegramIdError.message}`);
    }
    
    console.log(`   –ö–Ω–∏–≥ —Å telegram_post_id: ${booksWithTelegramId}`);
    
    // 4. –ü–æ–¥—Å—á–µ—Ç –∫–Ω–∏–≥ —Å file_url (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö)
    console.log('\n4. –ü–æ–¥—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (—Å file_url)...');
    const { count: booksWithFile, error: fileError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true })
      .not('file_url', 'is', null);
    
    if (fileError) {
      throw new Error(`Error counting books with file_url: ${fileError.message}`);
    }
    
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥: ${booksWithFile}`);
    
    // 5. –ü–æ–¥—Å—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
    console.log('\n5. –ü–æ–¥—Å—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram...');
    const { count: processedMessages, error: messagesError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true });
    
    if (messagesError) {
      throw new Error(`Error counting processed messages: ${messagesError.message}`);
    }
    
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram: ${processedMessages}`);
    
    // 6. –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å book_id
    console.log('\n6. –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π Telegram, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–Ω–∏–≥–∞–º–∏...');
    const { count: messagesWithBooks, error: messagesWithBooksError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true })
      .not('book_id', 'is', null);
    
    if (messagesWithBooksError) {
      throw new Error(`Error counting messages with book_id: ${messagesWithBooksError.message}`);
    }
    
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π Telegram, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–Ω–∏–≥–∞–º–∏: ${messagesWithBooks}`);
    
    // 7. –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å telegram_file_id (—Ñ–∞–π–ª—ã)
    console.log('\n7. –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π Telegram —Å —Ñ–∞–π–ª–∞–º–∏...');
    const { count: messagesWithFiles, error: messagesWithFilesError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true })
      .not('telegram_file_id', 'is', null);
    
    if (messagesWithFilesError) {
      throw new Error(`Error counting messages with telegram_file_id: ${messagesWithFilesError.message}`);
    }
    
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π Telegram —Å —Ñ–∞–π–ª–∞–º–∏: ${messagesWithFiles}`);
    
    // 8. –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    console.log('\n8. –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ title + author
    const { data: allBooks, error: allBooksError } = await supabase
      .from('books')
      .select('id, title, author, created_at')
      .order('title', { ascending: true })
      .order('author', { ascending: true })
      .order('created_at', { ascending: true });
    
    if (allBooksError) {
      throw new Error(`Error fetching all books: ${allBooksError.message}`);
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ title + author
    const booksByTitleAuthor = new Map<string, any[]>();
    allBooks?.forEach(book => {
      const key = `${book.title}|${book.author}`;
      if (!booksByTitleAuthor.has(key)) {
        booksByTitleAuthor.set(key, []);
      }
      booksByTitleAuthor.get(key)?.push(book);
    });
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    let duplicateGroups = 0;
    let totalDuplicates = 0;
    booksByTitleAuthor.forEach((books, key) => {
      if (books.length > 1) {
        duplicateGroups++;
        totalDuplicates += books.length - 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º 1 –æ—Ä–∏–≥–∏–Ω–∞–ª)
      }
    });
    
    console.log(`   –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateGroups}`);
    console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicates}`);
    
    // 9. –°–≤–æ–¥–∫–∞
    console.log('\nüìä –°–í–û–î–ö–ê:');
    console.log(`   ========================================`);
    console.log(`   –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${totalBooks}`);
    console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é + –∞–≤—Ç–æ—Ä—É): ${uniqueBookSet.size}`);
    console.log(`   –ö–Ω–∏–≥ —Å telegram_post_id: ${booksWithTelegramId}`);
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥: ${booksWithFile}`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram: ${processedMessages}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π Telegram, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–Ω–∏–≥–∞–º–∏: ${messagesWithBooks}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π Telegram —Å —Ñ–∞–π–ª–∞–º–∏: ${messagesWithFiles}`);
    console.log(`   –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateGroups}`);
    console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${totalDuplicates}`);
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥:', error);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  countUniqueBooks();
}