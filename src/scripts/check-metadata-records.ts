/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function checkMetadataRecords() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ telegram_file_id
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id...');
    const { data: recordsWithoutFileId, error: recordsWithoutFileIdError } = await supabase
      .from('telegram_processed_messages')
      .select('id, message_id, telegram_file_id, book_id, processed_at')
      .is('telegram_file_id', null)
      .limit(20);
      
    if (recordsWithoutFileIdError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id:', recordsWithoutFileIdError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id: ${recordsWithoutFileId?.length || 0}`);
    
    if (recordsWithoutFileId && recordsWithoutFileId.length > 0) {
      console.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id:');
      for (const record of recordsWithoutFileId) {
        console.log(`  - ID: ${record.id}`);
        console.log(`    Message ID: ${record.message_id}`);
        console.log(`    Book ID: ${record.book_id}`);
        console.log(`    Processed At: ${record.processed_at}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        if (record.book_id) {
          const { data: book, error: bookError } = await supabase
            .from('books')
            .select('title, author, telegram_post_id')
            .eq('id', record.book_id)
            .single();
            
          if (!bookError && book) {
            console.log(`    –ö–Ω–∏–≥–∞: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
            console.log(`    Telegram Post ID: ${book.telegram_post_id || '–ù–µ—Ç'}`);
          }
        }
        console.log('');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å telegram_file_id
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π —Å telegram_file_id...');
    const { data: recordsWithFileId, error: recordsWithFileIdError } = await supabase
      .from('telegram_processed_messages')
      .select('id, message_id, telegram_file_id, book_id, processed_at')
      .not('telegram_file_id', 'is', null)
      .limit(20);
      
    if (recordsWithFileIdError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π —Å telegram_file_id:', recordsWithFileIdError.message);
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å telegram_file_id: ${recordsWithFileId?.length || 0}`);
    
    if (recordsWithFileId && recordsWithFileId.length > 0) {
      console.log('–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å telegram_file_id:');
      for (const record of recordsWithFileId) {
        console.log(`  - ID: ${record.id}`);
        console.log(`    Message ID: ${record.message_id}`);
        console.log(`    Telegram File ID: ${record.telegram_file_id}`);
        console.log(`    Book ID: ${record.book_id}`);
        console.log(`    Processed At: ${record.processed_at}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
        if (record.book_id) {
          const { data: book, error: bookError } = await supabase
            .from('books')
            .select('title, author, telegram_file_id')
            .eq('id', record.book_id)
            .single();
            
          if (!bookError && book) {
            console.log(`    –ö–Ω–∏–≥–∞: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
            console.log(`    Telegram File ID –≤ –∫–Ω–∏–≥–µ: ${book.telegram_file_id || '–ù–µ—Ç'}`);
          }
        }
        console.log('');
      }
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id
    console.log('\nüìä –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id...');
    const { count: countWithoutFileId, error: countError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true })
      .is('telegram_file_id', null);
      
    if (countError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id:', countError.message);
      return;
    }
    
    console.log(`‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ telegram_file_id: ${countWithoutFileId || 0}`);
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
checkMetadataRecords().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});