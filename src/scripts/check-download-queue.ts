import { config } from 'dotenv';
import { serverSupabase } from '@/lib/serverSupabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env' });

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx src/scripts/check-download-queue.ts
 */

async function checkDownloadQueue() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤—Ä—É—á–Ω—É—é
    const { data: allTasks, error: allTasksError } = await serverSupabase
      .from('telegram_download_queue')
      .select('status');

    if (allTasksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', allTasksError);
      process.exit(1);
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats: Record<string, number> = {};
    if (allTasks) {
      allTasks.forEach((task: any) => {
        statusStats[task.status] = (statusStats[task.status] || 0) + 1;
      });
    }

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    if (Object.keys(statusStats).length > 0) {
      Object.entries(statusStats).forEach(([status, count]) => {
        console.log(`  ${status}: ${count}`);
      });
    } else {
      console.log('  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
    }

    console.log('\nüì• –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏ (–ø–µ—Ä–≤—ã–µ 10):');
    const { data: pendingTasks, error: pendingError } = await serverSupabase
      .from('telegram_download_queue')
      .select('*')
      .eq('status', 'pending')
      .order('created_at', { ascending: true })
      .limit(10);

    if (pendingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á:', pendingError);
      process.exit(1);
    }

    if (pendingTasks && pendingTasks.length > 0) {
      pendingTasks.forEach((task: any) => {
        console.log(`  ID: ${task.id}`);
        console.log(`    Message ID: ${task.message_id}`);
        console.log(`    Channel ID: ${task.channel_id}`);
        console.log(`    Created: ${task.created_at}`);
        console.log(`    Priority: ${task.priority}`);
        console.log('  ---');
      });
    } else {
      console.log('  –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á');
    }

    console.log('\n‚öôÔ∏è  –ó–∞–¥–∞—á–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (–ø–µ—Ä–≤—ã–µ 10):');
    const { data: processingTasks, error: processingError } = await serverSupabase
      .from('telegram_download_queue')
      .select('*')
      .eq('status', 'processing')
      .order('started_at', { ascending: true })
      .limit(10);

    if (processingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:', processingError);
      process.exit(1);
    }

    if (processingTasks && processingTasks.length > 0) {
      processingTasks.forEach((task: any) => {
        console.log(`  ID: ${task.id}`);
        console.log(`    Message ID: ${task.message_id}`);
        console.log(`    Channel ID: ${task.channel_id}`);
        console.log(`    Started: ${task.started_at}`);
        console.log('  ---');
      });
    } else {
      console.log('  –ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ');
    }

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—á–µ—Ä–µ–¥–∏:', error);
    process.exit(1);
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—á–µ—Ä–µ–¥–∏
checkDownloadQueue();