import { config } from 'dotenv';
import { join } from 'path';
import { createClient } from '@supabase/supabase-js';

// Load environment variables from .env file
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

async function testQueueProcessing() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤\n');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å
    console.log('üì• –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å...');
    
    const testTasks = [
      { message_id: 4379, channel_id: '1515159552', priority: 1 },
      { message_id: 4378, channel_id: '1515159552', priority: 1 },
      { message_id: 4377, channel_id: '1515159552', priority: 1 }
    ];
    
    const { data, error } = await supabaseAdmin
      .from('telegram_download_queue')
      .insert(testTasks);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å:', error.message);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—á–µ—Ä–µ–¥–∏
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—á–µ—Ä–µ–¥–∏...');
    const { data: queueItems, error: queueError } = await supabaseAdmin
      .from('telegram_download_queue')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (queueError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏:', queueError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${queueItems?.length || 0} –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏:`);
      queueItems?.forEach((item, index) => {
        console.log(`   ${index + 1}. ID: ${item.id}, Message ID: ${item.message_id}, Status: ${item.status}`);
      });
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
    process.exit(1);
  }
}

testQueueProcessing();