/**
 * Script to check unprocessed Telegram messages and estimate real book count
 */

import { config } from 'dotenv';
import { createClient as createSupabaseClient } from '@supabase/supabase-js';
import { TelegramService } from '../lib/telegram/client';

// Load environment variables FIRST
config({ path: '.env.local' });
config({ path: '.env' });

async function checkUnprocessedMessages() {
  try {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Telegram\n');
    
    // Initialize Supabase client
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
    const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceRoleKey) {
      throw new Error('Missing Supabase environment variables');
    }
    
    const supabase = createSupabaseClient(supabaseUrl, supabaseServiceRoleKey);
    
    // Initialize Telegram client
    console.log('üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    const telegramClient = await TelegramService.getInstance();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // Get metadata channel
    console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
    const channel = await telegramClient.getMetadataChannel();
    
    // Convert BigInteger to string for compatibility
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
        
    console.log(`üÜî ID –∫–∞–Ω–∞–ª–∞: ${channelId}`);
    
    // Get total message count in channel by iterating through messages
    console.log('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ...');
    let totalMessages = 0;
    let offsetId: number | undefined = undefined;
    const batchSize = 100; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    let batchCount = 0;
    
    while (true) {
      batchCount++;
      console.log(`   –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç ${batchCount} —Å–æ–æ–±—â–µ–Ω–∏–π (offsetId: ${offsetId || '–Ω–∞—á–∞–ª–æ'})...`);
      const messages = await telegramClient.getMessages(channelId, batchSize, offsetId) as unknown[];
      
      if (messages.length === 0) {
        break;
      }
      
      totalMessages += messages.length;
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π. –í—Å–µ–≥–æ: ${totalMessages}`);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      // –ë–µ—Ä–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–∫–µ—Ç–µ
      const lastMessage = messages[messages.length - 1] as { id?: number };
      if (lastMessage.id) {
        offsetId = lastMessage.id;
      } else {
        break;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Telegram API
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log(`   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: ${totalMessages}`);
    
    // Get processed messages from database
    console.log('\nüìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { count: processedMessages, error: processedError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true });
    
    if (processedError) {
      throw new Error(`Error counting processed messages: ${processedError.message}`);
    }
    
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${processedMessages}`);
    
    // Calculate unprocessed messages
    const unprocessedMessages = totalMessages - (processedMessages || 0);
    console.log(`   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unprocessedMessages}`);
    
    // Estimate potential books
    console.log('\nüìà –û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥...');
    
    // Get ratio of messages that contain books from processed data
    const { data: sampleMessages, error: sampleError } = await supabase
      .from('telegram_processed_messages')
      .select('message_id, book_id')
      .limit(100);
    
    if (sampleError) {
      throw new Error(`Error fetching sample messages: ${sampleError.message}`);
    }
    
    // Count messages that are linked to books
    const messagesWithBooks = sampleMessages?.filter(msg => msg.book_id !== null).length || 0;
    const sampleSize = sampleMessages?.length || 1;
    const bookRatio = messagesWithBooks / sampleSize;
    
    console.log(`   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏: ${sampleSize}`);
    console.log(`   –°–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏: ${messagesWithBooks}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏: ${(bookRatio * 100).toFixed(2)}%`);
    
    // Estimate total potential books
    const estimatedTotalBooks = Math.round(totalMessages * bookRatio);
    const estimatedUnprocessedBooks = estimatedTotalBooks - (processedMessages || 0);
    
    console.log(`\nüìä –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥: ${estimatedTotalBooks}`);
    console.log(`   –û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥: ${estimatedUnprocessedBooks}`);
    
    // Current database stats
    console.log('\nüìö –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    const { count: totalBooks, error: totalBooksError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true });
    
    if (totalBooksError) {
      throw new Error(`Error counting total books: ${totalBooksError.message}`);
    }
    
    console.log(`   –í—Å–µ–≥–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${totalBooks}`);
    
    const { count: booksWithFiles, error: filesError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true })
      .not('file_url', 'is', null);
    
    if (filesError) {
      throw new Error(`Error counting books with files: ${filesError.message}`);
    }
    
    console.log(`   –ö–Ω–∏–≥ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏: ${booksWithFiles}`);
    
    // Summary
    console.log('\nüìã –°–í–û–î–ö–ê:');
    console.log(`   ========================================`);
    console.log(`   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: ${totalMessages}`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${processedMessages}`);
    console.log(`   –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unprocessedMessages}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏: ${(bookRatio * 100).toFixed(2)}%`);
    console.log(`   –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥: ${estimatedTotalBooks}`);
    console.log(`   –û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥: ${estimatedUnprocessedBooks}`);
    console.log(`   –ö–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${totalBooks}`);
    console.log(`   –ö–Ω–∏–≥ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏: ${booksWithFiles}`);
    
    // Close Telegram client
    await telegramClient.disconnect();
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    process.exit(1);
  }
}

// Run the script if called directly
if (require.main === module) {
  checkUnprocessedMessages();
}