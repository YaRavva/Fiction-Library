import JSZip from 'jszip';
import dotenv from 'dotenv';

dotenv.config();

async function testReaderLogic() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —á–∏—Ç–∞–ª–∫–∏...');
    
    // URL —Ñ–∞–π–ª–∞ –≤ S3
    const fileUrl = 'https://fiction-library-1760461283197.s3.cloud.ru/4379.zip';
    
    console.log(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${fileUrl}`);
    
    const response = await fetch(fileUrl);
    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
      return;
    }
    
    const arrayBuffer = await response.arrayBuffer();
    const zip = new JSZip();
    const zipContent = await zip.loadAsync(arrayBuffer);
    
    const fileContents: {name: string, content: string}[] = [];
    const filePromises: Promise<void>[] = [];
    
    zipContent.forEach((relativePath: string, zipEntry: JSZip.JSZipObject) => {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã macOS (–∫–∞–∫ –≤ —á–∏—Ç–∞–ª–∫–µ)
      if (!zipEntry.dir && 
          (relativePath.endsWith('.fb2') || relativePath.endsWith('.txt')) &&
          !relativePath.includes('__MACOSX/') &&
          !relativePath.includes('/._')) {
        filePromises.push(
          zipEntry.async('text').then((content: string) => {
            fileContents.push({ name: relativePath, content });
          })
        );
      }
    });
    
    await Promise.all(filePromises);
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${fileContents.length}`);
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —á–∏—Ç–∞–ª–∫–∏
    console.log('\nüîÑ –ò–º–∏—Ç–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ —á–∏—Ç–∞–ª–∫–∏:');
    
    let selectedFile: string | null = null;
    let content: string = '';
    let showFileSelector: boolean = false;
    const files = fileContents;
    
    if (files.length === 1) {
      console.log('  –û—Ç–∫—Ä—ã–≤–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª');
      selectedFile = files[0].name;
      content = files[0].content;
    } else if (files.length > 1) {
      console.log('  –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤');
      showFileSelector = true;
    }
    
    console.log(`  selectedFile: ${selectedFile}`);
    console.log(`  content length: ${content.length}`);
    console.log(`  showFileSelector: ${showFileSelector}`);
    console.log(`  files.length: ${files.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ (–∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
    const shouldShowFileSelector = showFileSelector && files.length > 1;
    console.log(`\nüìã –£—Å–ª–æ–≤–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤:`);
    console.log(`  showFileSelector && files.length > 1 = ${shouldShowFileSelector}`);
    
    if (shouldShowFileSelector) {
      console.log(`  üìÇ –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä —Å ${files.length} —Ñ–∞–π–ª–∞–º–∏:`);
      files.forEach((file, index) => {
        console.log(`    ${index + 1}. ${file.name}`);
      });
    } else if (content.length > 0) {
      console.log(`  üìñ –ë—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: ${selectedFile}`);
    } else {
      console.log(`  ‚ö†Ô∏è  –ù–∏—á–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

testReaderLogic();