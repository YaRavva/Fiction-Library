/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function cleanupProcessedMessages() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å–∏ —Å book_id = null
    console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å book_id = null...');
    const { data: invalidRecords, error: fetchError } = await supabase
      .from('telegram_processed_messages')
      .select('*')
      .is('book_id', null);
      
    if (fetchError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π:', fetchError.message);
      return;
    }
    
    if (!invalidRecords || invalidRecords.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å book_id = null');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${invalidRecords.length} –∑–∞–ø–∏—Å–µ–π —Å book_id = null:`);
    for (const record of invalidRecords) {
      console.log(`  - Message ID: ${record.message_id}`);
      console.log(`    Telegram File ID: ${record.telegram_file_id}`);
      console.log(`    Processed At: ${record.processed_at}`);
    }
    
    // –£–¥–∞–ª—è–µ–º —ç—Ç–∏ –∑–∞–ø–∏—Å–∏
    console.log('\nüóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...');
    const { error: deleteError } = await supabase
      .from('telegram_processed_messages')
      .delete()
      .is('book_id', null);
      
    if (deleteError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', deleteError.message);
      return;
    }
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${invalidRecords.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ Storage, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∫–Ω–∏–≥–∞–º–∏
    console.log('\nüìÇ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ Storage, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∫–Ω–∏–≥–∞–º–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ Storage
    const { data: storageFiles, error: storageError } = await supabase
      .storage
      .from('books')
      .list('', { limit: 100 }); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 100 —Ñ–∞–π–ª–æ–≤
      
    if (storageError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', storageError.message);
      return;
    }
    
    if (!storageFiles || storageFiles.length === 0) {
      console.log('‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ Storage');
      return;
    }
    
    let deletedFiles = 0;
    let deletedRecords = 0;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${storageFiles.length} —Ñ–∞–π–ª–æ–≤ –≤ Storage:`);
    
    for (const file of storageFiles) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º telegram_file_id
      const { data: books, error: booksError } = await supabase
        .from('books')
        .select('id')
        .eq('telegram_file_id', file.name.replace(/\.[^/.]+$/, "")); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        
      if (booksError) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏ –¥–ª—è —Ñ–∞–π–ª–∞ ${file.name}: ${booksError.message}`);
      } else if (!books || books.length === 0) {
        // –§–∞–π–ª –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∫–Ω–∏–≥–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ${file.name}, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∫–Ω–∏–≥–æ–π...`);
        const { error: removeError } = await supabase
          .storage
          .from('books')
          .remove([file.name]);
          
        if (removeError) {
          console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file.name}: ${removeError.message}`);
        } else {
          console.log(`    ‚úÖ –§–∞–π–ª ${file.name} —É–¥–∞–ª–µ–Ω`);
          deletedFiles++;
          
          // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
          const fileId = file.name.replace(/\.[^/.]+$/, ""); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
          console.log(`    üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ telegram_processed_messages –¥–ª—è —Ñ–∞–π–ª–∞ ${fileId}...`);
          const { error: deleteRecordError } = await supabase
            .from('telegram_processed_messages')
            .delete()
            .eq('telegram_file_id', fileId);
            
          if (deleteRecordError) {
            console.log(`      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ñ–∞–π–ª–∞ ${fileId}: ${deleteRecordError.message}`);
          } else {
            console.log(`      ‚úÖ –ó–∞–ø–∏—Å—å –¥–ª—è —Ñ–∞–π–ª–∞ ${fileId} —É–¥–∞–ª–µ–Ω–∞`);
            deletedRecords++;
          }
        }
      } else {
        console.log(`  ‚úÖ –§–∞–π–ª ${file.name} —Å–≤—è–∑–∞–Ω —Å –∫–Ω–∏–≥–æ–π`);
      }
    }
    
    console.log(`\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ ${deletedFiles} —Ñ–∞–π–ª–æ–≤ –∏–∑ Storage –∏ ${deletedRecords} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
cleanupProcessedMessages().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});