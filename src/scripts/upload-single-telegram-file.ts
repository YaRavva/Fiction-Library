#!/usr/bin/env tsx

import 'dotenv/config';
import { uploadFile, createBucket } from '../lib/cloud-ru-s3-service';
import { Buffer } from 'buffer';
import * as fs from 'fs';
import * as path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞ Telegram –≤ Cloud.ru S3
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∞–π–ª–æ–º, –∏–º–µ—é—â–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
 * –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞
 */

async function uploadSingleTelegramFile(filePath: string, customName?: string) {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞ Telegram –≤ Cloud.ru S3');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const bucketName = process.env.S3_BUCKET_NAME || `telegram-files-${Date.now()}`;
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
  const backupDir = path.join(process.cwd(), 'local-backup-telegram');
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }
  
  console.log(`\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏:`);
  console.log(`Cloud.ru Bucket: ${bucketName}`);
  console.log(`–õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${backupDir}`);
  console.log(`–§–∞–π–ª: ${filePath}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${filePath}`);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
  const fileStats = fs.statSync(filePath);
  const fileName = customName || path.basename(filePath);
  const fileBuffer = fs.readFileSync(filePath);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
  const fileSize = `${(fileBuffer.length / 1024 / 1024).toFixed(2)}MB`;
  console.log(`\nüìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:`);
  console.log(`  –ò–º—è —Ñ–∞–π–ª–∞: ${fileName}`);
  console.log(`  –†–∞–∑–º–µ—Ä: ${fileSize}`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–∫–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    console.log(`\nüì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–∫–µ—Ç "${bucketName}"...`);
    try {
      await createBucket(bucketName);
      console.log(`‚úÖ –ë–∞–∫–µ—Ç "${bucketName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
    } catch (error: any) {
      console.log(`‚ö†Ô∏è  –ë–∞–∫–µ—Ç "${bucketName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: ${error.message}`);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è S3
    const safeFileName = fileName.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å._-]/g, '_');
    
    console.log(`\nüì• ${fileName} | ${fileSize}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞
    const localFilePath = path.join(backupDir, fileName);
    const localDir = path.dirname(localFilePath);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(localDir)) {
      fs.mkdirSync(localDir, { recursive: true });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(localFilePath)) {
      fs.writeFileSync(localFilePath, fileBuffer);
      console.log(`üíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${localFilePath}`);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Cloud.ru S3
    const uploadResult = await uploadFile(bucketName, safeFileName, fileBuffer);
    
    console.log(`‚úÖ ${fileName} | –ó–∞–≥—Ä—É–∂–µ–Ω`);
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('\nüìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏:');
    console.log(`  ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω`);
    console.log(`  üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: ${fileName}`);
    console.log(`  üìÅ –ò–º—è –≤ S3: ${safeFileName}`);
    console.log(`  üìè –†–∞–∑–º–µ—Ä: ${fileSize}`);
    console.log(`  üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${backupDir}`);
    
    console.log('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error: any) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error.message);
    console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
if (require.main === module) {
  const args = process.argv.slice(2);
  const filePath = args[0];
  const customName = args[1];
  
  if (!filePath) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: tsx upload-single-telegram-file.ts <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É> [–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ_–∏–º—è]');
    process.exit(1);
  }
  
  uploadSingleTelegramFile(filePath, customName)
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { uploadSingleTelegramFile };