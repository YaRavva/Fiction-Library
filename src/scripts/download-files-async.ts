import { TelegramSyncService } from '../lib/telegram/sync';

/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã –ø—Ä–∏—á–∏–Ω –ø—Ä–æ–ø—É—Å–∫–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 * @param reason –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–¥ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞
 * @returns –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 */
function translateSkipReason(reason: string): string {
  switch (reason) {
    case 'book_not_found':
      return '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
    case 'book_not_imported':
      return '–ö–Ω–∏–≥–∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞';
    case 'already_processed':
      return '–§–∞–π–ª —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ';
    case 'book_already_has_file':
      return '–£ –∫–Ω–∏–≥–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª';
    case 'book_already_has_file_in_books_table':
      return '–£ –∫–Ω–∏–≥–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–∞–π–ª –≤ —Ç–∞–±–ª–∏—Ü–µ books';
    default:
      return reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
  }
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∫–Ω–∏–≥ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
 * @param progressCallback –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
 */
export async function downloadMissingFilesAsync(
  limit: number = 50, 
  progressCallback?: (progress: number, message: string, result?: any) => void
) {
  try {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram (–ª–∏–º–∏—Ç: ${limit})`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (progressCallback) {
      progressCallback(0, 'üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...');
    }
    
    const files = await syncService.getFilesToProcess(limit);
    
    if (files.length === 0) {
      const message = '‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏';
      console.log(message);
      if (progressCallback) {
        progressCallback(100, message);
      }
      return {
        success: true,
        message,
        files: [],
        results: [],
        report: message
      };
    }
    
    const totalFiles = files.length;
    let processedFiles = 0;
    const results: any[] = [];
    let successCount = 0;
    let failedCount = 0;
    let skippedCount = 0;
    
    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    let processedFilesHistory = '';
    
    if (progressCallback) {
      progressCallback(0, `üì• –ù–∞–π–¥–µ–Ω–æ ${totalFiles} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...`);
    }
    
    console.log(`üì• –ù–∞–π–¥–µ–Ω–æ ${totalFiles} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ–¥–Ω–æ–º—É
    for (const file of files) {
      try {
        const progress = Math.round((processedFiles / totalFiles) * 100);
        const message = `${processedFilesHistory}${processedFilesHistory ? '\n' : ''}üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${processedFiles + 1}/${totalFiles}: ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${file.messageId})`;
        
        if (progressCallback) {
          progressCallback(progress, message);
        }
        
        console.log(`üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${processedFiles + 1}/${totalFiles}: ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${file.messageId})`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        const result = await syncService.processSingleFileById(file.messageId as number);
        results.push(result);
        
        if (result.skipped) {
          skippedCount++;
          // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
          const bookInfo = result.bookAuthor && result.bookTitle ? 
            `${result.bookAuthor} - ${result.bookTitle}` : 
            '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
          const fileSize = result.fileSize && typeof result.fileSize === 'number' ? 
            `${Math.round(result.fileSize / 1024)} –ö–ë` : 
            '—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
          const fileInfo = result.filename ? 
            `${result.filename} (${fileSize})` : 
            '–§–∞–π–ª –±–µ–∑ –∏–º–µ–Ω–∏';
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞
          const translatedReason = translateSkipReason(result.reason as string);
          processedFilesHistory += `${processedFilesHistory ? '\n' : ''}‚ö†Ô∏è ${bookInfo}, ${fileInfo}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${translatedReason}`;
          console.log(`‚ö†Ô∏è –§–∞–π–ª ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} –ø—Ä–æ–ø—É—â–µ–Ω: ${translatedReason}`);
        } else if (result.success !== false) {
          successCount++;
          // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
          const bookInfo = result.bookAuthor && result.bookTitle ? 
            `${result.bookAuthor} - ${result.bookTitle}` : 
            '–ö–Ω–∏–≥–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
          const fileSize = result.fileSize && typeof result.fileSize === 'number' ? 
            `${Math.round(result.fileSize / 1024)} –ö–ë` : 
            '—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
          const fileInfo = result.filename ? 
            `${result.filename} (${fileSize})` : 
            '–§–∞–π–ª –±–µ–∑ –∏–º–µ–Ω–∏';
          processedFilesHistory += `${processedFilesHistory ? '\n' : ''}‚úÖ ${bookInfo}, ${fileInfo}, –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ`;
          console.log(`‚úÖ –§–∞–π–ª ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ`);
        } else {
          failedCount++;
          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
          const fileSize = result.fileSize && typeof result.fileSize === 'number' ? 
            `${Math.round(result.fileSize / 1024)} –ö–ë` : 
            '—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
          const fileInfo = result.filename ? 
            `${result.filename} (${fileSize})` : 
            '–§–∞–π–ª –±–µ–∑ –∏–º–µ–Ω–∏';
          processedFilesHistory += `${processedFilesHistory ? '\n' : ''}‚ùå ${fileInfo}, –û—à–∏–±–∫–∞: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
          console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'}: ${result.error}`);
        }
        
        processedFiles++;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (progressCallback) {
          const intermediateProgress = Math.round((processedFiles / totalFiles) * 100);
          const statusMessage = `${processedFilesHistory}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} | –í—Å–µ–≥–æ: ${processedFiles}/${totalFiles}`;
          progressCallback(intermediateProgress, statusMessage, result);
        }
        
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} | –í—Å–µ–≥–æ: ${processedFiles}/${totalFiles}`);
      } catch (error) {
        failedCount++;
        processedFiles++;
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        const result = {
          messageId: file.messageId,
          filename: file.filename,
          success: false,
          error: errorMessage
        };
        results.push(result);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
        const fileSize = file.fileSize && typeof file.fileSize === 'number' ? 
          `${Math.round(file.fileSize / 1024)} –ö–ë` : 
          '—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
        const fileInfo = file.filename ? 
          `${file.filename} (${fileSize})` : 
          '–§–∞–π–ª –±–µ–∑ –∏–º–µ–Ω–∏';
        processedFilesHistory += `${processedFilesHistory ? '\n' : ''}‚ùå ${fileInfo}, –û—à–∏–±–∫–∞: ${errorMessage}`;
        
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'}: ${errorMessage}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (progressCallback) {
          const intermediateProgress = Math.round((processedFiles / totalFiles) * 100);
          const statusMessage = `${processedFilesHistory}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} | –í—Å–µ–≥–æ: ${processedFiles}/${totalFiles}`;
          progressCallback(intermediateProgress, statusMessage, result);
        }
        
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} | –í—Å–µ–≥–æ: ${processedFiles}/${totalFiles}`);
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const finalMessage = `${processedFilesHistory}\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} | –í—Å–µ–≥–æ: ${totalFiles}`;
    if (progressCallback) {
      progressCallback(100, finalMessage);
    }
    
    console.log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} | –í—Å–µ–≥–æ: ${totalFiles}`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
    let report = `üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤\n`;
    report += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    report += `  ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n`;
    report += `  ‚ùå –û—à–∏–±–∫–∏: ${failedCount}\n`;
    report += `  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}\n`;
    report += `  üìö –í—Å–µ–≥–æ: ${totalFiles}\n\n`;
    
    if (processedFilesHistory) {
      report += `${processedFilesHistory}\n`;
    }
    
    return {
      success: true,
      message: finalMessage,
      files,
      results,
      actions: [
        `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`,
        `–£—Å–ø–µ—à–Ω–æ: ${successCount}`,
        `–° –æ—à–∏–±–∫–∞–º–∏: ${failedCount}`,
        `–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`
      ],
      report
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
    if (progressCallback) {
      progressCallback(100, `‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
    return {
      success: false,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
      files: [],
      results: [],
      actions: [],
      report: `‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    };
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  (async () => {
    const limit = process.argv[2] ? parseInt(process.argv[2], 10) : 50;
    
    // –ü—Ä–æ—Å—Ç–æ–π callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
    const progressCallback = (progress: number, message: string, result?: any) => {
      console.log(`\n[–ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%]\n${message}`);
    };
    
    const result = await downloadMissingFilesAsync(limit, progressCallback);
    console.log('\n' + result.report);
  })();
}