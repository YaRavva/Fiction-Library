// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import { config } from 'dotenv';
import { join } from 'path';
import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('  NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('  SUPABASE_SERVICE_ROLE_KEY:', supabaseKey || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å GramJS
  setTimeout(() => {
    process.exit(1);
  }, 1000);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testFinalSeriesUpdate() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–∏–∏');
    
    // –ü–æ–ª—É—á–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, series_id, telegram_post_id')
      .not('telegram_post_id', 'is', null)
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', booksError);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å GramJS
      setTimeout(() => {
        process.exit(1);
      }, 1000);
      return;
    }
    
    if (!books || books.length === 0) {
      console.log('‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å GramJS
      setTimeout(() => {
        process.exit(1);
      }, 1000);
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    books.forEach((book, index) => {
      console.log(`${index + 1}. ${book.author} - ${book.title}`);
      console.log(`   Telegram Post ID: ${book.telegram_post_id}`);
      console.log(`   Series ID: ${book.series_id || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞'}`);
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–µ
    for (const book of books) {
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–Ω–∏–≥—É: ${book.author} - ${book.title}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ telegram_post_id
      if (!book.telegram_post_id) {
        console.log('  ‚ÑπÔ∏è  –£ –∫–Ω–∏–≥–∏ –Ω–µ—Ç telegram_post_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
      const storedMessageId = parseInt(book.telegram_post_id);
      const targetMessageId = storedMessageId + 1; // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
      
      console.log(`  üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å offsetId: ${targetMessageId}...`);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
      const telegramClient = await TelegramService.getInstance();
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const channel = await telegramClient.getMetadataChannel();
      const channelId = typeof channel.id === 'object' && channel.id !== null ? 
        (channel.id as { toString: () => string }).toString() : 
        String(channel.id);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
      const messages = await telegramClient.getMessages(channelId, 5, targetMessageId) as unknown as { id?: number; text?: string }[];
      
      if (!messages || messages.length === 0) {
        console.log('  ‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        continue;
      }
      
      console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π:`);
      messages.forEach((msg, index) => {
        console.log(`    ${index + 1}. ID: ${msg.id || 'undefined'}`);
      });
      
      // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞ 1 –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ (—Å–º–µ—â–µ–Ω–∏–µ)
      const targetMessage = messages.find(msg => msg.id === storedMessageId);
      if (!targetMessage) {
        console.log(`  ‚ÑπÔ∏è  –¢–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${storedMessageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö`);
        continue;
      }
      
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${targetMessage.id}`);
      
      if (!targetMessage.text) {
        console.log('  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞');
        continue;
      }
      
      // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const metadata = MetadataParser.parseMessage(targetMessage.text);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–∞–≤
      if (!metadata.books || metadata.books.length === 0) {
        console.log('  ‚ÑπÔ∏è  –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å–æ—Å—Ç–∞–≤–∞');
        continue;
      }
      
      console.log(`  üìö –ù–∞–π–¥–µ–Ω —Å–æ—Å—Ç–∞–≤ –∏–∑ ${metadata.books.length} –∫–Ω–∏–≥:`);
      metadata.books.forEach((book, index) => {
        console.log(`    ${index + 1}. ${book.title} (${book.year})`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏ –∫–Ω–∏–≥–∞ –∫ —Å–µ—Ä–∏–∏
      if (book.series_id) {
        console.log(`  ‚ÑπÔ∏è  –ö–Ω–∏–≥–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏ ${book.series_id}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
        const { data: series, error: seriesError } = await supabase
          .from('series')
          .select('series_composition')
          .eq('id', book.series_id)
          .single();
        
        if (seriesError) {
          console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∏:', seriesError);
          continue;
        }
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤
        const currentComposition = series.series_composition || [];
        console.log(`  üìä –¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –≤ –±–∞–∑–µ: ${currentComposition.length} –∫–Ω–∏–≥`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–æ—Å—Ç–∞–≤
        let compositionsMatch = true;
        if (currentComposition.length !== metadata.books.length) {
          compositionsMatch = false;
        } else {
          for (let j = 0; j < metadata.books.length; j++) {
            const bookFromMessage = metadata.books[j];
            const bookFromSeries = currentComposition[j];
            if (bookFromMessage.title !== bookFromSeries.title || bookFromMessage.year !== bookFromSeries.year) {
              compositionsMatch = false;
              break;
            }
          }
        }
        
        if (!compositionsMatch) {
          console.log('  ‚ö†Ô∏è  –°–æ—Å—Ç–∞–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
        } else {
          console.log('  ‚úÖ –°–æ—Å—Ç–∞–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
      } else {
        console.log('  üìó –ö–Ω–∏–≥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏');
        console.log('  ‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏...');
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é
        const seriesData: any = {
          title: book.title,
          author: book.author,
          description: metadata.description || '',
          genres: metadata.genres.length > 0 ? metadata.genres : [],
          tags: metadata.tags.length > 0 ? metadata.tags : [],
          rating: metadata.rating || null,
          telegram_post_id: String(targetMessage.id || ''),
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          series_composition: metadata.books
        };
        
        const { data: insertedSeries, error: seriesError } = await supabase
          .from('series')
          .insert(seriesData)
          .select()
          .single();
        
        if (seriesError) {
          console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏:', seriesError);
        } else {
          const newSeriesId = (insertedSeries as any).id;
          console.log(`  ‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newSeriesId}`);
          
          // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –∫ —Å–µ—Ä–∏–∏
          const { error: updateError } = await supabase
            .from('books')
            .update({ series_id: newSeriesId })
            .eq('id', book.id);
          
          if (updateError) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–Ω–∏–≥–∏ –∫ —Å–µ—Ä–∏–∏:', updateError);
          } else {
            console.log('  ‚úÖ –ö–Ω–∏–≥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏');
          }
        }
      }
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å GramJS
    setTimeout(() => {
      process.exit(0);
    }, 1000);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑-–∑–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã —Å GramJS
    setTimeout(() => {
      process.exit(1);
    }, 1000);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFinalSeriesUpdate();