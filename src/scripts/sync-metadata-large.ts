import { config } from 'dotenv';
import { TelegramSyncService } from '../lib/telegram/sync';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config();

async function syncMetadata() {
  console.log('üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç)');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const requiredEnvVars = ['TELEGRAM_API_ID', 'TELEGRAM_API_HASH', 'TELEGRAM_SESSION'];
    const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);
    
    if (missingEnvVars.length > 0) {
      console.warn(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingEnvVars.join(', ')}`);
      process.exit(1);
    }
    
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
    console.log('üì• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ª–∏–º–∏—Ç: 100)...');
    const result = await syncService.syncBooks(100);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:');
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}`);
    console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.added}`);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}`);
    console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped}`);
    console.log(`   –û—à–∏–±–æ–∫: ${result.errors}`);
    
    if (result.details && result.details.length > 0) {
      console.log('\nüìã –î–µ—Ç–∞–ª–∏:');
      result.details.forEach((detail: any, index: number) => {
        let status = '‚úÖ';
        if (detail.status === 'error') {
          status = '‚ùå';
        } else if (detail.status === 'skipped') {
          status = '‚ÑπÔ∏è';
        } else if (detail.status === 'updated') {
          status = 'üîÑ';
        } else if (detail.status === 'added') {
          status = 'üÜï';
        }
        
        console.log(`${index + 1}. ${status} ${detail.msgId || '–ë–µ–∑ ID'}`);
        if (detail.bookTitle && detail.bookAuthor) {
          console.log(`   –ö–Ω–∏–≥–∞: "${detail.bookTitle}" –∞–≤—Ç–æ—Ä–∞ ${detail.bookAuthor}`);
        }
        if (detail.reason) {
          console.log(`   –ü—Ä–∏—á–∏–Ω–∞: ${detail.reason}`);
        }
        if (detail.error) {
          console.log(`   –û—à–∏–±–∫–∞: ${detail.error}`);
        }
        console.log('---');
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

syncMetadata();