import { config } from 'dotenv';
import { DownloadWorker } from '@/lib/telegram/download-worker';
import { DownloadQueue } from '@/lib/telegram/queue';
import { serverSupabase } from '@/lib/serverSupabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: '.env' });

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npx tsx src/scripts/test-queue-system.ts [command]
 * 
 * –ö–æ–º–∞–Ω–¥—ã:
 * - add-tasks [count] - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
 * - start-worker - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä
 * - check-queue - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
 * - clear-queue - –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
 */

async function testQueueSystem() {
  const args = process.argv.slice(2);
  const command = args[0] || 'help';

  try {
    switch (command) {
      case 'add-tasks':
        const count = args[1] ? parseInt(args[1]) : 5;
        await addTestTasks(count);
        break;
        
      case 'start-worker':
        await startWorker();
        break;
        
      case 'check-queue':
        await checkQueue();
        break;
        
      case 'clear-queue':
        await clearQueue();
        break;
        
      case 'help':
      default:
        showHelp();
        break;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

async function addTestTasks(count: number) {
  console.log(`üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å...\n`);
  
  const worker = await DownloadWorker.getInstance();
  
  for (let i = 1; i <= count; i++) {
    try {
      const messageId = `test_message_${Date.now()}_${i}`;
      const channelId = 'test_channel';
      
      await worker.addTask(messageId, channelId, 0);
      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${i} –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${messageId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${i}:`, error);
    }
  }
  
  console.log(`\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á`);
}

async function startWorker() {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
  console.log('‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω');
  console.log('‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å file-service.ts');
  process.exit(0);
  
  /*
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...\n');
  
  const worker = await DownloadWorker.getInstance();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  await worker.start(10000);
  
  console.log('‚úÖ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  const shutdown = async () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞...');
    await worker.stop();
    process.exit(0);
  };
  
  process.on('SIGINT', shutdown);
  process.on('SIGTERM', shutdown);
  
  // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
  await new Promise(() => {});
  */
}

async function checkQueue() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏...\n');
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Supabase
  const { data: allTasks, error: allTasksError } = await serverSupabase
    .from('telegram_download_queue')
    .select('status');

  if (allTasksError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', allTasksError);
    return;
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const statusStats: Record<string, number> = {};
  if (allTasks) {
    allTasks.forEach((task: any) => {
      statusStats[task.status] = (statusStats[task.status] || 0) + 1;
    });
  }

  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:');
  for (const [status, count] of Object.entries(statusStats)) {
    console.log(`  ${status}: ${count}`);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
  const queue = new DownloadQueue();
  const activeTasks = await queue.getActiveTasks(10);
  
  if (activeTasks.length > 0) {
    console.log(`\nüì• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${activeTasks.length}):`);
    activeTasks.forEach((task, index) => {
      console.log(`  ${index + 1}. ID: ${task.id.slice(0, 8)}...`);
      console.log(`     –°–æ–æ–±—â–µ–Ω–∏–µ: ${task.message_id}`);
      console.log(`     –°—Ç–∞—Ç—É—Å: ${task.status}`);
      console.log(`     –°–æ–∑–¥–∞–Ω: ${new Date(task.created_at).toLocaleString()}`);
      console.log('');
    });
  } else {
    console.log('\nüì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
  }
}

async function clearQueue() {
  console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏...\n');
  
  const { error } = await serverSupabase
    .from('telegram_download_queue')
    .delete()
    .neq('id', '00000000-0000-0000-0000-000000000000'); // –£—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å–µ–≥–¥–∞ –∏—Å—Ç–∏–Ω–Ω–æ
  
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
    return;
  }
  
  console.log('‚úÖ –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞');
}

function showHelp() {
  console.log(`
üìö –¢–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–µ—Ä–µ–¥–µ–π Telegram

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npx tsx src/scripts/test-queue-system.ts [command]

–ö–æ–º–∞–Ω–¥—ã:
  add-tasks [count]    –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
  start-worker         –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Ä–∫–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
  check-queue          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
  clear-queue          –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
  help                 –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npx tsx src/scripts/test-queue-system.ts add-tasks 10
  npx tsx src/scripts/test-queue-system.ts start-worker
  npx tsx src/scripts/test-queue-system.ts check-queue
`);
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
testQueueSystem();