// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import { config } from 'dotenv';
import { join } from 'path';
import { TelegramService } from '../lib/telegram/client';
import { MetadataParser } from '../lib/telegram/parser';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const envPath = join(process.cwd(), '.env');
config({ path: envPath });

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('  NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('  SUPABASE_SERVICE_ROLE_KEY:', supabaseKey || '–Ω–µ –∑–∞–¥–∞–Ω');
  console.error('\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function updateSeriesByMessageId() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–∏–∏ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–∏–≥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { data: book, error: bookError } = await supabase
      .from('books')
      .select('id, title, author, series_id, telegram_post_id')
      .eq('title', '—Ü–∏–∫–ª –ö–æ—Ä–∞–±–ª—å –≤–æ —Ñ—å–æ—Ä–¥–µ')
      .eq('author', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–∞—è')
      .single();
    
    if (bookError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:', bookError);
      return;
    }
    
    if (!book) {
      console.log('‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: ${book.author} - ${book.title}`);
    console.log(`  Telegram Post ID: ${book.telegram_post_id}`);
    console.log(`  Series ID: ${book.series_id || '–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞'}`);
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageId = parseInt(book.telegram_post_id);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
    const telegramClient = await TelegramService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const channel = await telegramClient.getMetadataChannel();
    const channelId = typeof channel.id === 'object' && channel.id !== null ? 
      (channel.id as { toString: () => string }).toString() : 
      String(channel.id);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ–¥—Ö–æ–¥, —á—Ç–æ –∏ –≤ debug-message.ts)
    console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${messageId}...`);
    
    // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º offsetId —Ä–∞–≤–Ω—ã–π messageId
    const messages = await telegramClient.getMessages(channelId, 5, messageId) as unknown as { id?: number; text?: string }[];
    
    if (!messages || messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º ID
    const targetMessage = messages.find(msg => msg.id === messageId);
    if (!targetMessage) {
      console.log('‚ÑπÔ∏è  –¢–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (Telegram –≤–µ—Ä–Ω—É–ª —Å–æ—Å–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)');
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å ID –Ω–∞ 1 (–∫–∞–∫ –º—ã –≤–∏–¥–µ–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö)
      console.log(`üîç –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${messageId + 1}...`);
      const messagesPlusOne = await telegramClient.getMessages(channelId, 5, messageId + 1) as unknown as { id?: number; text?: string }[];
      
      if (messagesPlusOne && messagesPlusOne.length > 0) {
        const targetMessagePlusOne = messagesPlusOne.find(msg => msg.id === messageId + 1);
        if (targetMessagePlusOne) {
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ —Å ID + 1: ${targetMessagePlusOne.id}`);
        } else {
          console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–∂–µ —Å ID + 1');
          return;
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID + 1');
        return;
      }
    } else {
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: ${targetMessage.id}`);
    }
    
    const messageToUse = targetMessage || (messages.find(msg => msg.id === messageId + 1) as { id?: number; text?: string });
    
    if (!messageToUse || !messageToUse.text) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞');
      return;
    }
    
    // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const metadata = MetadataParser.parseMessage(messageToUse.text);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–∞–≤
    if (!metadata.books || metadata.books.length === 0) {
      console.log('‚ÑπÔ∏è  –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å–æ—Å—Ç–∞–≤–∞');
      return;
    }
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω —Å–æ—Å—Ç–∞–≤ –∏–∑ ${metadata.books.length} –∫–Ω–∏–≥`);
    
    // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤
    if (book.series_id) {
      console.log(`‚ÑπÔ∏è  –ö–Ω–∏–≥–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏ ${book.series_id}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
      const { data: series, error: seriesError } = await supabase
        .from('series')
        .select('series_composition')
        .eq('id', book.series_id)
        .single();
      
      if (seriesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∏:', seriesError);
        return;
      }
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤
      const currentComposition = series.series_composition || [];
      console.log(`üìä –¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –≤ –±–∞–∑–µ: ${currentComposition.length} –∫–Ω–∏–≥`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Å–æ—Å—Ç–∞–≤
      let compositionsMatch = true;
      if (currentComposition.length !== metadata.books.length) {
        compositionsMatch = false;
      } else {
        for (let j = 0; j < metadata.books.length; j++) {
          const bookFromMessage = metadata.books[j];
          const bookFromSeries = currentComposition[j];
          if (bookFromMessage.title !== bookFromSeries.title || bookFromMessage.year !== bookFromSeries.year) {
            compositionsMatch = false;
            break;
          }
        }
      }
      
      if (!compositionsMatch) {
        console.log('‚ö†Ô∏è  –°–æ—Å—Ç–∞–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏
        const { error: updateError } = await supabase
          .from('series')
          .update({ series_composition: metadata.books })
          .eq('id', book.series_id);
        
        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–∞–≤–∞ —Å–µ—Ä–∏–∏:', updateError);
        } else {
          console.log('‚úÖ –°–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω');
        }
      } else {
        console.log('‚úÖ –°–æ—Å—Ç–∞–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
      }
    } else {
      // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é
      console.log('üìó –ö–Ω–∏–≥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é...');
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é
      const seriesData: any = {
        title: book.title,
        author: book.author,
        description: metadata.description || '',
        genres: metadata.genres.length > 0 ? metadata.genres : [],
        tags: metadata.tags.length > 0 ? metadata.tags : [],
        rating: metadata.rating || null,
        telegram_post_id: String(messageToUse.id || ''),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        series_composition: metadata.books
      };
      
      const { data: insertedSeries, error: seriesError } = await supabase
        .from('series')
        .insert(seriesData)
        .select()
        .single();
      
      if (seriesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏:', seriesError);
      } else {
        const newSeriesId = (insertedSeries as any).id;
        console.log(`‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${newSeriesId}`);
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –∫ —Å–µ—Ä–∏–∏
        const { error: updateError } = await supabase
          .from('books')
          .update({ series_id: newSeriesId })
          .eq('id', book.id);
        
        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–Ω–∏–≥–∏ –∫ —Å–µ—Ä–∏–∏:', updateError);
        } else {
          console.log('‚úÖ –ö–Ω–∏–≥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏');
        }
      }
    }
    
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É Telegram –∫–ª–∏–µ–Ω—Ç–∞
    if (typeof (telegramClient as unknown as { disconnect?: () => Promise<void> }).disconnect === 'function') {
      await (telegramClient as unknown as { disconnect: () => Promise<void> }).disconnect!();
    }
    
    console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updateSeriesByMessageId();