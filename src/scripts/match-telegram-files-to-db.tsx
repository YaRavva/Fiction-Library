// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import dotenv from 'dotenv';
dotenv.config();

import { TelegramService } from '../lib/telegram/client';
import { TelegramSyncService } from '../lib/telegram/sync';
import { getSupabaseAdmin } from '../lib/supabase';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞
function extractWordsFromFilename(filename: string): string[] {
    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    const words = nameWithoutExt
        .split(/[_\-\s]+/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º –∏ –¥–µ—Ñ–∏—Å–∞–º
        .filter(word => word.length > 1) // –£–±–∏—Ä–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
        .map(word => word.trim().toLowerCase()) // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        .filter(word => word.length > 0); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞
    
    return words;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ —Å–ª–æ–≤–∞–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
async function searchBooksByWords(admin: any, words: string[]) {
    // –ò—â–µ–º –∫–Ω–∏–≥–∏, –≥–¥–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const searchPromises = words.map(async (word) => {
        const { data: titleMatches, error: titleError } = await (admin as any)
            .from('books')
            .select('id, title, author')
            .ilike('title', `%${word}%`)
            .limit(3);
        
        const { data: authorMatches, error: authorError } = await (admin as any)
            .from('books')
            .select('id, title, author')
            .ilike('author', `%${word}%`)
            .limit(3);
        
        const allMatches = [...(titleMatches || []), ...(authorMatches || [])];
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        const uniqueMatches = allMatches.filter((book, index, self) => 
            index === self.findIndex(b => b.id === book.id)
        );
        
        return uniqueMatches;
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const results = await Promise.all(searchPromises);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allMatches = results.flat();
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
    const uniqueMatches = allMatches.filter((book, index, self) => 
        index === self.findIndex(b => b.id === book.id)
    );
    
    return uniqueMatches.slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
}

async function matchTelegramFilesToDB() {
    console.log('=== –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í TELEGRAM –° –ö–ù–ò–ì–ê–ú–ò –í –ë–î ===\n');
    
    let client: TelegramService | null = null;
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∫–ª–∏–µ–Ω—Ç–∞
        console.log('1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
        client = await TelegramService.getInstance();
        console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
        console.log('2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É —Å —Ñ–∞–π–ª–∞–º–∏...');
        const filesChannel = await client.getFilesChannel();
        console.log('   ‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å —Ñ–∞–π–ª–∞–º–∏ –ø–æ–ª—É—á–µ–Ω');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
        console.log('3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏...');
        const messages = await client.getMessages(filesChannel, 10);
        
        if (messages.length === 0) {
            console.log('   ‚ö†Ô∏è  –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ');
            return;
        }
        
        console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏\n`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ Supabase
        const admin = getSupabaseAdmin();
        if (!admin) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Supabase Admin');
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        console.log('4. –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤ –ë–î:');
        for (let i = 0; i < Math.min(messages.length, 5); i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
            const msg: any = messages[i];
            
            if (!msg.document) {
                continue;
            }
            
            // –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            let filename = 'unknown.fb2';
            if (msg.document.attributes) {
                const fileNameAttr = msg.document.attributes.find((attr: any) => 
                    attr.className === 'DocumentAttributeFilename'
                );
                if (fileNameAttr && fileNameAttr.fileName) {
                    filename = fileNameAttr.fileName;
                }
            }
            
            console.log(`\n   –§–∞–π–ª ${i + 1}: ${filename}`);
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞
            const words = extractWordsFromFilename(filename);
            console.log(`     –°–ª–æ–≤–∞: ${words.join(', ')}`);
            
            // –ò—â–µ–º –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–ª–æ–≤–∞–º
            console.log(`     –ü–æ–∏—Å–∫ –≤ –ë–î –ø–æ —Å–ª–æ–≤–∞–º...`);
            
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å)
                const metadata = TelegramSyncService.extractMetadataFromFilename(filename);
                if (metadata.author !== 'Unknown') {
                    const { data: exactMatch, error: exactError } = await (admin as any)
                        .from('books')
                        .select('id, title, author')
                        .eq('title', metadata.title)
                        .eq('author', metadata.author)
                        .single();
                    
                    if (!exactError && exactMatch) {
                        console.log(`     ‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${exactMatch.title}" –∞–≤—Ç–æ—Ä–∞ ${exactMatch.author}`);
                        console.log(`        ID: ${exactMatch.id}`);
                        continue;
                    }
                }
                
                // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                const potentialMatches = await searchBooksByWords(admin, words);
                
                if (potentialMatches.length > 0) {
                    console.log(`     üîÑ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (${potentialMatches.length}):`);
                    potentialMatches.slice(0, 5).forEach((book: any, index: number) => {
                        console.log(`        ${index + 1}. "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (ID: ${book.id})`);
                    });
                } else {
                    console.log(`     ‚ö†Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                }
            } catch (dbError) {
                console.log(`     ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ë–î: ${dbError}`);
            }
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
        if (client && typeof (client as any).disconnect === 'function') {
            await (client as any).disconnect();
            console.log('\n5. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...');
            console.log('   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
        }
        
        console.log('\n=== –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
        
        // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (client && typeof (client as any).disconnect === 'function') {
            try {
                await (client as any).disconnect();
                console.log('   ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            } catch (disconnectError) {
                console.log('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', disconnectError);
            }
        }
    }
}

matchTelegramFilesToDB().catch(console.error);