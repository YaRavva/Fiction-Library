import { config } from 'dotenv';
import { resolve } from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
config({ path: resolve(__dirname, '../../.env') });

async function supabaseExample() {
  console.log('–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase –≤ –ø—Ä–æ–µ–∫—Ç–µ Fiction Library');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
      return;
    }
    
    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ
    console.log('\nüîç –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ...');
    const { count, error: countError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥:', countError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${count}`);
    }
    
    // –ü—Ä–∏–º–µ—Ä 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 5 –∫–Ω–∏–≥ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –∞–≤—Ç–æ—Ä–∞–º–∏
    console.log('\nüìö –ü—Ä–∏–º–µ—Ä 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 5 –∫–Ω–∏–≥...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author')
      .limit(5);
    
    if (booksError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', booksError.message);
    } else {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${books.length} –∫–Ω–∏–≥:`);
      books.forEach((book, index) => {
        console.log(`  ${index + 1}. "${book.title}" - ${book.author}`);
      });
    }
    
    // –ü—Ä–∏–º–µ—Ä 3: –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∞–≤—Ç–æ—Ä—É
    console.log('\nüîç –ü—Ä–∏–º–µ—Ä 3: –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∞–≤—Ç–æ—Ä—É...');
    const authorSearch = '–¢–æ–ª—Å—Ç–æ–π'; // –ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞
    const { data: tolkienBooks, error: searchError } = await supabase
      .from('books')
      .select('id, title, author')
      .ilike('author', `%${authorSearch}%`)
      .limit(5);
    
    if (searchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥:', searchError.message);
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tolkienBooks.length} –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞ "${authorSearch}":`);
      if (tolkienBooks.length > 0) {
        tolkienBooks.forEach((book, index) => {
          console.log(`  ${index + 1}. "${book.title}"`);
        });
      } else {
        console.log('  –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    }
    
    console.log('\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Supabase:', error);
  }
}

supabaseExample().catch(console.error);