import { config } from 'dotenv';
import { resolve } from 'path';
import { TelegramSyncService } from '../lib/telegram/sync';
import { getSupabaseAdmin } from '../lib/supabase';
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º S3 —Å–µ—Ä–≤–∏—Å –≤–º–µ—Å—Ç–æ Supabase storage
import { putObject } from '../lib/s3-service';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –∫–Ω–∏–≥, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
 * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export async function syncMissingCovers(limit?: number) {
  try {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –∫–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫ (–ª–∏–º–∏—Ç: ${limit ?? '–≤—Å–µ'})`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫...');
    const supabase = getSupabaseAdmin();
    if (!supabase) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
    }
    
    // @ts-ignore
    const { data: booksWithoutCovers, error: fetchError } = await supabase
      .from('books')
      .select('*')
      .is('cover_url', null)
      .order('id');
    
    if (fetchError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫: ${fetchError.message}`);
    }
    
    if (!booksWithoutCovers || booksWithoutCovers.length === 0) {
      console.log('‚úÖ –ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫');
      return {
        success: true,
        message: '–ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫',
        processed: 0,
        updated: 0,
        skipped: 0,
        errors: 0
      };
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${booksWithoutCovers.length} –∫–Ω–∏–≥ –±–µ–∑ –æ–±–ª–æ–∂–µ–∫`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    let processed = 0;
    let updated = 0;
    let skipped = 0;
    let errors = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–Ω–∏–≥—É
    for (const book of booksWithoutCovers) {
      try {
        const typedBook = book as any;
        console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–∏–≥—É: ${typedBook.author} - ${typedBook.title}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ telegram_post_id (ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏)
        if (!typedBook.telegram_post_id) {
          console.log(`  ‚ÑπÔ∏è –£ –∫–Ω–∏–≥–∏ –Ω–µ—Ç telegram_post_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          skipped++;
          continue;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –ø–æ ID
        console.log(`  üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${typedBook.telegram_post_id} –∏–∑ Telegram...`);
        const channel = await (syncService as any).telegramClient.getMetadataChannel();
        if (!channel) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª');
        }
        
        // Convert BigInteger to string for compatibility
        const channelId = typeof channel.id === 'object' && channel.id !== null ? 
          (channel.id as { toString: () => string }).toString() : 
          String(channel.id);
          
        const messages: any[] = await (syncService as any).telegramClient.getMessages(channelId, 1, parseInt(typedBook.telegram_post_id));
        if (!messages || messages.length === 0) {
          console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          skipped++;
          continue;
        }
        
        const msg = messages[0];
        const anyMsg = msg as unknown as { [key: string]: unknown };
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –æ–±–ª–æ–∂–µ–∫ –∏–∑ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
        const coverUrls: string[] = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if (anyMsg.media) {
          console.log(`  üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ${anyMsg.id} (—Ç–∏–ø: ${(anyMsg.media as { className: string }).className})`);
          
          // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–ø—Ä–µ–≤—å—é (MessageMediaWebPage) - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π –¥–ª—è –æ–±–ª–æ–∂–µ–∫
          if ((anyMsg.media as { className: string }).className === 'MessageMediaWebPage' && (anyMsg.media as { webpage?: { photo?: unknown } }).webpage?.photo) {
            console.log(`    ‚Üí –í–µ–±-–ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ`);
            try {
              console.log(`    ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é...`);
              const result = await Promise.race([
                (syncService as any).telegramClient.downloadMedia((anyMsg.media as { webpage: { photo: unknown } }).webpage.photo),
                new Promise<never>((_, reject) => 
                  setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000))
              ]);
              const photoBuffer = result instanceof Buffer ? result : null;
              if (photoBuffer) {
                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                console.log(`    ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 Storage: ${photoKey}`);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º S3 —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                const coversBucket = process.env.S3_COVERS_BUCKET_NAME || process.env.S3_BUCKET_NAME || 'fiction-library-covers';
                await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è Cloud.ru S3
                const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                coverUrls.push(photoUrl);
                console.log(`    ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
              } else {
                console.warn(`    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
              }
            } catch (err) {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é:`, err);
            }
          }
          // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (MessageMediaPhoto)
          else if ((anyMsg.media as { photo?: unknown }).photo) {
            console.log(`    ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ`);
            try {
              console.log(`    ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ...`);
              const result = await Promise.race([
                (syncService as any).telegramClient.downloadMedia(msg),
                new Promise<never>((_, reject) => 
                  setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000)
                )
              ]);
              const photoBuffer = result instanceof Buffer ? result : null;
              if (photoBuffer) {
                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                console.log(`    ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 Storage: ${photoKey}`);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º S3 —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                const coversBucket = process.env.S3_COVERS_BUCKET_NAME || process.env.S3_BUCKET_NAME || 'fiction-library-covers';
                await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è Cloud.ru S3
                const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                coverUrls.push(photoUrl);
                console.log(`    ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
              } else {
                console.warn(`    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
              }
            } catch (err) {
              console.error(`    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err);
            }
          }
          // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
          else if ((anyMsg.media as { document?: unknown }).document) {
            const mimeType = (anyMsg.media as { document: { mimeType?: string } }).document.mimeType;
            if (mimeType && mimeType.startsWith('image/')) {
              console.log(`    ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç: ${mimeType})`);
              try {
                console.log(`    ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...`);
                const result = await Promise.race([
                  (syncService as any).telegramClient.downloadMedia(msg),
                  new Promise<never>((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000))
                ]);

                const photoBuffer = result instanceof Buffer ? result : null;
                if (photoBuffer) {
                  const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                  console.log(`    ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 Storage: ${photoKey}`);
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º S3 —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                  const coversBucket = process.env.S3_COVERS_BUCKET_NAME || process.env.S3_BUCKET_NAME || 'fiction-library-covers';
                  await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è Cloud.ru S3
                  const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                  coverUrls.push(photoUrl);
                  console.log(`    ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                } else {
                  console.warn(`    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                }
              } catch (err) {
                console.error(`    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err);
              }
            }
          }
        }
        
        // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–ª–æ–∂–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É
        if (coverUrls.length > 0) {
          console.log(`  üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É —Å –æ–±–ª–æ–∂–∫–æ–π...`);
          const updateData: any = { cover_url: coverUrls[0] };
          // @ts-ignore
          const { error: updateError } = await (supabase as any)
            .from('books')
            .update(updateData)
            .eq('id', typedBook.id);
          
          if (updateError) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:`, updateError);
            errors++;
          } else {
            console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –æ–±–ª–æ–∂–∫–æ–π`);
            updated++;
          }
        } else {
          console.log(`  ‚ÑπÔ∏è –û–±–ª–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          skipped++;
        }
        
        processed++;
      } catch (error) {
        const typedBook = book as any;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥–∏ ${typedBook.author} - ${typedBook.title}:`, error);
        errors++;
      }
    }
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
    
    return {
      success: true,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed} –∫–Ω–∏–≥, –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∫–Ω–∏–≥`,
      processed,
      updated,
      skipped,
      errors
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–ª–æ–∂–µ–∫:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–ª–æ–∂–µ–∫',
      processed: 0,
      updated: 0,
      skipped: 0,
      errors: 1
    };
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
if (require.main === module) {
  syncMissingCovers()
    .then(result => {
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–ª–æ–∂–µ–∫:', result);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
      setTimeout(() => {
        console.log('üîí –°–∫—Ä–∏–ø—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
      }, 1000);
    })
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞:', error);
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      setTimeout(() => {
        process.exit(1);
      }, 1000);
    });
}