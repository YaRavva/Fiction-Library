import { UniversalFileMatcher } from '../lib/universal-file-matcher-enhanced';
import { serverSupabase } from '../lib/serverSupabase';
import { TelegramFileService } from '../lib/telegram/file-service';

interface Book {
  id: string;
  title: string;
  author: string;
  publication_year?: number;
}

interface FileOption {
  message_id: number;
  file_name: string;
  mime_type: string;
  file_size?: number;
}

async function testUniversalMatcherOnRealData() {
  console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  console.log('–ó–∞–≥—Ä—É–∑–∫–∞ 2000 —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –∏–∑ –ë–î (—Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤)
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    const { data: books, error: booksError } = await serverSupabase
      .from('books')
      .select('id, title, author, publication_year')
      .not('title', 'is', null)
      .not('author', 'is', null)
      .is('file_url', null); // –¢–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    
    if (booksError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥:', booksError);
      return;
    }
    
    if (!books || books.length === 0) {
      console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TelegramFileService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const fileService = await TelegramFileService.getInstance();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º 2000 —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram (–±–∞—Ç—á–∞–º–∏ –ø–æ 1000)
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
    const allFiles = [];
    
    let offsetId: number | undefined = undefined;
    let hasMoreFiles = true;
    let fileBatchIndex = 0;
    
    while (hasMoreFiles && allFiles.length < 2000) {
      fileBatchIndex++;
      const batchLimit = Math.min(1000, 2000 - allFiles.length);
      console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç: ${batchLimit}, offsetId: ${offsetId})...`);
      
      const filesBatch = await fileService.getFilesToProcess(batchLimit, offsetId);

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${filesBatch.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      if (filesBatch.length === 0) {
        console.log('–ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        break;
      }

      console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${filesBatch.length} —Ñ–∞–π–ª–æ–≤ –≤ –±–∞—Ç—á–µ ${fileBatchIndex}`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const telegramFiles: FileOption[] = filesBatch
        .filter(item => item && item.filename && item.messageId)
        .map(item => ({
          message_id: parseInt(String(item.messageId), 10),
          file_name: item.filename as string,
          mime_type: item.mimeType as string || 'unknown',
          file_size: item.fileSize ? parseInt(String(item.fileSize), 10) : undefined
        }))
        .filter(file => file.file_name); // –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å –∏–º–µ–Ω–∞–º–∏

      console.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${telegramFiles.length} —Ñ–∞–π–ª–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ –æ–±—â–µ–π –≤—ã–±–æ—Ä–∫–µ
      allFiles.push(...telegramFiles);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
      if (filesBatch.length < batchLimit) {
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Ñ–∞–π–ª–æ–≤, —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —Ñ–∞–π–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        hasMoreFiles = false;
        console.log('–§–∞–π–ª—ã –≤ –∫–∞–Ω–∞–ª–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å');
      } else {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –∏ –±–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID
        const messageIds = filesBatch
          .map(item => parseInt(String(item.messageId), 10))
          .filter(id => !isNaN(id) && id > 0)
          .sort((a, b) => a - b); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        
        if (messageIds.length > 0) {
          // offsetId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          offsetId = messageIds[messageIds.length - 1];
          console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω offsetId: ${offsetId}`);
        } else {
          hasMoreFiles = false;
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏–π');
        }
      }
      
      console.log(`–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ: ${allFiles.length}/2000`);
    }
    
    if (allFiles.length === 0) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ Telegram');
      return;
    }
    
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allFiles.length} —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const indices = Array.from({ length: allFiles.length }, (_, i) => i);
    for (let i = indices.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [indices[i], indices[j]] = [indices[j], indices[i]];
    }
    
    console.log('\\n–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π...');
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    const allMatches = [];
    
    for (let i = 0; i < allFiles.length; i++) {
      const file = allFiles[i];
      
      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–∏–≥—É –¥–ª—è —Ñ–∞–π–ª–∞
      let bestMatch = null;
      let bestScore = 0;
      
      for (const book of books as any[]) {
        const result = UniversalFileMatcher.matchFileToBook(file, book);
        if (result.score > bestScore) {
          bestScore = result.score;
          bestMatch = { 
            book: { author: book.author, title: book.title }, 
            score: result.score
          };
        }
      }
      
      if (bestMatch) {
        allMatches.push({
          file: file.file_name,
          book: bestMatch.book,
          score: bestMatch.score
        });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ—Ü–µ–Ω–∫–µ
    allMatches.sort((a, b) => b.score - a.score);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã: –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (–º–µ–Ω—å—à–µ 65) –∏ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ (65 –∏ –±–æ–ª—å—à–µ)
    const belowThresholdMatches = allMatches.filter(match => match.score < 65);
    const aboveThresholdMatches = allMatches.filter(match => match.score >= 65);
    
    // –ë–µ—Ä–µ–º –ø–æ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (–±–ª–∏–∂–∞–π—à–∏—Ö –∫ –ø–æ—Ä–æ–≥—É)
    const belowThresholdToShow = belowThresholdMatches
      .sort((a, b) => b.score - a.score) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∫ –ø–æ—Ä–æ–≥—É
      .slice(0, 10);
      
    const aboveThresholdToShow = aboveThresholdMatches
      .sort((a, b) => a.score - b.score) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∫ –ø–æ—Ä–æ–≥—É
      .slice(0, 10);
    
    // –í—ã–≤–æ–¥–∏–º 10 –∑–∞–ø–∏—Å–µ–π –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (–±–ª–∏–∂–∞–π—à–∏—Ö –∫ 65)
    console.log('\\n=== 10 –∑–∞–ø–∏—Å–µ–π –ù–ò–ñ–ï –ø–æ—Ä–æ–≥–∞ (—Å –æ—Ü–µ–Ω–∫–æ–π < 65, –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –ø–æ—Ä–æ–≥—É) ===');
    if (belowThresholdToShow.length > 0) {
      for (let i = 0; i < belowThresholdToShow.length; i++) {
        console.log(`${i + 1}. ${belowThresholdToShow[i].file} -> ${belowThresholdToShow[i].book.author} - ${belowThresholdToShow[i].book.title} (–æ—Ü–µ–Ω–∫–∞: ${belowThresholdToShow[i].score})`);
      }
    } else {
      console.log('  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞');
    }
    
    // –í—ã–≤–æ–¥–∏–º 10 –∑–∞–ø–∏—Å–µ–π –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ (–±–ª–∏–∂–∞–π—à–∏—Ö –∫ 65)
    console.log('\\n=== 10 –∑–∞–ø–∏—Å–µ–π –í–´–®–ï –ø–æ—Ä–æ–≥–∞ (—Å –æ—Ü–µ–Ω–∫–æ–π >= 65, –±–ª–∏–∂–∞–π—à–∏—Ö –∫ –ø–æ—Ä–æ–≥—É) ===');
    if (aboveThresholdToShow.length > 0) {
      for (let i = 0; i < aboveThresholdToShow.length; i++) {
        console.log(`${i + 1}. ${aboveThresholdToShow[i].file} -> ${aboveThresholdToShow[i].book.author} - ${aboveThresholdToShow[i].book.title} (–æ—Ü–µ–Ω–∫–∞: ${aboveThresholdToShow[i].score})`);
      }
    } else {
      console.log('  –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞');
    }
    
    console.log('\\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
    console.log(`–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}`);
    console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${currentIndex}`);
    console.log(`–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞: ${belowThresholdMatches.length}`);
    console.log(`–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞: ${aboveThresholdMatches.length}`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
if (typeof window === 'undefined') {
  // –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ Node.js
  testUniversalMatcherOnRealData().catch(console.error);
} else {
  // –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  console.log('–ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è. –í—ã–∑–æ–≤–∏—Ç–µ testUniversalMatcherOnRealData() –¥–ª—è –∑–∞–ø—É—Å–∫–∞.');
}

export { testUniversalMatcherOnRealData };