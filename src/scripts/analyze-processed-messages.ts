/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–Ω–∏–≥–∞–º–∏ –∏ –∑–∞–ø–∏—Å—è–º–∏ –≤ telegram_processed_messages
 */

import { config } from 'dotenv';
import path from 'path';
import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.resolve(process.cwd(), '.env') });

async function analyzeProcessedMessages() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–Ω–∏–≥–∞–º–∏ –∏ –∑–∞–ø–∏—Å—è–º–∏ –≤ telegram_processed_messages\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    }
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ
    console.log('üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥...');
    const { count: booksCount, error: booksCountError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true });
      
    if (booksCountError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥:', booksCountError.message);
      return;
    }
    
    console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ: ${booksCount || 0}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages
    console.log('\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages...');
    const { count: recordsCount, error: recordsCountError } = await supabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true });
      
    if (recordsCountError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π:', recordsCountError.message);
      return;
    }
    
    console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages: ${recordsCount || 0}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è:');
    console.log(`   –ö–Ω–∏–≥: ${booksCount || 0}`);
    console.log(`   –ó–∞–ø–∏—Å–µ–π: ${recordsCount || 0}`);
    console.log(`   –†–∞–∑–Ω–∏—Ü–∞: ${(recordsCount || 0) - (booksCount || 0)}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∏ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages
    console.log('\nüîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages...');
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, telegram_file_id');
      
    if (booksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥:', booksError.message);
      return;
    }
    
    let booksWithoutRecords = 0;
    let booksWithMultipleRecords = 0;
    
    for (const book of books) {
      if (book.telegram_file_id) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        const { data: records, error: recordsError } = await supabase
          .from('telegram_processed_messages')
          .select('id')
          .eq('telegram_file_id', book.telegram_file_id);
          
        if (recordsError) {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–Ω–∏–≥–∏ ${book.id}: ${recordsError.message}`);
          continue;
        }
        
        if (!records || records.length === 0) {
          console.log(`  ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –±–µ–∑ –∑–∞–ø–∏—Å–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (ID: ${book.id})`);
          booksWithoutRecords++;
        } else if (records.length > 1) {
          console.log(`  ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (${records.length} –∑–∞–ø–∏—Å–µ–π)`);
          booksWithMultipleRecords++;
        }
      }
    }
    
    console.log(`\nüìä –ö–Ω–∏–≥–∏ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π: ${booksWithoutRecords}`);
    console.log(`üìä –ö–Ω–∏–≥–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏: ${booksWithMultipleRecords}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∫–Ω–∏–≥
    console.log('\nüîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ –∫–Ω–∏–≥...');
    const { data: records, error: recordsError } = await supabase
      .from('telegram_processed_messages')
      .select('id, message_id, telegram_file_id, book_id');
      
    if (recordsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:', recordsError.message);
      return;
    }
    
    let recordsWithoutBooks = 0;
    let recordsWithInvalidBookId = 0;
    
    for (const record of records) {
      if (record.book_id) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º ID
        const { data: book, error: bookError } = await supabase
          .from('books')
          .select('id')
          .eq('id', record.book_id)
          .single();
          
        if (bookError && bookError.code !== 'PGRST116') { // PGRST116 - –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ ${record.id}: ${bookError.message}`);
          continue;
        }
        
        if (!book) {
          console.log(`  ‚ö†Ô∏è  –ó–∞–ø–∏—Å—å —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–æ–π: ID –∑–∞–ø–∏—Å–∏ ${record.id}, Book ID ${record.book_id}`);
          recordsWithInvalidBookId++;
        }
      } else {
        console.log(`  ‚ö†Ô∏è  –ó–∞–ø–∏—Å—å –±–µ–∑ book_id: ID –∑–∞–ø–∏—Å–∏ ${record.id}, Telegram File ID ${record.telegram_file_id || '–ù–µ—Ç'}`);
        recordsWithoutBooks++;
      }
    }
    
    console.log(`\nüìä –ó–∞–ø–∏—Å–∏ –±–µ–∑ book_id: ${recordsWithoutBooks}`);
    console.log(`üìä –ó–∞–ø–∏—Å–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ book_id: ${recordsWithInvalidBookId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ book_id
    console.log('\nüîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ book_id...');
    const bookIdCounts: Record<string, number> = {};
    for (const record of records) {
      if (record.book_id) {
        if (!bookIdCounts[record.book_id]) {
          bookIdCounts[record.book_id] = 0;
        }
        bookIdCounts[record.book_id]++;
      }
    }
    
    let duplicateBookIds = 0;
    for (const [bookId, count] of Object.entries(bookIdCounts)) {
      if (count > 1) {
        console.log(`  ‚ö†Ô∏è  Book ID ${bookId} —Å–≤—è–∑–∞–Ω —Å ${count} –∑–∞–ø–∏—Å—è–º–∏`);
        duplicateBookIds++;
      }
    }
    
    console.log(`\nüìä –ö–Ω–∏–≥–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏: ${duplicateBookIds}`);
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ –∫–Ω–∏–≥: ${booksCount}`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${recordsCount}`);
    console.log(`   –ö–Ω–∏–≥ –±–µ–∑ –∑–∞–ø–∏—Å–µ–π: ${booksWithoutRecords}`);
    console.log(`   –ö–Ω–∏–≥ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏: ${booksWithMultipleRecords}`);
    console.log(`   –ó–∞–ø–∏—Å–µ–π –±–µ–∑ book_id: ${recordsWithoutBooks}`);
    console.log(`   –ó–∞–ø–∏—Å–µ–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ book_id: ${recordsWithInvalidBookId}`);
    console.log(`   –ö–Ω–∏–≥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏: ${duplicateBookIds}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
analyzeProcessedMessages().catch(error => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});