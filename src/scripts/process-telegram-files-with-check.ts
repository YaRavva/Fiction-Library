/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –≤ –±–∞–∫–µ—Ç–µ
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∫–µ—Ç–µ, —Ç–æ –æ–Ω –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
 * 2. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ –±–∞–∫–µ—Ç–µ, —Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
 * 3. –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ —Å –≤—ã—Å–æ–∫–æ–π —Å—Ç–µ–ø–µ–Ω—å—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏, —Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∞
 * 4. –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Å—Ç–µ–ø–µ–Ω—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∏–∑–∫–∞—è, —Ç–æ —Ñ–∞–π–ª –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è
 */

import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
dotenv.config({ path: path.resolve(process.cwd(), '.env') });

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞');
  console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

import { TelegramSyncService } from '../lib/telegram/sync.js';
import { createClient } from '@supabase/supabase-js';

async function processTelegramFilesWithCheck() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è...\n');

  let syncService: TelegramSyncService | null = null;
  
  try {
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    );
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramSyncService
    syncService = await TelegramSyncService.getInstance();
    
    console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –¥–ª—è —Ç–µ—Å—Ç–∞)
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
    const files = await syncService.downloadAndProcessFilesDirectly(5);
    
    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
    
    for (const file of files) {
      if (file.success) {
        console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${file.filename}`);
        console.log(`  Message ID: ${file.messageId}`);
        console.log(`  –†–∞–∑–º–µ—Ä: ${file.fileSize} –±–∞–π—Ç`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const { author, title } = TelegramSyncService.extractMetadataFromFilename(file.filename);
        console.log(`  –ê–≤—Ç–æ—Ä: ${author}`);
        console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${title}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –±–∞–∫–µ—Ç–µ
        const ext = path.extname(file.filename) || '.fb2';
        const storageFileName = `${file.messageId}${ext}`;
        console.log(`  –ò–º—è —Ñ–∞–π–ª–∞ –≤ –±–∞–∫–µ—Ç–µ: ${storageFileName}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ –±–∞–∫–µ—Ç–µ
        console.log('  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–∫–µ—Ç–µ...');
        const { data: fileInfo, error: infoError } = await supabase.storage
          .from('books')
          .list('', {
            search: storageFileName
          });
        
        if (infoError) {
          console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–∫–µ—Ç–µ: ${infoError.message}`);
          continue;
        }
        
        if (fileInfo && fileInfo.length > 0) {
          console.log(`  ‚úÖ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∫–µ—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —Ñ–∞–π–ª –∫ –∫–Ω–∏–≥–µ
          const { data: books, error: booksError } = await supabase
            .from('books')
            .select('id, title, author')
            .eq('storage_path', storageFileName);
          
          if (!booksError && books && books.length > 0) {
            console.log(`  üìö –§–∞–π–ª —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ: "${books[0].title}" –∞–≤—Ç–æ—Ä–∞ ${books[0].author}`);
          } else {
            console.log(`  ‚ö†Ô∏è  –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ`);
          }
          
          continue;
        }
        
        console.log(`  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∫–µ—Ç–µ, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–∏–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
        console.log('  üîç –ò—â–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é...');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        const titleWords = (title || '').split(/\s+/).filter(word => word.length > 2);
        const authorWords = (author || '').split(/\s+/).filter(word => word.length > 2);
        const allSearchWords = [...titleWords, ...authorWords].filter(word => word.length > 0);
        
        console.log(`    –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: [${allSearchWords.join(', ')}]`);
        
        let bookFound = false;
        
        if (allSearchWords.length > 0) {
          // –ò—â–µ–º –∫–Ω–∏–≥–∏, –≥–¥–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
          const searchPromises = allSearchWords.map(async (word) => {
            const { data: titleMatches } = await (supabase as any)
              .from('books')
              .select('id, title, author')
              .ilike('title', `%${word}%`)
              .limit(5);
            
            const { data: authorMatches } = await (supabase as any)
              .from('books')
              .select('id, title, author')
              .ilike('author', `%${word}%`)
              .limit(5);
            
            const allMatches = [...(titleMatches || []), ...(authorMatches || [])];
            
            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
            const uniqueMatches = allMatches.filter((bookItem, index, self) => 
              index === self.findIndex(b => b.id === bookItem.id)
            );
            
            return uniqueMatches;
          });
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
          const results = await Promise.all(searchPromises);
          
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          const allMatches = results.flat();
          
          // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
          const uniqueMatches = allMatches.filter((bookItem, index, self) => 
            index === self.findIndex(b => b.id === bookItem.id)
          );
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
          const matchesWithScores = uniqueMatches.map(bookItem => {
            const bookTitleWords = bookItem.title.toLowerCase().split(/\s+/);
            const bookAuthorWords = bookItem.author.toLowerCase().split(/\s+/);
            const allBookWords = [...bookTitleWords, ...bookAuthorWords];
            
            // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–ª–æ–≤ —Å —Å–ª–æ–≤–∞–º–∏ –≤ –∫–Ω–∏–≥–µ
            let score = 0;
            for (const searchWord of allSearchWords) {
              const normalizedSearchWord = searchWord.toLowerCase();
              let found = false;
              for (const bookWord of allBookWords) {
                const normalizedBookWord = bookWord.toLowerCase();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
                if (normalizedBookWord.includes(normalizedSearchWord) || normalizedSearchWord.includes(normalizedBookWord)) {
                  score++;
                  found = true;
                  break; // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                }
              }
            }
            
            return { ...bookItem, score };
          });
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
          matchesWithScores.sort((a, b) => b.score - a.score);
          
          // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
          const topMatches = matchesWithScores.slice(0, 5);
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é >= 2
          return topMatches.filter(match => match.score >= 2);
          
          if (topMatches.length > 0) {
            console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${topMatches.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:`);
            topMatches.forEach((match, index) => {
              console.log(`    ${index + 1}. "${match.title}" –∞–≤—Ç–æ—Ä–∞ ${match.author} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${match.score})`);
            });
            
            // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
            const bestMatch = topMatches[0];
            console.log(`    –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ID=${bestMatch.id}, "${bestMatch.title}" –∞–≤—Ç–æ—Ä–∞ ${bestMatch.author} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${bestMatch.score})`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤)
            if (bestMatch.score >= 2) {
              console.log(`  üìé –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫ –∫–Ω–∏–≥–µ...`);
              
              try {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                const storagePath = storageFileName;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
                const { data: updatedBook, error: updateError } = await supabase
                  .from('books')
                  .update({
                    storage_path: storagePath,
                    file_size: file.fileSize,
                    file_format: ext.substring(1), // –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                    telegram_file_id: file.messageId
                  })
                  .eq('id', bestMatch.id)
                  .select()
                  .single();
                
                if (updateError) {
                  console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: ${updateError?.message || updateError}`);
                } else {
                  console.log(`  ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ: "${updatedBook.title}" –∞–≤—Ç–æ—Ä–∞ ${updatedBook.author}`);
                  bookFound = true;
                }
              } catch (attachError) {
                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ñ–∞–π–ª–∞ –∫ –∫–Ω–∏–≥–µ:`, attachError);
              }
            } else {
              console.log(`  ‚ö†Ô∏è  –õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (${bestMatch.score}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            }
          } else {
            console.log(`  ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
          }
        } else {
          console.log(`  ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é`);
        }
        
        if (!bookFound) {
          console.log(`  üö´ –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω - –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å`);
        }
      } else {
        console.log(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${file.error}`);
      }
    }
    
    console.log('\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
    process.exit(1);
  } finally {
    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞
    if (syncService) {
      try {
        await syncService.shutdown();
        console.log('üîå Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
      } catch (shutdownError) {
        console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞:', shutdownError);
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
    console.log('üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
    setTimeout(() => {
      process.exit(0);
    }, 1000);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
processTelegramFilesWithCheck();