#!/usr/bin/env tsx

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';

async function fixFileUrlAndTest() {
  console.log('=== –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ ===');
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
    return;
  }
  
  const supabase = createClient(supabaseUrl, supabaseServiceKey);
  
  try {
    const messageId = '1039'; // –≠—Ç–æ telegram_file_id
    const fileName = '1039.zip';
    
    console.log(`\n1. –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ telegram_processed_messages —Å telegram_file_id = ${messageId}...`);
    let { data: processedMessage, error: searchError } = await supabase
      .from('telegram_processed_messages')
      .select('*')
      .eq('telegram_file_id', messageId)
      .single();
    
    if (processedMessage && !searchError) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages:');
      console.log(`  ID: ${processedMessage.id}`);
      console.log(`  Book ID: ${processedMessage.book_id}`);
      console.log(`  Message ID: ${processedMessage.message_id}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
      console.log('\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ...');
      let { data: book, error: bookError } = await supabase
        .from('books')
        .select('*')
        .eq('id', processedMessage.book_id)
        .single();
      
      if (book && !bookError) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞:');
        console.log(`  –ù–∞–∑–≤–∞–Ω–∏–µ: ${book.title}`);
        console.log(`  –ê–≤—Ç–æ—Ä: ${book.author}`);
        console.log(`  ID: ${book.id}`);
        console.log(`  –¢–µ–∫—É—â–∏–π File URL: ${book.file_url}`);
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL —Ñ–∞–π–ª–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Cloud.ru S3 URL
        console.log('\n3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞ –Ω–∞ Cloud.ru S3...');
        
        const correctFileUrl = `https://s3.cloud.ru/books/${fileName}`;
        const updateData = {
          file_url: correctFileUrl,
          storage_path: `books/${fileName}`
        };
        
        const { data: updatedBook, error: updateError } = await supabase
          .from('books')
          .update(updateData)
          .eq('id', book.id)
          .select()
          .single();
        
        if (updateError) {
          console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL —Ñ–∞–π–ª–∞:');
          console.error(updateError.message);
          return;
        }
        
        console.log('‚úÖ URL —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:');
        console.log(`  –ù–æ–≤—ã–π File URL: ${updatedBook.file_url}`);
        console.log(`  Storage Path: ${updatedBook.storage_path}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É URL
        console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É URL...');
        try {
          const response = await fetch(correctFileUrl, {
            method: 'HEAD' // –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞
          });
          
          console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
          
          if (response.ok) {
            console.log('‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É URL Cloud.ru S3');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            const contentLength = response.headers.get('content-length');
            if (contentLength) {
              console.log(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤): ${contentLength} –±–∞–π—Ç`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
            const contentType = response.headers.get('content-type');
            if (contentType) {
              console.log(`Content-Type: ${contentType}`);
            }
            
            console.log('\nüéâ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL!');
            console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–ß–∏—Ç–∞—Ç—å" –∏ "–°–∫–∞—á–∞—Ç—å" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.');
            
          } else {
            console.log('‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ URL');
            console.log('–í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
          }
        } catch (fetchError: any) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É:', fetchError.message);
        }
      } else {
        console.error('‚ùå –û–®–ò–ë–ö–ê: –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        if (bookError) console.error(bookError.message);
        return;
      }
    } else {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ telegram_processed_messages –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      if (searchError) console.error(searchError.message);
      return;
    }
    
  } catch (error: any) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('\n–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  fixFileUrlAndTest()
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { fixFileUrlAndTest };