import { config } from 'dotenv';
import { resolve } from 'path';
import { getSupabaseAdmin } from '../lib/supabase';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const envPath = resolve(__dirname, '../../.env');
config({ path: envPath });

async function checkClearingStatus() {
  try {
    console.log('üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª–µ–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase
    const supabase: any = getSupabaseAdmin();
    if (!supabase) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Supabase');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥
    const { count: totalCount, error: countError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π: ${countError.message}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
    const { count: unclearedCount, error: unclearedError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true })
      .not('file_format', 'is', null);
    
    if (unclearedError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${unclearedError.message}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
    const { count: clearedCount, error: clearedError } = await supabase
      .from('books')
      .select('*', { count: 'exact', head: true })
      .is('file_format', null);
    
    if (clearedError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${clearedError.message}`);
    }
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—á–∏—Å—Ç–∫–∏:`);
    console.log(`  –í—Å–µ–≥–æ –∫–Ω–∏–≥: ${totalCount}`);
    console.log(`  –û—á–∏—â–µ–Ω–æ: ${clearedCount}`);
    console.log(`  –ù–µ –æ—á–∏—â–µ–Ω–æ: ${unclearedCount}`);
    console.log(`  –ü—Ä–æ–≥—Ä–µ—Å—Å: ${totalCount > 0 ? Math.round((clearedCount / totalCount) * 100) : 0}%`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
  }
}

checkClearingStatus();