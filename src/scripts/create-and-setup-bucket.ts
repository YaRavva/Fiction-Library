#!/usr/bin/env tsx

import 'dotenv/config';
import { 
  CreateBucketCommand,
  PutBucketAclCommand,
  PutBucketPolicyCommand
} from '@aws-sdk/client-s3';
import { cloudRuS3 } from '../lib/cloud-ru-s3-service';

async function createAndSetupBucket() {
  console.log('=== –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∫–µ—Ç–∞ ===');
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –±–∞–∫–µ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
  const bucketName = `books-${Date.now()}`;
  console.log(`–ù–æ–≤—ã–π –±–∞–∫–µ—Ç: ${bucketName}`);
  
  try {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞
    console.log('\n1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∫–µ—Ç–∞...');
    const createCommand = new CreateBucketCommand({
      Bucket: bucketName,
    });
    
    const createResponse = await cloudRuS3.send(createCommand);
    console.log('‚úÖ –ë–∞–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    console.log('Location:', createResponse.Location);
    
    // 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ACL –±–∞–∫–µ—Ç–∞
    console.log('\n2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ACL –±–∞–∫–µ—Ç–∞...');
    const putAclCommand = new PutBucketAclCommand({
      Bucket: bucketName,
      ACL: 'private'
    });
    
    await cloudRuS3.send(putAclCommand);
    console.log('‚úÖ ACL –±–∞–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    
    // 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–∞–∫–µ—Ç–∞
    console.log('\n3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –±–∞–∫–µ—Ç–∞...');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º tenant ID –∏–∑ AWS_ACCESS_KEY_ID
    const tenantId = process.env.AWS_ACCESS_KEY_ID?.split(':')[0] || 'unknown-tenant';
    
    const policy = {
      Version: "2012-10-17",
      Statement: [
        {
          Sid: "OwnerFullAccess",
          Effect: "Allow",
          Principal: {
            AWS: `arn:aws:iam::${tenantId}:root`
          },
          Action: "s3:*",
          Resource: [
            `arn:aws:s3:::${bucketName}`,
            `arn:aws:s3:::${bucketName}/*`
          ]
        }
      ]
    };
    
    const putPolicyCommand = new PutBucketPolicyCommand({
      Bucket: bucketName,
      Policy: JSON.stringify(policy)
    });
    
    await cloudRuS3.send(putPolicyCommand);
    console.log('‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –±–∞–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
    console.log(`–ù–æ–≤—ã–π –±–∞–∫–µ—Ç: ${bucketName}`);
    console.log('ACL: private');
    console.log('–ü–æ–ª–∏—Ç–∏–∫–∞: –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env
    console.log('\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .env...');
    const fs = require('fs');
    const envPath = '.env';
    let envContent = fs.readFileSync(envPath, 'utf8');
    
    // –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ S3_BUCKET_NAME
    const oldBucketName = process.env.S3_BUCKET_NAME || 'books';
    envContent = envContent.replace(
      new RegExp(`S3_BUCKET_NAME=${oldBucketName}`, 'g'),
      `S3_BUCKET_NAME=${bucketName}`
    );
    
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤—ã–π –±–∞–∫–µ—Ç: ${bucketName}`);
    
  } catch (error: any) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.name);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error.$metadata) {
      console.error('HTTP Status:', error.$metadata.httpStatusCode);
      console.error('Request ID:', error.$metadata.requestId);
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('\n–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∫–µ—Ç–∞
if (require.main === module) {
  createAndSetupBucket()
    .then(() => {
      console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { createAndSetupBucket };