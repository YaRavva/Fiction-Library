import { TelegramSyncService } from '../lib/telegram/sync';

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–Ω–∏–≥ –∏–∑ Telegram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
 * @returns –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function downloadMissingFiles(limit: number = 50) {
  try {
    console.log(`üöÄ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram (–ª–∏–º–∏—Ç: ${limit})`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const files = await syncService.getFilesToProcess(limit);
    
    const successCount = files.length;
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ ${successCount} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
    let report = `–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:\n`;
    report += `–§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${files.length}\n\n`;
    
    if (files.length > 0) {
      report += `–î–µ—Ç–∞–ª–∏:\n`;
      files.forEach((file: any, index: number) => {
        report += `${index + 1}. ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${file.messageId})\n`;
      });
    }
    
    return {
      success: true,
      message: `–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ ${successCount} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`,
      files,
      actions: [
        `–§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${files.length}`
      ],
      report
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
      files: [],
      actions: [],
      report: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    };
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É
 * @param files –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function processFiles(files: any[]) {
  try {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É ${files.length} —Ñ–∞–π–ª–æ–≤`);
    
    // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const syncService = await TelegramSyncService.getInstance();
    
    const results = [];
    let successCount = 0;
    let failedCount = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ–¥–Ω–æ–º—É
    for (const file of files) {
      try {
        console.log(`üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${file.messageId})`);
        const result = await syncService.processSingleFileById(file.messageId as number);
        results.push(result);
        
        if (result.success !== false) {
          successCount++;
          console.log(`‚úÖ –§–∞–π–ª ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
        } else {
          failedCount++;
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'}: ${result.error}`);
        }
      } catch (error) {
        failedCount++;
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        results.push({
          messageId: file.messageId,
          filename: file.filename,
          success: false,
          error: errorMessage
        });
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'}: ${errorMessage}`);
      }
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failedCount} —Å –æ—à–∏–±–∫–∞–º–∏`);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
    let report = `–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n`;
    report += `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}\n`;
    report += `–£—Å–ø–µ—à–Ω–æ: ${successCount}\n`;
    report += `–° –æ—à–∏–±–∫–∞–º–∏: ${failedCount}\n\n`;
    
    if (results.length > 0) {
      report += `–î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n`;
      results.forEach((result: any, index: number) => {
        const status = result.success !== false ? '‚úÖ' : '‚ùå';
        report += `${index + 1}. ${status} ${result.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${result.messageId})\n`;
        if (result.success === false && result.error) {
          report += `   –û—à–∏–±–∫–∞: ${result.error}\n`;
        }
      });
    }
    
    return {
      success: true,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${successCount} –∏–∑ ${files.length} —Ñ–∞–π–ª–æ–≤`,
      results,
      actions: [
        `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`,
        `–£—Å–ø–µ—à–Ω–æ: ${successCount}`,
        `–° –æ—à–∏–±–∫–∞–º–∏: ${failedCount}`
      ],
      report
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
    return {
      success: false,
      message: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      results: [],
      actions: [],
      report: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    };
  }
}