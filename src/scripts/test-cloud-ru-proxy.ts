#!/usr/bin/env tsx

import 'dotenv/config';

async function testCloudRuProxy() {
  console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–µ–≥–æ endpoint –¥–ª—è Cloud.ru S3 ===');
  
  const fileName = '1039.zip';
  
  try {
    console.log(`\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–∞ –∫ /api/cloud-ru-proxy?fileName=${fileName}...`);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–µ–º—É endpoint
    const url = `http://localhost:3000/api/cloud-ru-proxy?fileName=${encodeURIComponent(fileName)}`;
    
    console.log(`URL –∑–∞–ø—Ä–æ—Å–∞: ${url}`);
    
    // –ü–æ—Å–∫–æ–ª—å–∫—É —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑–≤–∞—Ç—å endpoint
    // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –Ω–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –Ω–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É...');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    const { getS3AuthHeaders } = await import('../lib/cloud-ru-s3-service');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const accessKeyId = process.env.AWS_ACCESS_KEY_ID;
    const secretAccessKey = process.env.AWS_SECRET_ACCESS_KEY;
    
    if (!accessKeyId || !secretAccessKey) {
      console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return;
    }
    
    // –†–∞–∑–±–æ—Ä –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Cloud.ru
    const accessKeyParts = accessKeyId.split(':');
    if (accessKeyParts.length !== 2) {
      console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç AWS_ACCESS_KEY_ID. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "tenantId:keyId"');
      return;
    }
    
    const [tenantId, keyId] = accessKeyParts;
    const bucketName = process.env.S3_BUCKET_NAME || 'books';
    const region = process.env.AWS_REGION || 'ru-central-1';
    
    console.log(`Tenant ID: ${tenantId}`);
    console.log(`Key ID: ${keyId}`);
    console.log(`–ë–∞–∫–µ—Ç: ${bucketName}`);
    console.log(`–†–µ–≥–∏–æ–Ω: ${region}`);
    console.log(`–§–∞–π–ª: ${fileName}`);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ GET –∑–∞–ø—Ä–æ—Å–∞
    const requestParams = {
      method: 'GET',
      pathname: `/${bucketName}/${fileName}`, // –ü—É—Ç—å —Å –∏–º–µ–Ω–µ–º –±–∞–∫–µ—Ç–∞
      query: {},
      headers: {
        'host': 's3.cloud.ru',
      },
      payload: '',
      keyId: keyId,
      keySecret: secretAccessKey,
      tenantId: tenantId,
      region: region,
      service: 's3'
    };
    
    console.log('\n3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    const authHeaders = await getS3AuthHeaders(requestParams);
    console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º GET –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Cloud.ru S3 —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...');
    const cloudRuUrl = `https://s3.cloud.ru/${bucketName}/${fileName}`;
    
    const response = await fetch(cloudRuUrl, {
      method: 'GET',
      headers: {
        'Authorization': authHeaders.Authorization,
        'x-amz-date': authHeaders['x-amz-date'],
        'x-amz-content-sha256': authHeaders['x-amz-content-sha256'],
        'host': 's3.cloud.ru'
      }
    });
    
    console.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏–∑ Cloud.ru S3 —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π!');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const contentLength = response.headers.get('content-length');
      if (contentLength) {
        console.log(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤): ${contentLength} –±–∞–π—Ç`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
      const contentType = response.headers.get('content-type');
      if (contentType) {
        console.log(`Content-Type: ${contentType}`);
      }
      
      console.log('\nüéâ –ü—Ä–æ–∫—Å–∏—Ä—É—é—â–∏–π endpoint –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('–ö–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, endpoint /api/cloud-ru-proxy –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ Cloud.ru S3');
      
    } else {
      const errorText = await response.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${response.status} ${response.statusText}`);
      console.log('–¢–µ–ª–æ –æ—à–∏–±–∫–∏:', errorText);
    }
    
  } catch (error: any) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê:', error.message);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('\n–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testCloudRuProxy()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testCloudRuProxy };