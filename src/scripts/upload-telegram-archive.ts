#!/usr/bin/env tsx

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import { uploadFile, createBucket } from '../lib/cloud-ru-s3-service';
import { Buffer } from 'buffer';
import * as fs from 'fs';
import * as path from 'path';

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞ Telegram –≤ Cloud.ru S3
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–∞–π–ª–∞–º–∏, –∏–º–µ—é—â–∏–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
 * –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–æ–≤
 */

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
const MAX_CONCURRENT_UPLOADS = 5;

interface TelegramFile {
  id: string;
  name: string;
  path: string;
  size: number;
}

async function uploadTelegramArchive(archivePath: string) {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞ Telegram –≤ Cloud.ru S3');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const bucketName = process.env.S3_BUCKET_NAME || `telegram-archive-${Date.now()}`;
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
  const backupDir = path.join(process.cwd(), 'local-backup-telegram');
  if (!fs.existsSync(backupDir)) {
    fs.mkdirSync(backupDir, { recursive: true });
  }
  
  console.log(`\nüîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏:`);
  console.log(`Cloud.ru Bucket: ${bucketName}`);
  console.log(`–ê—Ä—Ö–∏–≤ Telegram: ${archivePath}`);
  console.log(`–õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${backupDir}`);
  console.log(`–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: ${MAX_CONCURRENT_UPLOADS}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞—Ä—Ö–∏–≤
  if (!fs.existsSync(archivePath)) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê: –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: ${archivePath}`);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞
  console.log('\nüìÅ –°–∫–∞–Ω–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ Telegram...');
  const telegramFiles = await scanTelegramArchive(archivePath);
  
  if (telegramFiles.length === 0) {
    console.log('‚ÑπÔ∏è  –í –∞—Ä—Ö–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
    return;
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${telegramFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–∫–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    console.log(`\nüì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–∫–µ—Ç "${bucketName}"...`);
    try {
      await createBucket(bucketName);
      console.log(`‚úÖ –ë–∞–∫–µ—Ç "${bucketName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
    } catch (error: any) {
      console.log(`‚ö†Ô∏è  –ë–∞–∫–µ—Ç "${bucketName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: ${error.message}`);
    }
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let uploadedCount = 0;
    let errorCount = 0;
    
    console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
    for (let i = 0; i < telegramFiles.length; i += MAX_CONCURRENT_UPLOADS) {
      const batch = telegramFiles.slice(i, i + MAX_CONCURRENT_UPLOADS);
      const batchNumber = Math.floor(i / MAX_CONCURRENT_UPLOADS) + 1;
      const totalBatches = Math.ceil(telegramFiles.length / MAX_CONCURRENT_UPLOADS);
      
      console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${batchNumber}/${totalBatches} (${batch.length} —Ñ–∞–π–ª–æ–≤)`);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const uploadPromises = batch.map(async (tgFile) => {
        try {
          // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞
          const fileBuffer = fs.readFileSync(tgFile.path);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è S3
          const safeFileName = tgFile.name.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø—ë–Å._-]/g, '_');
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
          const fileSize = `${(fileBuffer.length / 1024 / 1024).toFixed(2)}MB`;
          console.log(`  üì• ${tgFile.name} | ${fileSize}`);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞
          const localFilePath = path.join(backupDir, tgFile.name);
          const localDir = path.dirname(localFilePath);
          
          // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (!fs.existsSync(localDir)) {
            fs.mkdirSync(localDir, { recursive: true });
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          if (!fs.existsSync(localFilePath)) {
            fs.writeFileSync(localFilePath, fileBuffer);
            console.log(`  üíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${localFilePath}`);
          }
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Cloud.ru S3
          const uploadResult = await uploadFile(bucketName, safeFileName, fileBuffer);
          
          return { 
            success: true, 
            fileName: tgFile.name, 
            safeFileName: safeFileName,
            size: fileBuffer.length
          };
        } catch (error: any) {
          return { success: false, fileName: tgFile.name, error: error.message };
        }
      });
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ
      const results = await Promise.all(uploadPromises);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      results.forEach(result => {
        if (result.success) {
          uploadedCount++;
          console.log(`  ‚úÖ ${result.fileName} | –ó–∞–≥—Ä—É–∂–µ–Ω`);
        } else {
          errorCount++;
          console.log(`  ‚ùå ${result.fileName} | –û—à–∏–±–∫–∞: ${result.error}`);
        }
      });
      
      // –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      console.log(`  üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–∞:`);
      console.log(`    ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}`);
      console.log(`    ‚ùå –û—à–∏–±–æ–∫: ${results.filter(r => !r.success).length}`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      if (i + MAX_CONCURRENT_UPLOADS < telegramFiles.length) {
        console.log(`  ‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...`);
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò—Ç–æ–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞ Telegram:');
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${uploadedCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  üìö –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${telegramFiles.length} —Ñ–∞–π–ª–æ–≤`);
    console.log(`  üìÇ –õ–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø: ${backupDir}`);
    
    if (errorCount === 0) {
      console.log('\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞ Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } else {
      console.log(`\n‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞ Telegram –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å ${errorCount} –æ—à–∏–±–∫–∞–º–∏`);
    }
    
  } catch (error: any) {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
    console.error('–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:');
    console.error(error);
  }
}

/**
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏–≤ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
 * @param archivePath –ü—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É Telegram
 * @returns –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
 */
async function scanTelegramArchive(archivePath: string): Promise<TelegramFile[]> {
  const files: TelegramFile[] = [];
  
  // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Å–∫–∞–Ω–∏—Ä—É–µ–º –µ—ë —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
  if (fs.statSync(archivePath).isDirectory()) {
    const walk = (dir: string) => {
      const entries = fs.readdirSync(dir);
      for (const entry of entries) {
        const entryPath = path.join(dir, entry);
        const stat = fs.statSync(entryPath);
        
        if (stat.isDirectory()) {
          walk(entryPath);
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –∫–Ω–∏–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
          const ext = path.extname(entry).toLowerCase();
          const bookExtensions = ['.fb2', '.zip', '.txt', '.pdf', '.epub'];
          
          if (bookExtensions.includes(ext)) {
            files.push({
              id: path.relative(archivePath, entryPath).replace(/\\/g, '_'),
              name: entry,
              path: entryPath,
              size: stat.size
            });
          }
        }
      }
    };
    
    walk(archivePath);
  } else {
    console.log('‚ÑπÔ∏è  –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–ø—Ç.');
  }
  
  return files;
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞ Telegram
if (require.main === module) {
  const args = process.argv.slice(2);
  const archivePath = args[0];
  
  if (!archivePath) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É Telegram');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: tsx upload-telegram-archive.ts <–ø—É—Ç—å_–∫_–∞—Ä—Ö–∏–≤—É>');
    process.exit(1);
  }
  
  uploadTelegramArchive(archivePath)
    .then(() => {
      console.log('\n‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞ Telegram –∑–∞–≤–µ—Ä—à–µ–Ω');
    })
    .catch((error) => {
      console.error('\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ö–∏–≤–∞ Telegram –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { uploadTelegramArchive };