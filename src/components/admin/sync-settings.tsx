'use client'

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { FileSearchManager } from './file-search-manager'
import { getBrowserSupabase } from '@/lib/browserSupabase'
import { RefreshCw, Search, Trash2 } from 'lucide-react';

interface SyncSettingsProps {
  bookWormRunning: boolean
  bookWormMode: 'full' | 'update' | null
  bookWormInterval: number
  bookWormAutoUpdate: boolean
  handleRunBookWorm: (mode: 'full' | 'update') => void
  handleToggleAutoUpdate: (checked: boolean) => void
  setBookWormInterval: (interval: number) => void
}

export function SyncSettings({
  bookWormRunning,
  bookWormMode,
  bookWormInterval,
  bookWormAutoUpdate,
  handleRunBookWorm,
  handleToggleAutoUpdate,
  setBookWormInterval
}: SyncSettingsProps) {
  const [supabase] = useState(() => getBrowserSupabase())
  const [autoUpdateEnabled, setAutoUpdateEnabled] = useState(bookWormAutoUpdate)
  const [timerValue, setTimerValue] = useState(bookWormInterval)
  const [initialLoad, setInitialLoad] = useState(true) // –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const [searching, setSearching] = useState(false);
  const [removing, setRemoving] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadAutoUpdateSettings()
  }, [])

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏–∑–≤–Ω–µ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
  useEffect(() => {
    if (!initialLoad) {
      setAutoUpdateEnabled(bookWormAutoUpdate)
      setTimerValue(bookWormInterval)
    }
  }, [bookWormAutoUpdate, bookWormInterval, initialLoad])

  const loadAutoUpdateSettings = async () => {
    try {
      const { data: { session } } = await supabase.auth.getSession()
      if (!session) return

      const response = await fetch('/api/admin/book-worm/auto-update', {
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
        },
      })

      if (response.ok) {
        const { settings } = await response.json()
        if (settings) {
          setAutoUpdateEnabled(settings.enabled)
          setTimerValue(settings.interval)
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          handleToggleAutoUpdate(settings.enabled)
          setBookWormInterval(settings.interval)
        }
      } else {
        console.error('Failed to load auto update settings:', response.statusText)
      }
    } catch (error) {
      console.error('Error loading auto update settings:', error)
    } finally {
      setInitialLoad(false) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }
  }

  const saveAutoUpdateSettings = async (enabled: boolean, interval: number) => {
    try {
      const { data: { session } } = await supabase.auth.getSession()
      if (!session) return

      const response = await fetch('/api/admin/book-worm/auto-update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.access_token}`,
        },
        body: JSON.stringify({
          enabled: enabled,
          interval: interval
        }),
      })

      if (!response.ok) {
        console.error('Failed to save auto update settings:', response.statusText)
        // –í—ã–∑—ã–≤–∞–µ–º alert –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + response.statusText)
      } else {
        console.log('Auto update settings saved successfully')
      }
    } catch (error) {
      console.error('Error saving auto update settings:', error)
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    }
  }

  const handleAutoUpdateChange = (checked: boolean) => {
    const newChecked = Boolean(checked)
    setAutoUpdateEnabled(newChecked)
    handleToggleAutoUpdate(newChecked)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞
    saveAutoUpdateSettings(newChecked, timerValue)
  }

  const handleTimerChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = Math.max(5, Math.min(1440, Number.parseInt(e.target.value) || 30))
    setTimerValue(newValue)
    setBookWormInterval(newValue)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
    if (autoUpdateEnabled) {
      saveAutoUpdateSettings(autoUpdateEnabled, newValue)
    }
  }

  const handleSearchDuplicates = async () => {
    try {
      setError(null);
      setSearching(true);
      
      const session = await supabase.auth.getSession();
      if (!session.data.session) {
        throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      const timestamp = new Date().toLocaleTimeString('ru-RU');
      const progressReport = `[${timestamp}] üîç –ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥...\n`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(progressReport);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        }
      }

      const response = await fetch('/api/admin/duplicates', {
        headers: {
          'Authorization': `Bearer ${session.data.session.access_token}`,
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const resultTimestamp = new Date().toLocaleTimeString('ru-RU');
      let resultReport = `[${resultTimestamp}] ‚úÖ –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n`;
      resultReport += `üìä –ù–∞–π–¥–µ–Ω–æ ${data.duplicateGroups.length} –≥—Ä—É–ø–ø –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n`;
      resultReport += `üí° –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${data.stats.potentialDuplicates}\n`;
      resultReport += `üìà –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥: ${data.stats.uniqueBooksEstimate}\n`;
      
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(resultReport);
        } catch (error) {
          console.error('‚ùå Error sending results to window:', error);
        }
      }

    } catch (err) {
      console.error('Error searching duplicates:', err);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${(err as Error).message}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const errorTimestamp = new Date().toLocaleTimeString('ru-RU');
      const errorReport = `[${errorTimestamp}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${(err as Error).message}\n`;
      
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(errorReport);
        } catch (error) {
          console.error('‚ùå Error sending error to results window:', error);
        }
      }
    } finally {
      setSearching(false);
    }
  };

  const handleRemoveDuplicates = async () => {
    try {
      setError(null);
      setRemoving(true);
      
      const session = await supabase.auth.getSession();
      if (!session.data.session) {
        throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      const timestamp = new Date().toLocaleTimeString('ru-RU');
      const progressReport = `[${timestamp}] üóëÔ∏è –ù–∞—á–∞—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–Ω–∏–≥...\n`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(progressReport);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
        }
      }

      const response = await fetch('/api/admin/duplicates', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${session.data.session.access_token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const resultTimestamp = new Date().toLocaleTimeString('ru-RU');
      let resultReport = `[${resultTimestamp}] ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n`;
      resultReport += `üìä –£–¥–∞–ª–µ–Ω–æ: ${data.deletedCount} –∫–Ω–∏–≥\n`;
      if (data.totalErrors > 0) {
        resultReport += `‚ö†Ô∏è –û—à–∏–±–æ–∫: ${data.totalErrors}\n`;
      }
      resultReport += `üìã ${data.message}\n`;
      
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(resultReport);
        } catch (error) {
          console.error('‚ùå Error sending results to window:', error);
        }
      }

    } catch (err) {
      console.error('Error removing duplicates:', err);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${(err as Error).message}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const errorTimestamp = new Date().toLocaleTimeString('ru-RU');
      const errorReport = `[${errorTimestamp}] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${(err as Error).message}\n`;
      
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(errorReport);
        } catch (error) {
          console.error('‚ùå Error sending error to results window:', error);
        }
      }
    } finally {
      setRemoving(false);
    }
  }

  return (
    <div className="w-full p-6">
      <div className="w-full space-y-4">
        <h1 className="text-2xl font-semibold tracking-tight">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-2 items-start justify-center">
          {/* –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–Ω–∏–≥ –∏ —Ñ–∞–π–ª–æ–≤ */}
          <div className="space-y-3 w-full">
            <h2 className="text-base font-medium">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–Ω–∏–≥ –∏ —Ñ–∞–π–ª–æ–≤</h2>

            <div className="space-y-3">
              <div className="flex flex-wrap items-center gap-4">
                <Button
                  onClick={() => handleRunBookWorm("full")}
                  disabled={bookWormRunning && bookWormMode === "full"}
                  size="default"
                >
                  {bookWormRunning && bookWormMode === "full" ? "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..." : "–ü–æ–ª–Ω–∞—è"}
                </Button>

                <Button
                  onClick={() => handleRunBookWorm("update")}
                  disabled={bookWormRunning && bookWormMode === "update"}
                  variant="outline"
                  size="default"
                >
                  {bookWormRunning && bookWormMode === "update" ? "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"}
                </Button>
              </div>

              <div className="flex flex-wrap items-center gap-3">
                <div className="flex items-center gap-2">
                  <Label htmlFor="book-worm-interval" className="text-sm font-medium whitespace-nowrap">
                    –¢–∞–π–º–µ—Ä:
                  </Label>
                  <Input
                    id="book-worm-interval"
                    type="number"
                    min="5"
                    max="1440"
                    value={timerValue}
                    onChange={handleTimerChange}
                    className="w-20 h-9 text-sm font-mono"
                  />
                  <span className="text-sm text-muted-foreground font-medium">–º–∏–Ω</span>
                </div>

                <div className="flex items-center gap-2">
                  <Checkbox 
                    id="auto-update" 
                    checked={autoUpdateEnabled} 
                    onCheckedChange={handleAutoUpdateChange} 
                  />
                  <label
                    htmlFor="auto-update"
                    className="text-sm font-medium leading-none cursor-pointer select-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                  </label>
                </div>
              </div>
            </div>
          </div>

          {/* –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ */}
          <div className="space-y-3 w-full">
            <h2 className="text-base font-medium">–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤</h2>
            <FileSearchManager />
          </div>

          {/* –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ */}
          <div className="space-y-3 w-full">
            <h2 className="text-base font-medium">–ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</h2>
            <div className="space-y-3 w-full">
              <div className="flex flex-wrap items-center gap-4">
                <Button
                  onClick={handleSearchDuplicates}
                  disabled={searching || removing}
                  size="default"
                >
                  {searching ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      –ü–æ–∏—Å–∫...
                    </>
                  ) : (
                    <>
                      <Search className="h-4 w-4 mr-2" />
                      –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    </>
                  )}
                </Button>
                
                <Button
                  onClick={handleRemoveDuplicates}
                  disabled={searching || removing}
                  variant="outline"
                  size="default"
                >
                  {removing ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      –£–¥–∞–ª–µ–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <Trash2 className="h-4 w-4 mr-2" />
                      –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
                    </>
                  )}
                </Button>
              </div>

              {error && (
                <div className="text-destructive text-sm p-2 bg-destructive/10 rounded">
                  {error}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}