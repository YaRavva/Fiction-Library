'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { FileSearch, Play, RotateCcw, CheckCircle, AlertCircle, Clock, FileText } from 'lucide-react';
import { getBrowserSupabase } from '@/lib/browserSupabase';
import { FileOption } from './file-selector'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º FileOption –∏–∑ file-selector

interface BookWithoutFile {
  id: string;
  title: string;
  author: string;
  publication_year?: number;
}

interface ProcessingState {
  status: 'idle' | 'loading' | 'searching' | 'processing' | 'completed' | 'error';
  message: string;
}

export function FileSearchManager() {
  const [processingState, setProcessingState] = useState<ProcessingState>({
    status: 'idle',
    message: ''
  });
  const [error, setError] = useState<string | null>(null);

  const [booksWithoutFiles, setBooksWithoutFiles] = useState<BookWithoutFile[]>([]);
  const [currentBookIndex, setCurrentBookIndex] = useState(0);
  const [currentBookFiles, setCurrentBookFiles] = useState<FileOption[]>([]);
  const [selectedFileIndex, setSelectedFileIndex] = useState(0);
  const [allTelegramFiles, setAllTelegramFiles] = useState<FileOption[]>([]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const logToResults = (message: string) => {
    const timestamp = new Date().toLocaleTimeString('ru-RU');
    const logMessage = `[${timestamp}] ${message}\n`;

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('FileSearchManager log:', message);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
      try {
        (window as any).setStatsUpdateReport(logMessage);
        console.log('Message sent to results window:', message);
      } catch (error) {
        console.error('Error sending message to results window:', error);
      }
    } else {
      console.log('logToResults: setStatsUpdateReport not available, available window properties:', Object.keys(window || {}));
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const getAuthToken = async (): Promise<string> => {
    const supabase = getBrowserSupabase();
    const { data: { session } } = await supabase.auth.getSession();
    return session?.access_token || '';
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏)
  const loadBooksWithoutFiles = async (): Promise<BookWithoutFile[]> => {
    logToResults('üìö –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "–¶–∏–∫–ª –ò–ª—å-–†—å–µ–Ω" –ú–∞—Ä—Ç—ã –£—ç–ª–ª—Å...');

    const supabase = getBrowserSupabase();

    const { data, error: dbError } = await supabase
      .from('books')
      .select('id, title, author, publication_year')
      .eq('title', '—Ü–∏–∫–ª –ò–ª—å-–†—å–µ–Ω')
      .eq('author', '–ú–∞—Ä—Ç–∞ –£—ç–ª–ª—Å')
      .is('file_url', null)
      .limit(1);

    if (dbError) {
      logToResults(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–Ω–∏–≥–∏: ${dbError.message}`);
      throw dbError;
    }

    const normalizedBooks = (data || []).map((book: any) => ({
      ...book,
      title: book.title.normalize('NFC'),
      author: book.author.normalize('NFC')
    }));

    if (normalizedBooks.length > 0) {
      logToResults(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ –Ω–∞–π–¥–µ–Ω–∞: "${normalizedBooks[0].title}" - ${normalizedBooks[0].author}`);
    } else {
      logToResults('‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∏–º–µ–µ—Ç —Ñ–∞–π–ª.');
    }

    return normalizedBooks;
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
  const loadTelegramFiles = async (): Promise<FileOption[]> => {
    logToResults('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ (–ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 1000 —Å –ø–∞—É–∑–æ–π 1—Å)...');
    const token = await getAuthToken();

    const response = await fetch('/api/admin/telegram-files', {
      headers: { 'Authorization': `Bearer ${token}` },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ Telegram');
    }

    const data = await response.json();
    logToResults(`üìÅ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${data.files?.length || 0} —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram`);
    return data.files || [];
  };

  // –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏
  const findMatchingFiles = (book: BookWithoutFile, files: FileOption[]): FileOption[] => {
    const normalizeString = (str: string) => str.normalize('NFC').toLowerCase();

    const bookTitle = normalizeString(book.title);
    const bookAuthor = normalizeString(book.author);

    logToResults(`üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞: "${book.author}"`);
    logToResults(`üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (NFC): "${bookTitle}"`);
    logToResults(`üë§ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–≤—Ç–æ—Ä (NFC): "${bookAuthor}"`);

    const matchingFiles = files
      .map(file => {
        const filename = normalizeString(file.file_name || '');
        let score = 0;

        const titleWords = bookTitle.split(/\s+/).filter(word => word.length > 2);
        const authorWords = bookAuthor.split(/\s+/).filter(word => word.length > 2);

        let hasTitleMatch = false;
        let hasAuthorMatch = false;

        for (const word of titleWords) {
          if (filename.includes(word)) {
            hasTitleMatch = true;
            score += 10;
            break;
          }
        }

        for (const word of authorWords) {
          if (filename.includes(word)) {
            hasAuthorMatch = true;
            score += 10;
            break;
          }
        }

        if (!hasTitleMatch && !hasAuthorMatch) {
          return null;
        }


        return { ...file, relevance_score: score };
      })
      .filter((file): file is FileOption & { relevance_score: number } => file !== null)
      .sort((a, b) => b.relevance_score - a.relevance_score)
      .slice(0, 20);

    logToResults(`üìä –ù–∞–π–¥–µ–Ω–æ ${matchingFiles.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.`);
    if (matchingFiles.length > 0) {
      matchingFiles.slice(0, 3).forEach((file, index) => {
        logToResults(`  ${index + 1}. "${file.file_name}" (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${file.relevance_score})`);
      });
      if (matchingFiles.length > 3) {
        logToResults(`  ... –∏ –µ—â–µ ${matchingFiles.length - 3} —Ñ–∞–π–ª–æ–≤`);
      }
    }

    return matchingFiles;
  };

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–∏
  const showFilesForCurrentBook = useCallback(async () => {
    if (booksWithoutFiles.length === 0) {
      logToResults('‚ùå –ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
      setProcessingState({ status: 'idle', message: '–ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.' });
      return;
    }

    if (currentBookIndex < 0 || currentBookIndex >= booksWithoutFiles.length) {
      logToResults(`‚ùå –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å ${currentBookIndex} –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –º–∞—Å—Å–∏–≤–∞ (0-${booksWithoutFiles.length - 1}).`);
      setProcessingState({ status: 'error', message: '–û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å –∫–Ω–∏–≥–∏ –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –º–∞—Å—Å–∏–≤–∞.' });
      return;
    }

    const currentBook = booksWithoutFiles[currentBookIndex];
    if (!currentBook) {
      logToResults(`‚ùå –û—à–∏–±–∫–∞: –∫–Ω–∏–≥–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${currentBookIndex} —Ä–∞–≤–Ω–∞ null/undefined.`);
      setProcessingState({ status: 'error', message: '–û—à–∏–±–∫–∞: –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
      return;
    }

    logToResults(`\nüìñ –ö–Ω–∏–≥–∞ ${currentBookIndex + 1}/${booksWithoutFiles.length}: "${currentBook.title}" - ${currentBook.author}`);
    const matchingFiles = findMatchingFiles(currentBook, allTelegramFiles);
    setCurrentBookFiles(matchingFiles);
    setSelectedFileIndex(0); // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (matchingFiles.length === 0) {
      logToResults('‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–µ.');
    } else {
      logToResults(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${matchingFiles.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤:`);
      matchingFiles.forEach((file, index) => {
        const marker = index === selectedFileIndex ? '‚ñ∂Ô∏è' : '   ';
        logToResults(`${marker} ${index + 1}. ${file.file_name} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${file.relevance_score})`);
      });
    }

    logToResults('\nüéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ‚Üë‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è, Enter - –≤—ã–±—Ä–∞—Ç—å, Esc - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.');
    setProcessingState({ status: 'searching', message: '–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...' });

  }, [booksWithoutFiles, currentBookIndex, allTelegramFiles, selectedFileIndex]); // –î–æ–±–∞–≤–ª–µ–Ω selectedFileIndex –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–∏ (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
  const processNextBook = useCallback(async () => {
    const nextIndex = currentBookIndex + 1;
    if (nextIndex >= booksWithoutFiles.length) {
      logToResults(`üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${booksWithoutFiles.length} –∫–Ω–∏–≥.`);
      setProcessingState({ status: 'completed', message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' });
      return;
    }
    setCurrentBookIndex(nextIndex);
    setSelectedFileIndex(0); // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
    await showFilesForCurrentBook();
  }, [booksWithoutFiles, currentBookIndex, showFilesForCurrentBook]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = useCallback(async (fileToSelect: FileOption | null) => {
    logToResults(`üéØ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞: ${fileToSelect ? fileToSelect.file_name : '–ü–†–û–ü–£–°–ö'}`);

    if (!fileToSelect) {
      logToResults('‚è≠Ô∏è –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–µ.');
      await processNextBook();
      return;
    }

    const currentBook = booksWithoutFiles[currentBookIndex];
    if (!currentBook) {
      logToResults(`‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∞—è –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞.`);
      setProcessingState({ status: 'error', message: '–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∞—è –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.' });
      return;
    }

    logToResults(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ "${fileToSelect.file_name}" –¥–ª—è –∫–Ω–∏–≥–∏ "${currentBook.title}"...`);
    setProcessingState({ status: 'processing', message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ —Ñ–∞–π–ª–∞...' });

    try {
      const token = await getAuthToken();
      const response = await fetch('/api/admin/file-link', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({
          bookId: currentBook.id,
          fileMessageId: fileToSelect.message_id,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      }

      logToResults(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ "${currentBook.title}"!`);
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏
      logToResults('üéâ –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.');
      setProcessingState({ status: 'completed', message: '–¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' });

    } catch (error: any) {
      logToResults(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ñ–∞–π–ª–∞: ${error.message}`);
      setProcessingState({ status: 'error', message: `–û—à–∏–±–∫–∞: ${error.message}` });
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Å–ª–µ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏
      logToResults('üéâ –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π.');
    }
  }, [booksWithoutFiles, currentBookIndex, getAuthToken, processNextBook, setProcessingState, showFilesForCurrentBook]);

  // –ü—Ä–æ–ø—É—Å–∫ –∫–Ω–∏–≥–∏
  const handleSkipBook = useCallback(async () => {
    const currentBook = booksWithoutFiles[currentBookIndex];
    if (currentBook) {
      logToResults(`‚è≠Ô∏è –ö–Ω–∏–≥–∞ "${currentBook.title}" –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`);
    } else {
      logToResults('‚è≠Ô∏è –ö–Ω–∏–≥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞).');
    }
    logToResults('üéâ –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∫–Ω–∏–≥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞).');
    setProcessingState({ status: 'completed', message: '–¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' });
  }, [booksWithoutFiles, currentBookIndex, setProcessingState, processNextBook]);


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
  const handleKeyDown = useCallback(async (event: KeyboardEvent) => {
    if (processingState.status !== 'searching') return;

    switch (event.key) {
      case 'ArrowUp':
        event.preventDefault();
        setSelectedFileIndex(prev => {
          const newIndex = Math.max(0, prev - 1);
          logToResults(`‚Üë –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${currentBookFiles[newIndex]?.file_name}`);
          return newIndex;
        });
        await showFilesForCurrentBook(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
        break;

      case 'ArrowDown':
        event.preventDefault();
        setSelectedFileIndex(prev => {
          const newIndex = Math.min(currentBookFiles.length - 1, prev + 1);
          logToResults(`‚Üì –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${currentBookFiles[newIndex]?.file_name}`);
          return newIndex;
        });
        await showFilesForCurrentBook(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
        break;

      case 'Enter':
        event.preventDefault();
        if (currentBookFiles.length > 0) {
          await handleFileSelect(currentBookFiles[selectedFileIndex]);
        } else {
          // –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
          logToResults('‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
          setProcessingState({ status: 'completed', message: '–¢–µ—Å—Ç–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.' });
        }
        break;

      case 'Escape':
        event.preventDefault();
        await handleSkipBook();
        break;
    }
  }, [processingState.status, currentBookFiles, selectedFileIndex, handleFileSelect, handleSkipBook, showFilesForCurrentBook]);

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    if (processingState.status === 'searching') {
      document.addEventListener('keydown', handleKeyDown);
      return () => document.removeEventListener('keydown', handleKeyDown);
    }
    return () => {};
  }, [processingState.status, handleKeyDown]);


  // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
  const startInteractiveFileSearch = async () => {
    if (processingState.status !== 'idle' && processingState.status !== 'completed' && processingState.status !== 'error') return;

    logToResults('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...');
    setProcessingState({ status: 'loading', message: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤...' });
    setError(null);

    try {
      // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
      const books = await loadBooksWithoutFiles();
      setBooksWithoutFiles(books);

      if (books.length === 0) {
        logToResults('‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ —É–∂–µ –∏–º–µ—é—Ç —Ñ–∞–π–ª—ã –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        setProcessingState({ status: 'idle', message: '–ù–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.' });
        return;
      }

      // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram
      setProcessingState({ status: 'searching', message: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...' });
      const telegramFiles = await loadTelegramFiles();
      setAllTelegramFiles(telegramFiles);

      // –®–∞–≥ 3: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–≤–æ–π –∫–Ω–∏–≥–∏
      logToResults('üéØ –®–∞–≥ 3: –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–∏–≥–∏...');
      setCurrentBookIndex(0);
      setSelectedFileIndex(0);
      await showFilesForCurrentBook();

    } catch (err: any) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', err);
      logToResults(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${err.message}`);
      setError(`–û—à–∏–±–∫–∞: ${err.message}`);
      setProcessingState({ status: 'error', message: `–û—à–∏–±–∫–∞: ${err.message}` });
    }
  };


  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const handleReset = useCallback(() => {
    logToResults('üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...');
    setProcessingState({ status: 'idle', message: '' });
    setError(null);
    setBooksWithoutFiles([]);
    setCurrentBookIndex(0);
    setCurrentBookFiles([]);
    setSelectedFileIndex(0);
    setAllTelegramFiles([]);
    logToResults('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.');
  }, []);

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <FileSearch className="h-5 w-5" />
          –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        </CardTitle>
        <CardDescription>
          –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ "–¶–∏–∫–ª –ò–ª—å-–†—å–µ–Ω" –ú–∞—Ä—Ç—ã –£—ç–ª–ª—Å
        </CardDescription>
      </CardHeader>

      <CardContent>
        <div className="flex items-center gap-2">
          <Button
            onClick={startInteractiveFileSearch}
            disabled={processingState.status === 'loading' || processingState.status === 'searching' || processingState.status === 'processing'}
          >
            {processingState.status === 'loading' || processingState.status === 'searching' || processingState.status === 'processing' ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                {processingState.status === 'loading' ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–∏—Å–∫/–û–±—Ä–∞–±–æ—Ç–∫–∞...'}
              </>
            ) : (
              <>
                <Play className="h-4 w-4 mr-2" />
                –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
              </>
            )}
          </Button>

          <Button variant="outline" onClick={handleReset}>
            <RotateCcw className="h-4 w-4 mr-2" />
            –°–±—Ä–æ—Å
          </Button>
        </div>

        {/* –ó–¥–µ—Å—å –Ω–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ */}
        {/* –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã" */}
      </CardContent>
    </Card>
  );
}