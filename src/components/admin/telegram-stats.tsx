'use client'

import { useState, useEffect, useRef } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { AlertCircle, BookOpen, Database, File, RefreshCw, CheckCircle, Loader2 } from 'lucide-react'
import { getBrowserSupabase } from '@/lib/browserSupabase'

interface TelegramStats {
  booksInDatabase: number
  booksInTelegram: number
  missingBooks: number
  booksWithoutFiles: number
}

interface PreviousStats {
  booksInDatabase: number
  booksInTelegram: number
  missingBooks: number
  booksWithoutFiles: number
}

export function TelegramStatsSection() {
  const [stats, setStats] = useState<TelegramStats>({
    booksInDatabase: 0,
    booksInTelegram: 0,
    missingBooks: 0,
    booksWithoutFiles: 0
  })
  const [previousStats, setPreviousStats] = useState<PreviousStats>({
    booksInDatabase: 0,
    booksInTelegram: 0,
    missingBooks: 0,
    booksWithoutFiles: 0
  })
  const [updating, setUpdating] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)
  const [animatedStats, setAnimatedStats] = useState<TelegramStats>({
    booksInDatabase: 0,
    booksInTelegram: 0,
    missingBooks: 0,
    booksWithoutFiles: 0
  })
  const animationRef = useRef<NodeJS.Timeout | null>(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ü–∏—Ñ—Ä
  const animateNumbers = (from: TelegramStats, to: TelegramStats) => {
    const duration = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞
    const steps = 60 // 60 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    const stepDuration = duration / steps
    const stepValue = {
      booksInDatabase: (to.booksInDatabase - from.booksInDatabase) / steps,
      booksInTelegram: (to.booksInTelegram - from.booksInTelegram) / steps,
      missingBooks: (to.missingBooks - from.missingBooks) / steps,
      booksWithoutFiles: (to.booksWithoutFiles - from.booksWithoutFiles) / steps,
    }

    let currentStep = 0

    const animate = () => {
      currentStep++
      setAnimatedStats({
        booksInDatabase: Math.round(from.booksInDatabase + stepValue.booksInDatabase * currentStep),
        booksInTelegram: Math.round(from.booksInTelegram + stepValue.booksInTelegram * currentStep),
        missingBooks: Math.round(from.missingBooks + stepValue.missingBooks * currentStep),
        booksWithoutFiles: Math.round(from.booksWithoutFiles + stepValue.booksWithoutFiles * currentStep),
      })

      if (currentStep < steps) {
        animationRef.current = setTimeout(animate, stepDuration)
      } else {
        setAnimatedStats(to)
      }
    }

    animate()
  }

  const loadStats = async () => {
    try {
      setError(null)

      console.log('Fetching Telegram stats...');
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const supabase = getBrowserSupabase();
      const { data: { session } } = await supabase.auth.getSession();

      const response = await fetch('/api/admin/telegram-stats', {
        headers: {
          'Authorization': `Bearer ${session?.access_token}`,
        }
      })

      console.log('Response status:', response.status);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.log('Error data:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      console.log('Stats data:', data);

      const newStats = {
        booksInDatabase: data.booksInDatabase || 0,
        booksInTelegram: data.booksInTelegram || 0,
        missingBooks: data.missingBooks || 0,
        booksWithoutFiles: data.booksWithoutFiles || 0
      }

      // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–∏—Ñ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      if (stats.booksInDatabase !== 0 || stats.booksInTelegram !== 0) {
        setPreviousStats(stats)
        animateNumbers(stats, newStats)
      } else {
        setAnimatedStats(newStats)
      }

      setStats(newStats)
    } catch (err: unknown) {
      console.log('Error caught in loadStats:', err);
      console.log('Error name:', (err as Error).name);
      console.log('Error message:', (err as Error).message);

      console.error('Error loading Telegram stats:', err)
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram: ${(err as Error).message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
  useEffect(() => {
    loadStats();

    // @ts-ignore
    window.refreshSyncStats = loadStats;

    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
    // @ts-ignore
    window.setStatsUpdateReport = (report: string) => {
      // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
      console.log('Stats update report:', report);
    };

    // –û—á–∏—â–∞–µ–º –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      if (animationRef.current) {
        clearTimeout(animationRef.current)
      }

      // @ts-ignore
      if (typeof window.refreshSyncStats === 'function') {
        // @ts-ignore
        delete window.refreshSyncStats;
      }

      // @ts-ignore
      if (typeof window.setStatsUpdateReport === 'function') {
        // @ts-ignore
        delete window.setStatsUpdateReport;
      }
    };
  }, []);

  // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏
  useEffect(() => {
    if (success || error) {
      if (animationRef.current) {
        clearTimeout(animationRef.current)
      }
    }
  }, [success, error])

  const updateStats = async () => {
    try {
      setUpdating(true)
      setError(null)
      setSuccess(null)

      console.log('Starting stats update...');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      const progressReport = `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram

üìä –°–¢–ê–¢–£–°: –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...

‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–¥—Å—á–µ—Ç—É –∫–Ω–∏–≥ –≤ Telegram –∫–∞–Ω–∞–ª–µ...
‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–¥—Å—á–µ—Ç—É –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...
‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–¥—Å—á–µ—Ç—É –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤...

‚è±Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...
`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        (window as any).setStatsUpdateReport(progressReport);
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const supabase = getBrowserSupabase();
      const { data: { session } } = await supabase.auth.getSession();

      const response = await fetch('/api/admin/telegram-stats', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${session?.access_token}`,
        }
      })

      console.log('Update response status:', response.status);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.log('Update error data:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      console.log('Update response data:', data);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateProgressReport = `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram

üìä –°–¢–ê–¢–£–°: –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥—Å—á–µ—Ç –∫–Ω–∏–≥ –≤ Telegram –∫–∞–Ω–∞–ª–µ...
‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥—Å—á–µ—Ç –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...
‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥—Å—á–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤...

‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏...
‚è±Ô∏è –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...
`;

      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        (window as any).setStatsUpdateReport(updateProgressReport);
      }

      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç
      let attempts = 0;
      const maxAttempts = 24; // 2 –º–∏–Ω—É—Ç—ã (24 * 5 —Å–µ–∫—É–Ω–¥)

      const checkForUpdates = async () => {
        attempts++;

        try {
          const freshStats = await loadStats();

          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Å—á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
          if (attempts >= maxAttempts) {
            const finalReport = `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
üìö –ö–Ω–∏–≥ –≤ Telegram: ${stats.booksInTelegram}
üíæ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${stats.booksInDatabase}
‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–Ω–∏–≥–∏: ${stats.missingBooks}
üìÅ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${stats.booksWithoutFiles}

‚è±Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${Math.round(attempts * 5 / 60)} –º–∏–Ω—É—Ç
`;

            if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
              (window as any).setStatsUpdateReport(finalReport);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            await loadStats();
            setUpdating(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            return;
          }

          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
          setTimeout(checkForUpdates, 5000);

        } catch (error) {
          console.error('Error checking for updates:', error);
          attempts = maxAttempts; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      };

      // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      setTimeout(checkForUpdates, 10000);

    } catch (err: unknown) {
      console.error('Error updating Telegram stats:', err)
      setUpdating(false) // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      await loadStats();

      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram: ${(err as Error).message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      const errorReport = `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram

üí¨ –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: ${(err as Error).message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}

üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ
`;

      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        (window as any).setStatsUpdateReport(errorReport);
      }
    }
  }

  return (
    <Card className="relative">
      <CardHeader>
        <CardTitle>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
        <CardDescription>
          –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–∞—Ö –≤ Telegram –∫–∞–Ω–∞–ª–µ –∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        </CardDescription>
      </CardHeader>
      <div className="absolute top-4 right-4">
        <Button
          onClick={updateStats}
          disabled={updating}
          variant="outline"
          size="sm"
          className="min-w-[100px]"
        >
          {updating ? (
            <>
              <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
            </>
          ) : (
            <>
              <RefreshCw className="h-4 w-4 mr-2" />
              –û–±–Ω–æ–≤–∏—Ç—å
            </>
          )}
        </Button>
      </div>
      <CardContent>
        {/* –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="border rounded-lg p-4 transition-all duration-300 hover:shadow-md">
            <div className="flex items-center">
              <BookOpen className="h-5 w-5 text-blue-500 mr-2" />
              <h3 className="font-medium">–ö–Ω–∏–≥ –≤ Telegram</h3>
            </div>
            <p className="text-2xl font-bold mt-2 tabular-nums transition-all duration-300">
              {animatedStats.booksInTelegram.toLocaleString()}
            </p>
            {previousStats.booksInTelegram !== 0 && previousStats.booksInTelegram !== stats.booksInTelegram && (
              <div className="text-xs text-muted-foreground mt-1">
                –ë—ã–ª–æ: {previousStats.booksInTelegram.toLocaleString()}
              </div>
            )}
          </div>

          <div className="border rounded-lg p-4 transition-all duration-300 hover:shadow-md">
            <div className="flex items-center">
              <Database className="h-5 w-5 text-green-500 mr-2" />
              <h3 className="font-medium">–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h3>
            </div>
            <p className="text-2xl font-bold mt-2 tabular-nums transition-all duration-300">
              {animatedStats.booksInDatabase.toLocaleString()}
            </p>
            {previousStats.booksInDatabase !== 0 && previousStats.booksInDatabase !== stats.booksInDatabase && (
              <div className="text-xs text-muted-foreground mt-1">
                –ë—ã–ª–æ: {previousStats.booksInDatabase.toLocaleString()}
              </div>
            )}
          </div>

          <div className="border rounded-lg p-4 transition-all duration-300 hover:shadow-md">
            <div className="flex items-center">
              <AlertCircle className="h-5 w-5 text-yellow-500 mr-2" />
              <h3 className="font-medium">–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–Ω–∏–≥–∏</h3>
            </div>
            <p className="text-2xl font-bold mt-2 tabular-nums transition-all duration-300">
              {animatedStats.missingBooks.toLocaleString()}
            </p>
            {previousStats.missingBooks !== 0 && previousStats.missingBooks !== stats.missingBooks && (
              <div className="text-xs text-muted-foreground mt-1">
                –ë—ã–ª–æ: {previousStats.missingBooks.toLocaleString()}
              </div>
            )}
          </div>

          <div className="border rounded-lg p-4 transition-all duration-300 hover:shadow-md">
            <div className="flex items-center">
              <File className="h-5 w-5 text-red-500 mr-2" />
              <h3 className="font-medium">–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã</h3>
            </div>
            <p className="text-2xl font-bold mt-2 tabular-nums transition-all duration-300">
              {animatedStats.booksWithoutFiles.toLocaleString()}
            </p>
            {previousStats.booksWithoutFiles !== 0 && previousStats.booksWithoutFiles !== stats.booksWithoutFiles && (
              <div className="text-xs text-muted-foreground mt-1">
                –ë—ã–ª–æ: {previousStats.booksWithoutFiles.toLocaleString()}
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}