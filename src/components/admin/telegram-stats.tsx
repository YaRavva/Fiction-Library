'use client'

import { useState, useEffect, useRef } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { AlertCircle, BookOpen, Database, File, RefreshCw, CheckCircle, Loader2 } from 'lucide-react'
import { Spinner } from "@/components/ui/spinner"
import { getBrowserSupabase } from '@/lib/browserSupabase'

interface TelegramStats {
  booksInDatabase: number
  booksInTelegram: number
  missingBooks: number
  booksWithoutFiles: number
}

interface PreviousStats {
  booksInDatabase: number
  booksInTelegram: number
  missingBooks: number
  booksWithoutFiles: number
}

export function TelegramStatsSection() {
  const [stats, setStats] = useState<TelegramStats>({
    booksInDatabase: 0,
    booksInTelegram: 0,
    missingBooks: 0,
    booksWithoutFiles: 0
  })
  const [previousStats, setPreviousStats] = useState<PreviousStats>({
    booksInDatabase: 0,
    booksInTelegram: 0,
    missingBooks: 0,
    booksWithoutFiles: 0
  })
  const [updating, setUpdating] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [success, setSuccess] = useState<string | null>(null)
  const [animatedStats, setAnimatedStats] = useState<TelegramStats>({
    booksInDatabase: 0,
    booksInTelegram: 0,
    missingBooks: 0,
    booksWithoutFiles: 0
  })
  const animationRef = useRef<NodeJS.Timeout | null>(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ü–∏—Ñ—Ä
  const animateNumbers = (from: TelegramStats, to: TelegramStats) => {
    const duration = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞
    const steps = 60 // 60 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    const stepDuration = duration / steps
    const stepValue = {
      booksInDatabase: (to.booksInDatabase - from.booksInDatabase) / steps,
      booksInTelegram: (to.booksInTelegram - from.booksInTelegram) / steps,
      missingBooks: (to.missingBooks - from.missingBooks) / steps,
      booksWithoutFiles: (to.booksWithoutFiles - from.booksWithoutFiles) / steps,
    }

    let currentStep = 0

    const animate = () => {
      currentStep++
      setAnimatedStats({
        booksInDatabase: Math.round(from.booksInDatabase + stepValue.booksInDatabase * currentStep),
        booksInTelegram: Math.round(from.booksInTelegram + stepValue.booksInTelegram * currentStep),
        missingBooks: Math.round(from.missingBooks + stepValue.missingBooks * currentStep),
        booksWithoutFiles: Math.round(from.booksWithoutFiles + stepValue.booksWithoutFiles * currentStep),
      })

      if (currentStep < steps) {
        animationRef.current = setTimeout(animate, stepDuration)
      } else {
        setAnimatedStats(to)
      }
    }

    animate()
  }

  const loadStats = async () => {
    try {
      setError(null)

      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const supabase = getBrowserSupabase();
      const { data: { session } } = await supabase.auth.getSession();

      const response = await fetch('/api/admin/telegram-stats', {
        headers: {
          'Authorization': `Bearer ${session?.access_token}`,
        }
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      const newStats = {
        booksInDatabase: data.booksInDatabase || 0,
        booksInTelegram: data.booksInTelegram || 0,
        missingBooks: data.missingBooks || 0,
        booksWithoutFiles: data.booksWithoutFiles || 0
      }

      // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–∏—Ñ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      if (stats.booksInDatabase !== 0 || stats.booksInTelegram !== 0) {
        setPreviousStats(stats)
        animateNumbers(stats, newStats)
      } else {
        setAnimatedStats(newStats)
      }

      setStats(newStats)
      
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      // –≠—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–æ–Ω—Ü–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      return newStats;
    } catch (err: unknown) {
      console.error('Error loading Telegram stats:', err)
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram: ${(err as Error).message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const timestamp = new Date().toLocaleTimeString('ru-RU');
      const errorReport = `[${timestamp}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram: ${(err as Error).message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(errorReport);
        } catch (error) {
          console.error('‚ùå Error sending message to results window:', error);
        }
      }
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      return stats;
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
  useEffect(() => {
    loadStats();

    // @ts-ignore
    window.refreshSyncStats = loadStats;

    // –û—á–∏—â–∞–µ–º –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      if (animationRef.current) {
        clearTimeout(animationRef.current)
      }

      // @ts-ignore
      if (typeof window.refreshSyncStats === 'function') {
        // @ts-ignore
        delete window.refreshSyncStats;
      }
    };
  }, []);

  const updateStats = async () => {
    try {
      setUpdating(true)
      setError(null)
      setSuccess(null)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const timestamp = new Date().toLocaleTimeString('ru-RU');
      const progressReport = `[${timestamp}] üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram...\n`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(progressReport);
        } catch (error) {
          console.error('‚ùå Error sending message to results window:', error);
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const supabase = getBrowserSupabase();
      const { data: { session } } = await supabase.auth.getSession();

      const response = await fetch('/api/admin/telegram-stats', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${session?.access_token}`,
        }
      })

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`)
      }

      const data = await response.json()

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateProgressReport = `[${timestamp}] üìä –°—Ç–∞—Ç—É—Å: –û–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞\n`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(updateProgressReport);
        } catch (error) {
          console.error('‚ùå Error sending message to results window:', error);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
      let attempts = 0;
      const maxAttempts = 15; // 30 —Å–µ–∫—É–Ω–¥ (15 * 2 —Å–µ–∫—É–Ω–¥—ã)
      let updateCompleted = false;

      const checkForUpdates = async () => {
        // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if (updateCompleted) {
          return;
        }
        
        attempts++;

        try {
          const updatedStats = await loadStats();

          // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Å—á–∏—Ç–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
          if (attempts >= maxAttempts) {
            updateCompleted = true;
            
            const finalTimestamp = new Date().toLocaleTimeString('ru-RU');
            const finalReport = `[${finalTimestamp}] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: üìö –ö–Ω–∏–≥ –≤ Telegram: ${updatedStats.booksInTelegram} | üíæ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${updatedStats.booksInDatabase} | ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–Ω–∏–≥–∏: ${updatedStats.missingBooks} | üìÅ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${updatedStats.booksWithoutFiles}\n`;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
              try {
                (window as any).setStatsUpdateReport(finalReport);
              } catch (error) {
                console.error('‚ùå Error sending message to results window:', error);
              }
            }

            setUpdating(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            return;
          }

          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(checkForUpdates, 2000);

        } catch (error) {
          // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          if (updateCompleted) {
            return;
          }
          
          updateCompleted = true;
          attempts = maxAttempts; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
          const errorTimestamp = new Date().toLocaleTimeString('ru-RU');
          const errorReport = `[${errorTimestamp}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram: ${(error as Error).message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n`;
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
          if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
            try {
              (window as any).setStatsUpdateReport(errorReport);
            } catch (error) {
              console.error('‚ùå Error sending message to results window:', error);
            }
          }
          
          setUpdating(false); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      };

      // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(checkForUpdates, 2000);

    } catch (err: unknown) {
      // –í–ê–ñ–ù–û: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
      setUpdating(false);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      await loadStats();

      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram: ${(err as Error).message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      const errorTimestamp = new Date().toLocaleTimeString('ru-RU');
      const errorReport = `[${errorTimestamp}] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram: ${(err as Error).message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n`;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
        try {
          (window as any).setStatsUpdateReport(errorReport);
        } catch (error) {
          console.error('‚ùå Error sending message to results window:', error);
        }
      }
    }
  }

  return (
    <Card className="relative">
      <CardHeader className="space-y-0 pb-1">
        <CardTitle className="text-lg font-semibold">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
      </CardHeader>
      <div className="absolute top-2 right-3">
        <Button
          onClick={updateStats}
          disabled={updating}
          variant="outline"
          size="sm"
          className="min-w-[100px] h-8 text-sm"
        >
          {updating ? (
            <>
              <Spinner className="h-4 w-4 mr-2" />
              –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
            </>
          ) : (
            <>
              –û–±–Ω–æ–≤–∏—Ç—å
            </>
          )}
        </Button>
      </div>
      <CardContent className="pb-2">
        {/* –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã - –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏ */}
        
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-2">
          <div className="border rounded-lg p-4 transition-all duration-300 hover:shadow-md">
            <div className="flex items-center">
              <BookOpen className="h-5 w-5 text-blue-500 mr-2" />
              <h3 className="font-medium">–ö–Ω–∏–≥ –≤ Telegram</h3>
            </div>
            <p className="text-2xl font-bold mt-2 tabular-nums transition-all duration-300">
              {animatedStats.booksInTelegram.toLocaleString()}
            </p>
          </div>

          <div className="border rounded-lg p-4 transition-all duration-300 hover:shadow-md">
            <div className="flex items-center">
              <Database className="h-5 w-5 text-green-500 mr-2" />
              <h3 className="font-medium">–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</h3>
            </div>
            <p className="text-2xl font-bold mt-2 tabular-nums transition-all duration-300">
              {animatedStats.booksInDatabase.toLocaleString()}
            </p>
          </div>

          <div className="border rounded-lg p-4 transition-all duration-300 hover:shadow-md">
            <div className="flex items-center">
              <AlertCircle className="h-5 w-5 text-yellow-500 mr-2" />
              <h3 className="font-medium">–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–Ω–∏–≥–∏</h3>
            </div>
            <p className="text-2xl font-bold mt-2 tabular-nums transition-all duration-300">
              {animatedStats.missingBooks.toLocaleString()}
            </p>
          </div>

          <div className="border rounded-lg p-4 transition-all duration-300 hover:shadow-md">
            <div className="flex items-center">
              <File className="h-5 w-5 text-red-500 mr-2" />
              <h3 className="font-medium">–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã</h3>
            </div>
            <p className="text-2xl font-bold mt-2 tabular-nums transition-all duration-300">
              {animatedStats.booksWithoutFiles.toLocaleString()}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}