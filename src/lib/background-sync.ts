import { TelegramSyncService } from './telegram/sync';
import { taskManager, TaskProgress } from './task-manager';

/**
 * –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
 */
export class BackgroundSyncHandler {
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
   * @param taskId ID –∑–∞–¥–∞—á–∏
   * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  static async startSync(taskId: string, limit: number = 10): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      taskManager.updateTaskStatus(taskId, 'running', 'üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      
      // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const syncService = await TelegramSyncService.getInstance();
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ª–∏–º–∏—Ç: ' + limit + ')');
      
      // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      let processedMessagesHistory = '';
      let addedCount = 0;
      let updatedCount = 0;
      let skippedCount = 0;
      let errorCount = 0;
      let processedCount = 0;
      
      taskManager.updateTaskProgress(taskId, 0, 'üì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      const results = await syncService.syncBooks(limit);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      for (const detail of results.details) {
        processedCount++;
        const progress = Math.round((processedCount / results.details.length) * 100);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –∏–∑ –¥–µ—Ç–∞–ª–µ–π
        const typedDetail = detail as { 
          bookTitle?: string; 
          bookAuthor?: string; 
          bookId?: string; 
          msgId?: string;
          status: string;
          reason?: string;
          error?: string;
        };
        
        const bookInfo = typedDetail.bookTitle && typedDetail.bookAuthor 
          ? `${typedDetail.bookAuthor} - ${typedDetail.bookTitle}`
          : typedDetail.bookId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞';
        
        switch (typedDetail.status) {
          case 'added':
            addedCount++;
            processedMessagesHistory += `${processedMessagesHistory ? '\n' : ''}‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: ${bookInfo} (—Å–æ–æ–±—â–µ–Ω–∏–µ ${typedDetail.msgId})`;
            break;
          case 'updated':
            updatedCount++;
            processedMessagesHistory += `${processedMessagesHistory ? '\n' : ''}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–Ω–∏–≥–∞: ${bookInfo} (—Å–æ–æ–±—â–µ–Ω–∏–µ ${typedDetail.msgId})`;
            break;
          case 'skipped':
            skippedCount++;
            const reason = typedDetail.reason || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞';
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏—á–∏–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            let russianReason = reason;
            switch (reason) {
              case 'existing book has better description':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –ª—É—á—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ';
                break;
              case 'existing book has genres':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –∂–∞–Ω—Ä—ã';
                break;
              case 'existing book has tags':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Ç–µ–≥–∏';
                break;
              case 'existing book has cover':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞';
                break;
              case 'existing book has telegram post id':
                russianReason = '—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è';
                break;
              case 'book already exists in database':
                russianReason = '–∫–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
                break;
              case 'book already exists':
                russianReason = '–∫–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';
                break;
              case 'missing title or author':
                russianReason = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä';
                break;
              case 'no text content':
                russianReason = '—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞';
                break;
              case 'metadata complete':
                russianReason = '–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ';
                break;
            }
            processedMessagesHistory += `${processedMessagesHistory ? '\n' : ''}‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${bookInfo} (—Å–æ–æ–±—â–µ–Ω–∏–µ ${typedDetail.msgId}, ${russianReason})`;
            break;
          case 'error':
            errorCount++;
            const error = typedDetail.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            processedMessagesHistory += `${processedMessagesHistory ? '\n' : ''}‚ùå –û—à–∏–±–∫–∞: ${bookInfo} (—Å–æ–æ–±—â–µ–Ω–∏–µ ${typedDetail.msgId}, ${error})`;
            break;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const statusMessage = `${processedMessagesHistory}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedCount} | –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} | –û—à–∏–±–æ–∫: ${errorCount} | –í—Å–µ–≥–æ: ${processedCount}/${results.details.length}`;
        taskManager.updateTaskProgress(taskId, progress, statusMessage, detail);
      }
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      const finalMessage = `${processedMessagesHistory}\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedCount} | –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} | –û—à–∏–±–æ–∫: ${errorCount} | –í—Å–µ–≥–æ: ${results.details.length}`;
      taskManager.updateTaskStatus(taskId, 'completed', finalMessage);
      taskManager.updateTaskProgress(taskId, 100, finalMessage, {
        addedCount,
        updatedCount,
        skippedCount,
        errorCount,
        totalCount: results.details.length,
        results
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏';
      taskManager.updateTaskStatus(taskId, 'failed', `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
      taskManager.updateTaskProgress(taskId, 100, `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
    }
  }
}