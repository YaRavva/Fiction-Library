import { TelegramService } from './client';
import { MetadataParser, BookMetadata } from './parser';
import { uploadFileToStorage, upsertBookRecord } from '../supabase';
import { serverSupabase } from '../serverSupabase';
import { putObject } from '../s3-service';
import { Message } from 'node-telegram-bot-api';

export class TelegramMetadataService {
    private static instance: TelegramMetadataService;
    private telegramClient: TelegramService | null = null;

    private constructor() {}

    public static async getInstance(): Promise<TelegramMetadataService> {
        if (!TelegramMetadataService.instance) {
            TelegramMetadataService.instance = new TelegramMetadataService();
            TelegramMetadataService.instance.telegramClient = await TelegramService.getInstance();
        }
        return TelegramMetadataService.instance;
    }

    /**
     * –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥
     * @param batchSize –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
     */
    public async indexAllMessages(batchSize: number = 100): Promise<{ indexed: number; errors: number }> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ (–ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ ${batchSize})`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
            const channel = await this.telegramClient.getMetadataChannel();

            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            console.log('üì• –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞...');
            const allMessages = await this.telegramClient.getAllMessages(channelId, batchSize) as unknown as Message[];
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${allMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏`);

            let indexed = 0;
            let errors = 0;

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const msg of allMessages) {
                const anyMsg = msg as unknown as { [key: string]: unknown };
                
                try {
                    // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
                    let author: string | undefined;
                    let title: string | undefined;
                    
                    if ((msg as { text?: string }).text) {
                        const metadata = MetadataParser.parseMessage((msg as { text: string }).text);
                        author = metadata.author;
                        title = metadata.title;
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏–Ω–¥–µ–∫—Å
                    try {
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      const supabase: any = serverSupabase;
                      const { error: upsertError } = await supabase
                        .from('telegram_messages_index')
                        .upsert({
                            message_id: typeof anyMsg.id === 'number' ? anyMsg.id : parseInt(String(anyMsg.id), 10),
                            channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '',
                            author: author || null,
                            title: title || null,
                            updated_at: new Date().toISOString()
                        }, {
                            onConflict: 'message_id'
                        });

                      if (upsertError) {
                          console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, upsertError);
                          errors++;
                      } else {
                          indexed++;
                      }
                    } catch (dbError) {
                      console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏:`, dbError);
                      errors++;
                    }

                } catch (error) {
                    console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, error);
                    errors++;
                }
            }

            console.log(`üìä –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${indexed} —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
            return { indexed, errors };
        } catch (error) {
            console.error('Error in indexAllMessages:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @returns ID —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
     */
    public async getLatestMessageId(): Promise<string | null> {
        try {
            // Now message_id is stored as BIGINT, so we can sort it directly
            // @ts-ignore
            const { data, error } = await serverSupabase
                .from('telegram_messages_index')
                .select('message_id')
                .order('message_id', { ascending: false })
                .limit(1)
                .single();

            if (error) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                return null;
            }

            // Return the highest ID as string
            return data ? (data as { message_id: number }).message_id.toString() : null;
        } catch (error) {
            console.error('Error in getLatestMessageId:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ null
     */
    public async getLastProcessedMessageId(): Promise<string | null> {
        try {
            // @ts-ignore
            const { data, error } = await serverSupabase
                .from('telegram_processed_messages')
                .select('message_id')
                .order('processed_at', { ascending: false })
                .limit(1)
                .single();

            if (error) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                return null;
            }

            return data ? (data as { message_id: string }).message_id : null;
        } catch (error) {
            console.error('Error in getLastProcessedMessageId:', error);
            return null;
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
     * @returns –ú–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
     */
    public async findNewMessages(limit: number = 10): Promise<Array<{message_id: number, author: string | null, title: string | null}>> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const lastProcessedIdStr = await this.getLastProcessedMessageId();
            const lastProcessedId = lastProcessedIdStr ? parseInt(lastProcessedIdStr, 10) : 0;
            
            console.log(`üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ ID: ${lastProcessedId}`);
            
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
            // @ts-ignore
            const { data, error } = await serverSupabase
                .from('telegram_messages_index')
                .select('message_id, author, title')
                .gt('message_id', lastProcessedId)
                .order('message_id', { ascending: true })
                .limit(limit);

            if (error) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                return [];
            }

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data?.length || 0} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
            return data || [];
        } catch (error) {
            console.error('Error in findNewMessages:', error);
            return [];
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ
     * @param keywords –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
     * @param limit –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
     * @returns –ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞
     */
    public async searchMessagesByKeywords(
        keywords: string[], 
        limit: number = 50
    ): Promise<Array<{message_id: number, author: string | null, title: string | null, similarity: number}>> {
        try {
            if (keywords.length === 0) {
                return [];
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            const orConditions: string[] = [];
            
            keywords.forEach(keyword => {
                const lowerKeyword = keyword.toLowerCase();
                orConditions.push(
                    `author.ilike.%${lowerKeyword}%`,
                    `title.ilike.%${lowerKeyword}%`
                );
            });
            
            // @ts-ignore
            const { data, error } = await serverSupabase
                .from('telegram_messages_index')
                .select('message_id, author, title')
                .or(orConditions.join(','))
                .limit(limit);

            if (error) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:', error);
                return [];
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const resultsWithSimilarity = (data || []).map(item => {
                const itemData = item as { 
                    message_id: number; 
                    author: string | null; 
                    title: string | null;
                };
                
                let similarity = 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
                keywords.forEach(keyword => {
                    const lowerKeyword = keyword.toLowerCase();
                    
                    if (itemData.author && itemData.author.toLowerCase().includes(lowerKeyword)) {
                        similarity += 3; // –í—ã—Å–æ–∫–∏–π –≤–µ—Å –¥–ª—è –∞–≤—Ç–æ—Ä–∞
                    }
                    
                    if (itemData.title && itemData.title.toLowerCase().includes(lowerKeyword)) {
                        similarity += 5; // –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –≤–µ—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                    }
                });
                
                return {
                    message_id: itemData.message_id,
                    author: itemData.author,
                    title: itemData.title,
                    similarity
                };
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            resultsWithSimilarity.sort((a, b) => b.similarity - a.similarity);
            
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${resultsWithSimilarity.length} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${keywords.join(', ')}`);
            return resultsWithSimilarity;
        } catch (error) {
            console.error('Error in searchMessagesByKeywords:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
     * @returns –û–±—ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    public async getIndexStatistics(): Promise<{
        totalMessages: number;
        messagesWithAuthor: number;
        messagesWithTitle: number;
    }> {
        try {
            // @ts-ignore
            const { data: totalData, error: totalError } = await serverSupabase
                .from('telegram_messages_index')
                .select('*', { count: 'exact', head: true });

            if (totalError) throw totalError;

            // @ts-ignore
            const { data: authorData, error: authorError } = await serverSupabase
                .from('telegram_messages_index')
                .select('*', { count: 'exact', head: true })
                .not('author', 'is', null);

            if (authorError) throw authorError;

            // @ts-ignore
            const { data: titleData, error: titleError } = await serverSupabase
                .from('telegram_messages_index')
                .select('*', { count: 'exact', head: true })
                .not('title', 'is', null);

            if (titleError) throw titleError;

            return {
                totalMessages: totalData ? totalData.length : 0,
                messagesWithAuthor: authorData ? authorData.length : 0,
                messagesWithTitle: titleData ? titleData.length : 0
            };
        } catch (error) {
            console.error('Error in getIndexStatistics:', error);
            return {
                totalMessages: 0,
                messagesWithAuthor: 0,
                messagesWithTitle: 0
            };
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–∏–≥–∏ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
     */
    public async syncBooks(limit: number = 10): Promise<{ processed: number; added: number; updated: number; skipped: number; errors: number; details: unknown[] }> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥ (–ª–∏–º–∏—Ç: ${limit})`);
            
            // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log('üîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
            const newMessages = await this.findNewMessages(limit);
            
            if (newMessages.length === 0) {
                console.log('  ‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return {
                    processed: 0,
                    added: 0,
                    updated: 0,
                    skipped: 0,
                    errors: 0,
                    details: []
                };
            }

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${newMessages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
            console.log('üì° –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
            const channel = await this.telegramClient.getMetadataChannel();

            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏—Ö ID
            console.log('üì• –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram...');
            const fullMessages: Message[] = [];
            
            for (const msgInfo of newMessages) {
                try {
                    // @ts-ignore
                    const fullMessage = await this.telegramClient.getMessageById(channelId, msgInfo.message_id);
                    if (fullMessage) {
                        fullMessages.push(fullMessage as unknown as Message);
                        console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgInfo.message_id}`);
                    } else {
                        console.warn(`  ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${msgInfo.message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
                    }
                } catch (error) {
                    console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${msgInfo.message_id}:`, error);
                }
            }
            
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${fullMessages.length} –ø–æ–ª–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n`);

            // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const metadataList: BookMetadata[] = [];
            const details: unknown[] = []; // –û–±—ä—è–≤–ª—è–µ–º details –∑–¥–µ—Å—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ü–∏–∫–ª–µ
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const msg of fullMessages) {
                const anyMsg = msg as unknown as { [key: string]: unknown };
                console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                if (!(msg as { text?: string }).text) {
                    console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ details –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    details.push({ 
                        msgId: anyMsg.id, 
                        status: 'skipped', 
                        reason: 'no text content'
                    });
                    continue;
                }

                // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const metadata = MetadataParser.parseMessage((msg as { text: string }).text);
                // –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata.messageId = anyMsg.id as number;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
                if (!metadata.title || !metadata.author || metadata.title.trim() === '' || metadata.author.trim() === '') {
                    console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä)`);
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ details –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    details.push({ 
                        msgId: anyMsg.id, 
                        status: 'skipped', 
                        reason: 'missing title or author',
                        bookTitle: metadata.title || 'unknown',
                        bookAuthor: metadata.author || 'unknown'
                    });
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–∏–≥–∏ –≤ –ë–î –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞
                let bookExists = false;
                let existingBookId = null;
                try {
                    // @ts-ignore
                    const { data: foundBooks, error: findError } = await serverSupabase
                        .from('books')
                        .select('id')
                        .eq('title', metadata.title)
                        .eq('author', metadata.author);

                    if (!findError && foundBooks && foundBooks.length > 0) {
                        bookExists = true;
                        existingBookId = (foundBooks[0] as { id: string }).id;
                        console.log(`  ‚ÑπÔ∏è –ö–Ω–∏–≥–∞ "${metadata.title}" –∞–≤—Ç–æ—Ä–∞ ${metadata.author} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    }
                } catch (checkError) {
                    console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏:`, checkError);
                }

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (bookExists) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ details –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    details.push({ 
                        msgId: anyMsg.id, 
                        status: 'skipped', 
                        reason: 'book already exists in database',
                        bookId: existingBookId,
                        bookTitle: metadata.title,
                        bookAuthor: metadata.author
                    });
                    continue;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –æ–±–ª–æ–∂–µ–∫ –∏–∑ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                const coverUrls: string[] = [];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!bookExists && anyMsg.media) {
                    console.log(`  üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ${anyMsg.id} (—Ç–∏–ø: ${(anyMsg.media as { className: string }).className})`);
                    
                    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    const downloadWithRetry = async (media: unknown, maxRetries = 3) => {
                        for (let attempt = 1; attempt <= maxRetries; attempt++) {
                            try {
                                console.log(`    ‚Üí –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${attempt}/${maxRetries}...`);
                                if (!this.telegramClient) {
                                    throw new Error('Telegram client not initialized');
                                }
                                const result = await Promise.race([
                                    this.telegramClient.downloadMedia(media),
                                    new Promise<never>((_, reject) => 
                                        setTimeout(() => reject(new Error(`Timeout: Downloading media took too long (attempt ${attempt}/${maxRetries})`)), 60000)) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥
                                ]);
                                return result;
                            } catch (err: unknown) {
                                console.warn(`    ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err instanceof Error ? err.message : 'Unknown error');
                                if (attempt === maxRetries) {
                                    throw err; // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                                }
                                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                                await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
                            }
                        }
                    };
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–ø—Ä–µ–≤—å—é (MessageMediaWebPage) - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π –¥–ª—è –æ–±–ª–æ–∂–µ–∫
                    if ((anyMsg.media as { className: string }).className === 'MessageMediaWebPage' && (anyMsg.media as { webpage?: { photo?: unknown } }).webpage?.photo) {
                        console.log(`  ‚Üí –í–µ–±-–ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é...`);
                            const result = await downloadWithRetry((anyMsg.media as { webpage: { photo: unknown } }).webpage.photo);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                const coversBucket = process.env.S3_COVERS_BUCKET_NAME;
                                if (!coversBucket) {
                                  throw new Error('S3_COVERS_BUCKET_NAME environment variable is not set.');
                                }
                                await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                                const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err: unknown) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é:`, err instanceof Error ? err.message : 'Unknown error');
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (MessageMediaPhoto)
                    else if ((anyMsg.media as { photo?: unknown }).photo) {
                        console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ...`);
                            const result = await downloadWithRetry(msg);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                const coversBucket = process.env.S3_COVERS_BUCKET_NAME;
                                if (!coversBucket) {
                                  throw new Error('S3_COVERS_BUCKET_NAME environment variable is not set.');
                                }
                                await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                                const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err: unknown) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err instanceof Error ? err.message : 'Unknown error');
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    else if ((anyMsg.media as { document?: unknown }).document) {
                        const mimeType = (anyMsg.media as { document: { mimeType?: string } }).document.mimeType;
                        if (mimeType && mimeType.startsWith('image/')) {
                            console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç: ${mimeType})`);
                            try {
                                console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...`);
                                const result = await downloadWithRetry(msg);
                                const photoBuffer = result instanceof Buffer ? result : null;
                                if (photoBuffer) {
                                    const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                    console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                    const coversBucket = process.env.S3_COVERS_BUCKET_NAME;
                                    if (!coversBucket) {
                                      throw new Error('S3_COVERS_BUCKET_NAME environment variable is not set.');
                                    }
                                    await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                                    const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                                    coverUrls.push(photoUrl);
                                    console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                                } else {
                                    console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                                }
                            } catch (err: unknown) {
                                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err instanceof Error ? err.message : 'Unknown error');
                            }
                        }
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
                metadataList.push({
                    ...metadata,
                    coverUrls: coverUrls.length > 0 ? coverUrls : metadata.coverUrls || []
                });
                
                // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ details
                if (bookExists) {
                    details.push({ 
                        msgId: anyMsg.id, 
                        status: 'skipped', 
                        reason: 'book already exists',
                        bookId: existingBookId,
                        bookTitle: metadata.title,
                        bookAuthor: metadata.author
                    });
                }
            }

            console.log(`üìä –í—Å–µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataList.length}`);
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
            console.log('üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π...');
            const resultImport = await this.importMetadataWithDeduplication(metadataList);
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º details –∏–∑ –æ–±–æ–∏—Ö —ç—Ç–∞–ø–æ–≤
            const combinedDetails = [...details, ...resultImport.details];
            console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
            
            // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (–∏–∑ –æ–±–æ–∏—Ö —ç—Ç–∞–ø–æ–≤)
            const totalSkipped = resultImport.skipped + details.filter(d => (d as { status: string }).status === 'skipped').length;
            
            // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
            console.log('\nüìä –°–í–û–î–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:');
            console.log(`   ========================================`);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${fullMessages.length}`);
            console.log(`   –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataList.length}`);
            console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ${resultImport.added}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ${resultImport.updated}`);
            console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalSkipped}`);
            console.log(`   –û—à–∏–±–æ–∫: ${resultImport.errors}`);
            console.log(`   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${resultImport.processed}`);
            
            return {
                processed: resultImport.processed,
                added: resultImport.added,
                updated: resultImport.updated,
                skipped: totalSkipped,
                errors: resultImport.errors,
                details: combinedDetails
            };
        } catch (error) {
            console.error('Error in syncBooks:', error);
            throw error;
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram –≤ –ë–î —Å —É—á—ë—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
     * @param metadata –ú–∞—Å—Å–∏–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
     */
    public async importMetadataWithDeduplication(metadata: BookMetadata[]): Promise<{ processed: number; added: number; updated: number; skipped: number; errors: number; details: unknown[] }> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }
        let processed = 0, added = 0, updated = 0, skipped = 0, errors = 0;
        const details: unknown[] = [];
        try {
            console.log(`üì• –ò–º–ø–æ—Ä—Ç ${metadata.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            for (const book of metadata) {
                const msgId = book.messageId;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–∏–≥–∏ –≤ –ë–î –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
                // @ts-ignore
                const { data: foundBooks, error: findError } = await serverSupabase
                    .from('books')
                    .select('*')
                    .eq('title', book.title)
                    .eq('author', book.author);
                    
                if (findError) {
                    errors++;
                    details.push({ msgId, status: 'error', error: findError.message });
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (foundBooks && foundBooks.length > 0) {
                    // –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π –∫–Ω–∏–≥–∏ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    const existingBook: any = foundBooks[0];
                    let needUpdate = false;
                    const updateData: { [key: string]: unknown } = {};
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª—É—á—à–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
                    if (!existingBook.description && book.description) {
                        updateData.description = book.description;
                        needUpdate = true;
                    }
                    
                    if (book.genres && book.genres.length > 0 && 
                        (!existingBook.genres || existingBook.genres.length === 0 || 
                         (book.genres.length > existingBook.genres.length))) {
                        updateData.genres = book.genres;
                        needUpdate = true;
                    }
                    
                    if (book.tags && book.tags.length > 0 && 
                        (!existingBook.tags || existingBook.tags.length === 0 || 
                         (book.tags.length > existingBook.tags.length))) {
                        updateData.tags = book.tags;
                        needUpdate = true;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ —É –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∏, –∞ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–µ—Ç
                    if (book.coverUrls && book.coverUrls.length > 0 && (!existingBook.cover_url || existingBook.cover_url === '')) {
                        updateData.cover_url = book.coverUrls[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –æ–±–ª–æ–∂–∫—É
                        needUpdate = true;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º telegram_post_id –¥–ª—è —Å–≤—è–∑–∏ —Å –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ Telegram
                    if (msgId && (!existingBook.telegram_post_id || existingBook.telegram_post_id === '')) {
                        updateData.telegram_post_id = String(msgId);
                        needUpdate = true;
                    }
                    
                    // –ï—Å–ª–∏ —É –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –∞ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π - –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
                    if (book.file_url && !existingBook.file_url) {
                        updateData.file_url = book.file_url;
                        updateData.file_size = book.file_size;
                        updateData.file_format = book.file_format;
                        updateData.telegram_file_id = book.telegram_file_id;
                        needUpdate = true;
                    }
                    
                    // –ï—Å–ª–∏ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–∞–≤ (books.length > 0), –Ω–æ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏, —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é
                    if (book.books && book.books.length > 0 && (!existingBook.series_id || existingBook.series_id === '')) {
                        console.log(`  üìö –£ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–∞–≤, –Ω–æ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Ä–∏–∏. –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é...`);
                        
                        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é
                        const seriesData: any = {
                            title: book.title,
                            author: book.author,
                            description: book.description || existingBook.description || '',
                            genres: book.genres && book.genres.length > 0 ? book.genres : existingBook.genres || [],
                            tags: book.tags && book.tags.length > 0 ? book.tags : existingBook.tags || [],
                            rating: book.rating || existingBook.rating || null,
                            telegram_post_id: String(msgId),
                            created_at: new Date().toISOString(),
                            updated_at: new Date().toISOString()
                        };
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        if (book.coverUrls && book.coverUrls.length > 0) {
                            seriesData.cover_url = book.coverUrls[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –æ–±–ª–æ–∂–∫—É
                        } else if (existingBook.cover_url) {
                            seriesData.cover_url = existingBook.cover_url;
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if (book.books && book.books.length > 0) {
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–Ω–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç series_composition
                            const seriesComposition = book.books.map(b => ({
                                title: b.title,
                                year: b.year
                            }));
                            seriesData.series_composition = seriesComposition;
                        }
                        
                        // @ts-ignore
                        const { data: insertedSeries, error: seriesError } = await serverSupabase.from('series').insert(seriesData).select().single();
                        if (seriesError) {
                            console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏:`, seriesError);
                        } else {
                            const newSeriesId = (insertedSeries as any).id;
                            updateData.series_id = newSeriesId;
                            needUpdate = true;
                            console.log(`  ‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–Ω–∏–≥–µ: ${newSeriesId}`);
                        }
                    }
                    
                    if (needUpdate) {
                        console.log(`  üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É "${existingBook.title}" –∞–≤—Ç–æ—Ä–∞ ${existingBook.author}`);
                        // @ts-ignore
                        const { error: updateError } = await serverSupabase.from('books').update(updateData).eq('id', existingBook.id);
                        if (updateError) {
                            errors++;
                            details.push({ msgId, status: 'error', error: updateError.message });
                            continue;
                        }
                        updated++;
                        details.push({ 
                            msgId, 
                            status: 'updated', 
                            bookId: existingBook.id,
                            bookTitle: existingBook.title,
                            bookAuthor: existingBook.author
                        });
                    } else {
                        skipped++;
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–ø—É—Å–∫–∞
                        let skipReason = 'metadata complete';
                        if (existingBook.description && existingBook.description !== '' && (!book.description || book.description === '')) {
                            skipReason = 'existing book has description';
                        } else if (existingBook.genres && existingBook.genres.length > 0 && (!book.genres || book.genres.length === 0)) {
                            skipReason = 'existing book has genres';
                        } else if (existingBook.tags && existingBook.tags.length > 0 && (!book.tags || book.tags.length === 0)) {
                            skipReason = 'existing book has tags';
                        } else if (existingBook.cover_url && existingBook.cover_url !== '' && (!book.coverUrls || book.coverUrls.length === 0)) {
                            skipReason = 'existing book has cover';
                        } else if (existingBook.file_url && existingBook.file_url !== '' && (!book.file_url || book.file_url === '')) {
                            skipReason = 'existing book has file';
                        } else if (existingBook.telegram_post_id && existingBook.telegram_post_id !== '' && !msgId) {
                            skipReason = 'existing book has telegram post id';
                        } else {
                            // –ï—Å–ª–∏ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏ –Ω–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ –¥—É–±–ª–∏–∫–∞—Ç–∞
                            skipReason = 'book already exists in database';
                        }
                        
                        console.log(`  ‚Üí –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–∏–≥—É "${existingBook.title}" –∞–≤—Ç–æ—Ä–∞ ${existingBook.author} (${skipReason})`);
                        details.push({ 
                            msgId, 
                            status: 'skipped', 
                            reason: skipReason,
                            bookTitle: existingBook.title,
                            bookAuthor: existingBook.author
                        });
                    }
                    
                    // –ó–∞–ø–∏—Å—å –≤ telegram_processed_messages
                    // @ts-ignore
                    const { error: upsertError1 } = await serverSupabase.from('telegram_processed_messages').upsert({ 
                        message_id: String(msgId),
                        channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '',
                        book_id: existingBook.id,
                        processed_at: new Date().toISOString()
                    });
                    if (upsertError1) {
                        errors++;
                        details.push({ msgId, status: 'error', error: upsertError1.message });
                    }
                } else {
                    // –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ —Ö–æ—Ç—è –±—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
                    if (!book.title || !book.author) {
                        skipped++;
                        console.log(`  ‚Üí –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä)`);
                        details.push({ 
                            msgId, 
                            status: 'skipped', 
                            reason: 'missing title or author',
                            bookTitle: book.title || 'unknown',
                            bookAuthor: book.author || 'unknown'
                        });
                        continue;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–Ω–∏–≥–∏ —Å–æ—Å—Ç–∞–≤ (–∫–Ω–∏–≥–∏ –≤ —Å–µ—Ä–∏–∏)
                    let seriesId = null;
                    if (book.books && book.books.length > 0) {
                        console.log(`  üìö –£ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–∞–≤, —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é...`);
                        
                        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é
                        const seriesData: any = {
                            title: book.title,
                            author: book.author,
                            description: book.description || '',
                            genres: book.genres || [],
                            tags: book.tags || [],
                            rating: book.rating || null,
                            telegram_post_id: String(msgId),
                            created_at: new Date().toISOString(),
                            updated_at: new Date().toISOString()
                        };
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        if (book.coverUrls && book.coverUrls.length > 0) {
                            seriesData.cover_url = book.coverUrls[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –æ–±–ª–æ–∂–∫—É
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–∞–≤ —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if (book.books && book.books.length > 0) {
                            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–Ω–∏–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç series_composition
                            const seriesComposition = book.books.map(b => ({
                                title: b.title,
                                year: b.year
                            }));
                            seriesData.series_composition = seriesComposition;
                        }
                        
                        // @ts-ignore
                        const { data: insertedSeries, error: seriesError } = await serverSupabase.from('series').insert(seriesData).select().single();
                        if (seriesError) {
                            console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏:`, seriesError);
                        } else {
                            seriesId = (insertedSeries as any).id;
                            console.log(`  ‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${seriesId}`);
                        }
                    }
                    
                    console.log(`  ‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
                    const newBook = {
                        title: book.title,
                        author: book.author,
                        description: book.description || '',
                        genres: book.genres || [],
                        tags: book.tags || [],
                        rating: book.rating || null,
                        telegram_post_id: String(msgId), // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_post_id –≤–º–µ—Å—Ç–æ telegram_file_id
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString()
                    };
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if (book.coverUrls && book.coverUrls.length > 0) {
                        // @ts-ignore
                        newBook.cover_url = book.coverUrls[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –æ–±–ª–æ–∂–∫—É
                    }
                    
                    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–∏–≥—É –∫ —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
                    if (seriesId) {
                        // @ts-ignore
                        newBook.series_id = seriesId;
                    }
                    
                    // @ts-ignore
                    const { data: inserted, error: insertError } = await serverSupabase.from('books').insert(newBook).select().single();
                    if (insertError) {
                        errors++;
                        details.push({ msgId, status: 'error', error: insertError.message });
                        continue;
                    }
                    
                    added++;
                    // @ts-ignore
                    details.push({ 
                        msgId, 
                        status: 'added', 
                        bookId: (inserted as any).id,
                        bookTitle: (inserted as any).title,
                        bookAuthor: (inserted as any).author
                    });
                    
                    // –ó–∞–ø–∏—Å—å –≤ telegram_processed_messages
                    // @ts-ignore
                    const { error: upsertError2 } = await serverSupabase.from('telegram_processed_messages').upsert({ 
                        message_id: String(msgId),
                        channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '',
                        // @ts-ignore
                        book_id: (inserted as any).id,
                        processed_at: new Date().toISOString()
                    });
                    if (upsertError2) {
                        errors++;
                        details.push({ msgId, status: 'error', error: upsertError2.message });
                    }
                }
                processed++;
            }
            console.log(`üìä –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${added} –¥–æ–±–∞–≤–ª–µ–Ω–æ, ${updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ${skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ, ${errors} –æ—à–∏–±–æ–∫`);
            return { processed, added, updated, skipped, errors, details };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ importMetadataWithDeduplication:', error);
            throw error;
        }
    }
}