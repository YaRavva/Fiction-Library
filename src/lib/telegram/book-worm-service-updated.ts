import { TelegramMetadataService } from './metadata-service';
import { TelegramFileService } from './file-service';
import { serverSupabase } from '../serverSupabase';
import { TelegramService } from './client';
import { MetadataParser, BookMetadata } from './parser';
import { EnhancedFileProcessingService } from './file-processing-service-enhanced';
import { FileBookMatcherService } from '../file-book-matcher-service';

interface Book {
    id: string;
    title: string;
    author: string;
    telegram_post_id: number | null;
    file_url?: string | null;
    telegram_file_id?: string | null;
}

export class BookWormService {
    private static instance: BookWormService;
    private telegramService: TelegramService | null = null;
    private metadataService: TelegramMetadataService | null = null;
    private fileService: TelegramFileService | null = null;
    private enhancedFileService: EnhancedFileProcessingService | null = null;

    private constructor() {}

    public static async getInstance(): Promise<BookWormService> {
        if (!BookWormService.instance) {
            BookWormService.instance = new BookWormService();
            await BookWormService.instance.initialize();
        }
        return BookWormService.instance;
    }

    private async initialize() {
        this.telegramService = await TelegramService.getInstance();
        this.metadataService = await TelegramMetadataService.getInstance();
        this.fileService = await TelegramFileService.getInstance();
        this.enhancedFileService = await EnhancedFileProcessingService.getInstance();
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å BookWorm –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    public async startBookWorm(): Promise<void> {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ BookWorm —Å–µ—Ä–≤–∏—Å–∞...');
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
            const allFilesToProcess = await this.fileService!.getFilesToProcess(2000); // –ó–∞–≥—Ä—É–∂–∞–µ–º 2000 —Ñ–∞–π–ª–æ–≤
            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allFilesToProcess.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            const { data: books, error: booksError } = await serverSupabase
                .from('books')
                .select('id, title, author, telegram_post_id, file_url, telegram_file_id')
                .not('title', 'is', null)
                .not('author', 'is', null);

            if (booksError) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥: ${booksError.message}`);
            }

            if (!books || books.length === 0) {
                console.log('‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
                return;
            }

            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è`);

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            let processedCount = 0;
            let matchedCount = 0;

            for (const book of books) {
                processedCount++;
                console.log(`\nüìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (${processedCount}/${books.length})`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏
                if (book.file_url || book.telegram_file_id) {
                    console.log(`  ‚úÖ –£ –∫–Ω–∏–≥–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }

                // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏
                const matchingFile = await this.findMatchingFile(book, allFilesToProcess);
                
                if (matchingFile) {
                    console.log(`    üì® –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: ${matchingFile.filename}`);
                    console.log(`    üì® Message ID —Ñ–∞–π–ª–∞: ${matchingFile.messageId}`);
                    
                    try {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        const result = await this.enhancedFileService!.processSingleFileById(parseInt(matchingFile.messageId as string, 10));
                        console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ`);
                        matchedCount++;
                    } catch (processError) {
                        console.error(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:`, processError);
                    }
                } else {
                    console.log(`  ‚ö†Ô∏è  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
            }

            console.log(`\nüèÅ BookWorm –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${matchedCount}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ BookWorm —Å–µ—Ä–≤–∏—Å–µ:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    private async findMatchingFile(book: Book, files: any[]): Promise<any | null> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
        if (!book.title || !book.author || book.title.trim() === '' || book.author.trim() === '') {
            console.log(`    Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return null;
        }

        console.log(`    üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        const filesForMatching = files.map((file: any) => ({
            message_id: file.messageId || file.message_id || 0,
            file_name: file.filename || '',
            mime_type: file.mime_type || 'unknown',
            file_size: file.file_size || file.size || undefined
        }));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        const matches = FileBookMatcherService.findBestMatchesForBook(
            { id: book.id, title: book.title, author: book.author }, 
            filesForMatching
        );

        if (matches.length > 0) {
            // –ë–µ—Ä–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–æ–Ω–æ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)
            const bestMatch = matches[0];
            
            // –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            const sourceFile = files.find((file: any) => 
                (file.messageId && file.messageId === bestMatch.file.message_id) ||
                (file.message_id && file.message_id === bestMatch.file.message_id)
            );
            
            if (sourceFile && bestMatch.score >= 65) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä–æ–≥, —á—Ç–æ –∏ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ
                console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${bestMatch.score}: ${sourceFile.filename}`);
                console.log(`üìä –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:`);
                for (let i = 0; i < Math.min(3, matches.length); i++) {
                    const match = matches[i];
                    const matchSourceFile = files.find((file: any) => 
                        (file.messageId && file.messageId === match.file.message_id) ||
                        (file.message_id && file.message_id === match.file.message_id)
                    );
                    if (matchSourceFile) {
                        console.log(`    ${i + 1}. "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (—Å—á–µ—Ç: ${match.score})`);
                    }
                }
                
                return sourceFile;
            } else if (sourceFile) {
                console.log(`    ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –Ω–æ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (${bestMatch.score} < 65): ${sourceFile.filename}`);
            }
        }

        console.log(`    ‚ö†Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω–æ–µ`);
        return null;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
     */
    private async processMetadataBatch(messages: unknown[]): Promise<{
        processed: number;
        added: number;
        updated: number;
        errors: number;
    }> {
        // –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        console.log('Processing metadata batch...');
        return {
            processed: 0,
            added: 0,
            updated: 0,
            errors: 0
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
     */
    public async loadMetadataFromTelegram(): Promise<void> {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram...');
        try {
            if (!this.telegramService || !this.metadataService) {
                throw new Error('TelegramService –∏–ª–∏ MetadataService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const channel = await this.telegramService.getMetadataChannel();
            console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–∞–Ω–∞–ª—É: ${channel.title || channel.username}`);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const { processed, added, updated, errors } = await this.metadataService.processMetadataFromChannel(channel);

            console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:`);
            console.log(`  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${processed}`);
            console.log(`  –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ${added}`);
            console.log(`  –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ${updated}`);
            console.log(`  –û—à–∏–±–æ–∫: ${errors}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ Telegram –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö —Å –∫–Ω–∏–≥–∞–º–∏
     */
    public async loadAndMatchFiles(): Promise<void> {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
        try {
            if (!this.fileService) {
                throw new Error('FileService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ Telegram
            console.log('üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
            const files = await this.fileService.getFilesToProcess(2000); // –ó–∞–≥—Ä—É–∂–∞–µ–º 2000 —Ñ–∞–π–ª–æ–≤
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);

            // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
            const { data: booksWithoutFiles, error: booksError } = await serverSupabase
                .from('books')
                .select('id, title, author')
                .is('file_url', null)
                .not('title', 'is', null)
                .not('author', 'is', null);

            if (booksError) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${booksError.message}`);
            }

            console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${booksWithoutFiles?.length || 0} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤`);

            if (booksWithoutFiles && booksWithoutFiles.length > 0 && files.length > 0) {
                // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                for (const book of booksWithoutFiles) {
                    console.log(`\nüìñ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);

                    const matchingFile = await this.findMatchingFile(book, files);
                    if (matchingFile) {
                        console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${matchingFile.filename}`);
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∫–Ω–∏–≥–æ–π
                    } else {
                        console.log(`  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                }
            } else {
                console.log('–ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
            throw error;
        }
    }

    public async shutdown(): Promise<void> {
        console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ BookWorm —Å–µ—Ä–≤–∏—Å–∞...');
        
        if (this.telegramService) {
            await this.telegramService.disconnect();
        }
        
        console.log('‚úÖ BookWorm —Å–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}