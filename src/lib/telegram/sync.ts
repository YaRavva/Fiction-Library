import { TelegramService } from './client';
import { MetadataParser, BookMetadata } from './parser';
import { uploadFileToStorage, upsertBookRecord, getSupabaseAdmin } from '../supabase';
import { serverSupabase } from '../serverSupabase';
import { Message } from 'node-telegram-bot-api';
import path from 'path';
import { TelegramMetadataService } from './metadata-service';
import { TelegramFileService } from './file-service';

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –ø–æ –µ–≥–æ ID
 */
export async function downloadFile(fileId: string): Promise<Buffer | null> {
    try {
        const client = await TelegramService.getInstance();
        return await client.downloadFile(fileId);
    } catch (error) {
        console.error('Error downloading file:', error);
        return null;
    }
}

export class TelegramSyncService {
    private static instance: TelegramSyncService;
    private telegramClient: TelegramService | null = null;
    private metadataService: TelegramMetadataService | null = null;
    private fileService: TelegramFileService | null = null;

    private constructor() {}

    public static async getInstance(): Promise<TelegramSyncService> {
        if (!TelegramSyncService.instance) {
            TelegramSyncService.instance = new TelegramSyncService();
            TelegramSyncService.instance.telegramClient = await TelegramService.getInstance();
            TelegramSyncService.instance.metadataService = await TelegramMetadataService.getInstance();
            TelegramSyncService.instance.fileService = await TelegramFileService.getInstance();
        }
        return TelegramSyncService.instance;
    }

    public async syncMetadata(limit: number = 10): Promise<BookMetadata[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const channel = await this.telegramClient.getMetadataChannel();

            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log('üîç –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
            // @ts-ignore
            const { data: lastProcessed, error: lastProcessedError } = await serverSupabase
                .from('telegram_processed_messages')
                .select('message_id')
                .order('processed_at', { ascending: false })
                .limit(1)
                .single();

            let offsetId: number | undefined = undefined;
            if (!lastProcessedError && lastProcessed && (lastProcessed as { message_id?: string }).message_id) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–≥–æ
                offsetId = parseInt((lastProcessed as { message_id: string }).message_id, 10);
                console.log(`  üìå –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏—è ID: ${offsetId}`);
            } else {
                console.log('  üÜï –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º offsetId
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);
            const messages = await this.telegramClient.getMessages(channelId, limit, offsetId) as unknown as Message[];
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);

            // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const metadataList: BookMetadata[] = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const msg of messages) {
                const anyMsg = msg as unknown as { [key: string]: unknown };
                console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                if (!(msg as { text?: string }).text) {
                    console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }

                // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const metadata = MetadataParser.parseMessage((msg as { text: string }).text);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–∏–≥–∏ –≤ –ë–î –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞
                let bookExists = false;
                try {
                    // @ts-ignore
                    const { data: foundBooks, error: findError } = await serverSupabase
                        .from('books')
                        .select('*')
                        .eq('title', metadata.title)
                        .eq('author', metadata.author);

                    if (!findError && foundBooks && foundBooks.length > 0) {
                        bookExists = true;
                        console.log(`  ‚ÑπÔ∏è –ö–Ω–∏–≥–∞ "${metadata.title}" –∞–≤—Ç–æ—Ä–∞ ${metadata.author} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–ª–æ–∂–µ–∫`);
                    }
                } catch (checkError) {
                    console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏:`, checkError);
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –æ–±–ª–æ–∂–µ–∫ –∏–∑ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                const coverUrls: string[] = [];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!bookExists && anyMsg.media) {
                    console.log(`üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ${anyMsg.id} (—Ç–∏–ø: ${(anyMsg.media as { className: string }).className})`);

                    // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–ø—Ä–µ–≤—å—é (MessageMediaWebPage) - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π –¥–ª—è –æ–±–ª–æ–∂–µ–∫
                    if ((anyMsg.media as { className: string }).className === 'MessageMediaWebPage' && (anyMsg.media as { webpage?: { photo?: unknown } }).webpage?.photo) {
                        console.log(`  ‚Üí –í–µ–±-–ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é...`);
                            const result = await Promise.race([
                                this.telegramClient.downloadMedia((anyMsg.media as { webpage: { photo: unknown } }).webpage.photo),
                                new Promise<never>((_, reject) => 
                                    setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000))
                            ]);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é:`, err);
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (MessageMediaPhoto)
                    else if ((anyMsg.media as { photo?: unknown }).photo) {
                        console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ...`);
                            const result = await Promise.race([
                                this.telegramClient.downloadMedia(msg),
                                new Promise<never>((_, reject) => 
                                    setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000)
                                )
                            ]);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err);
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    else if ((anyMsg.media as { document?: unknown }).document) {
                        const mimeType = (anyMsg.media as { document: { mimeType?: string } }).document.mimeType;
                        if (mimeType && mimeType.startsWith('image/')) {
                            console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç: ${mimeType})`);
                            try {
                                console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...`);
                                const result = await Promise.race([
                                    this.telegramClient.downloadMedia(msg),
                                    new Promise<never>((_, reject) => 
                                        setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000))
                                ]);

                                const photoBuffer = result instanceof Buffer ? result : null;
                                if (photoBuffer) {
                                    const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                    console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                    await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                    const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                    coverUrls.push(photoUrl);
                                    console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                                } else {
                                    console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                                }
                            } catch (err) {
                                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err);
                            }
                        }
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
                metadataList.push({
                    ...metadata,
                    coverUrls: coverUrls.length > 0 ? coverUrls : metadata.coverUrls || []
                });
            }

            return metadataList;
        } catch (error) {
            console.error('Error in syncMetadata:', error);
            throw error;
        }
    }

    public async downloadBook(messageId: number): Promise<Buffer> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
            const channel = await this.telegramClient.getFilesChannel();
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.log(`Getting message ${messageId} from channel...`);
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);
            const messages = await this.telegramClient.getMessages(channelId, 5) as unknown as Message[]; // Get more messages to increase chances
            console.log(`Found ${messages.length} messages`);
            
            // Find the message with the specified ID or use the first available message
            let message = messages[0]; // Default to first message
            if (messageId > 1) {
                for (const msg of messages) {
                    if ((msg as { id?: unknown }).id === messageId) {
                        message = msg;
                        break;
                    }
                }
            }
            
            if (!message) {
                throw new Error(`Message ${messageId} not found`);
            }

            console.log(`Downloading file from message ${messageId}...`);

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const buffer = await Promise.race([
                this.telegramClient.downloadMedia(message),
                new Promise<never>((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout: Media download took too long')), 45000)
                )
            ]);

            if (!buffer) {
                throw new Error('Failed to download file');
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞, mime –∏ –∞–≤—Ç–æ—Ä–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä message
            const anyMsg = message as unknown as { [key: string]: unknown };
            const filenameCandidate = (anyMsg.fileName as string)
                || (anyMsg.document && (anyMsg.document as { fileName?: string }).fileName)
                || (anyMsg.media && (anyMsg.media as { document?: { fileName?: string } }).document && (anyMsg.media as { document: { fileName?: string } }).document.fileName)
                || `book_${anyMsg.id}.fb2`;

            const ext = path.extname(filenameCandidate as string) || '.fb2';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º messageId –¥–ª—è –∫–ª—é—á–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏)
            // –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            const storageKey = `${anyMsg.id}${ext}`; // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Storage
            const displayName = filenameCandidate; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            const mime = (anyMsg.mimeType as string)
                || (anyMsg.document && (anyMsg.document as { mimeType?: string }).mimeType)
                || (anyMsg.media && (anyMsg.media as { document?: { mimeType?: string } }).document && (anyMsg.media as { document: { mimeType?: string } }).document.mimeType)
                || 'application/octet-stream';

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage (bucket 'books')
            console.log(`Uploading file to Supabase Storage...`);
            await uploadFileToStorage('books', storageKey as string, Buffer.from(buffer), mime as string);

            // –í—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)
            const bookRecord: { [key: string]: unknown } = {
                title: (filenameCandidate as string) || `book-${anyMsg.id}`,
                author: (anyMsg.author as string) || (anyMsg.from && (anyMsg.from as { username?: string }).username) || 'Unknown',
                file_url: `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/books/${encodeURIComponent(storageKey as string)}`,
                file_size: buffer.length,
                file_format: (ext as string).replace('.', ''),
                telegram_file_id: String(anyMsg.id),
            };

            try {
                await upsertBookRecord(bookRecord);
            } catch (err) {
                console.warn('Failed to upsert book record:', err);
            }

            return Buffer.from(buffer);
        } catch (error) {
            console.error('Error downloading book:', error);
            throw error;
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏" –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param addToQueue –§–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π, –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
     */
    public async downloadFilesFromArchiveChannel(limit: number = 10, addToQueue: boolean = true): Promise<{[key: string]: unknown}[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
            console.log('üìö –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"...');
            const channel = await this.telegramClient.getFilesChannel();
            
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log(`üìñ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${limit} —Å–æ–æ–±—â–µ–Ω–∏–π...`);
            const messages = await this.telegramClient.getMessages(channelId, limit) as unknown as Message[];
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);

            const results: {[key: string]: unknown}[] = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const msg of messages) {
                const anyMsg = msg as unknown as {[key: string]: unknown};
                console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–¥–∏–∞ (—Ñ–∞–π–ª)
                if (!(anyMsg.media as unknown)) {
                    console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                
                try {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    let filename = `book_${anyMsg.id}.fb2`;
                    if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).attributes) {
                        // –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
                        const attributes = (anyMsg.document as {[key: string]: unknown}).attributes as unknown[];
                        const attrFileName = attributes.find((attr: unknown) => {
                            const attrObj = attr as {[key: string]: unknown};
                            return attrObj.className === 'DocumentAttributeFilename';
                        }) as {[key: string]: unknown} | undefined;
                        if (attrFileName && attrFileName.fileName) {
                          filename = attrFileName.fileName as string;
                        }
                    }
                    
                    console.log(`  üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${filename}`);
                    
                    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
                    if (addToQueue) {
                        // –§–æ—Ä–º–∏—Ä—É–µ–º file_id –∫–∞–∫ messageId (–∫–∞–Ω–∞–ª –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ downloadFile)
                        const fileId = String(anyMsg.id);
                        
                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –≤ –ë–î (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)
                        const fileRecord = {
                          telegram_message_id: String(anyMsg.id),
                          channel: '–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏',
                          raw_text: (anyMsg.message as string) || '',
                          processed_at: new Date().toISOString()
                        };
                        
                        try {
                          // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          const supabase: any = serverSupabase;
                          await supabase.from('telegram_messages').upsert(fileRecord);
                        } catch (dbError) {
                          console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏:`, dbError);
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
                        const downloadTask = {
                          message_id: String(anyMsg.id),
                          channel_id: String((anyMsg.peerId as string) || channel.id),
                          file_id: fileId,
                          status: 'pending',
                          priority: 0,
                          scheduled_for: new Date().toISOString()
                        };
                        
                        try {
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          const supabase: any = serverSupabase;
                          await supabase.from('telegram_download_queue').upsert(downloadTask);
                          console.log(`  ‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏: ${fileId}`);
                        } catch (queueError) {
                          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å:`, queueError);
                        }
                    }
                    
                    results.push({
                      messageId: anyMsg.id,
                      filename,
                      hasMedia: !!(anyMsg.media as unknown),
                      addedToQueue: addToQueue
                    });
                    
                } catch (msgError) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, msgError);
                }
            }
            
            console.log(`\nüìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.length}`);
            return results;
        } catch (error) {
            console.error('Error downloading files from archive channel:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –∏—Ö –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
     */
    public async getFilesToProcess(limit: number = 10): Promise<{[key: string]: unknown}[]> {
        if (!this.fileService) {
            throw new Error('File service not initialized');
        }
        return await this.fileService.getFilesToProcess(limit);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
     */
    public async processSingleFileById(messageId: number): Promise<{[key: string]: unknown}> {
        if (!this.fileService) {
            throw new Error('File service not initialized');
        }
        return await this.fileService.processSingleFileById(messageId);
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏" –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –æ—á–µ—Ä–µ–¥–∏)
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    public async downloadAndProcessFilesDirectly(limit: number = 10): Promise<{[key: string]: unknown}[]> {
        if (!this.fileService) {
            throw new Error('File service not initialized');
        }
        return await this.fileService.downloadAndProcessFilesDirectly(limit);
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –µ–≥–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å —Ñ–∞–π–ª–æ–º
     * @param bookId ID –∫–Ω–∏–≥–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    public async processFile(message: {[key: string]: unknown}, bookId?: string): Promise<{[key: string]: unknown}> {
        if (!this.fileService) {
            throw new Error('File service not initialized');
        }
        // This is a simplified version, in a real implementation you might want to delegate to fileService
        return {};
    }

    public async shutdown(): Promise<void> {
        if (this.telegramClient && typeof (this.telegramClient as unknown as {[key: string]: unknown}).disconnect === 'function') {
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                await Promise.race([
                    ((this.telegramClient as unknown as {[key: string]: unknown}).disconnect as () => Promise<void>)(),
                    new Promise(resolve => setTimeout(resolve, 3000)) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
                ]);
            } catch (err) {
                console.warn('Error during shutdown:', err);
            }
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–∏–≥–∏ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ —Å —É—á–µ—Ç–æ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
     */
    public async syncBooks(limit: number = 10): Promise<{ processed: number; added: number; updated: number; skipped: number; errors: number; details: unknown[] }> {
        if (!this.metadataService) {
            throw new Error('Metadata service not initialized');
        }
        return await this.metadataService.syncBooks(limit);
    }
}