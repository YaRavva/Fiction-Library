import { TelegramService } from './client';
import { MetadataParser, BookMetadata } from './parser';
import { uploadFileToStorage, upsertBookRecord } from '../supabase';
import path from 'path';

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –ø–æ –µ–≥–æ ID
 */
export async function downloadFile(fileId: string): Promise<Buffer | null> {
    try {
        const client = await TelegramService.getInstance();
        return await client.downloadFile(fileId);
    } catch (error) {
        console.error('Error downloading file:', error);
        return null;
    }
}

export class TelegramSyncService {
    private static instance: TelegramSyncService;
    private telegramClient: TelegramService | null = null;

    private constructor() {}

    public static async getInstance(): Promise<TelegramSyncService> {
        if (!TelegramSyncService.instance) {
            TelegramSyncService.instance = new TelegramSyncService();
            TelegramSyncService.instance.telegramClient = await TelegramService.getInstance();
        }
        return TelegramSyncService.instance;
    }

    public async syncMetadata(limit: number = 10): Promise<BookMetadata[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const channel = await this.telegramClient.getMetadataChannel();

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            const messages = await this.telegramClient.getMessages(channel, limit);

            // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const metadataList: BookMetadata[] = [];
            const processedGroupIds = new Set<string>();
            const groupedMessagesMap = new Map<string, any[]>();

            // First pass: collect all grouped messages
            for (const msg of messages) {
                const anyMsg: any = msg as any;
                if (anyMsg.groupedId) {
                    const groupId = String(anyMsg.groupedId);
                    if (!groupedMessagesMap.has(groupId)) {
                        groupedMessagesMap.set(groupId, []);
                    }
                    groupedMessagesMap.get(groupId)!.push(msg);
                }
            }

            // Second pass: process messages
            for (const msg of messages) {
                const anyMsg: any = msg as any;

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã)
                if (!msg.text) {
                    // –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –∞–ª—å–±–æ–º–∞, –ø—Ä–æ–≤–µ—Ä–∏–º, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞
                    if (anyMsg.groupedId) {
                        const groupId = String(anyMsg.groupedId);
                        if (!processedGroupIds.has(groupId)) {
                            // –ì—Ä—É–ø–ø–∞ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–æ —É —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
                            // –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ–∑–∂–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                            console.log(`  ‚Üí –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —á–∞—Å—Ç—å –≥—Ä—É–ø–ø—ã ${groupId}, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∂–µ`);
                        }
                    }
                    continue;
                }

                // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const metadata = MetadataParser.parseMessage(msg.text);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –æ–±–ª–æ–∂–µ–∫ –∏–∑ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                const coverUrls: string[] = [];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if (anyMsg.media) {
                    console.log(`üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ${anyMsg.id} (—Ç–∏–ø: ${anyMsg.media.className})`);

                    // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–ø—Ä–µ–≤—å—é (MessageMediaWebPage) - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π –¥–ª—è –æ–±–ª–æ–∂–µ–∫
                    if (anyMsg.media.className === 'MessageMediaWebPage' && anyMsg.media.webpage?.photo) {
                        console.log(`  ‚Üí –í–µ–±-–ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é...`);
                            const result = await this.telegramClient.downloadMedia(anyMsg.media.webpage.photo);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é:`, err);
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞ (–∞–ª—å–±–æ–º) - —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –≥—Ä—É–ø–ø—ã
                    else if (anyMsg.groupedId) {
                        const groupId = String(anyMsg.groupedId);

                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                        if (!processedGroupIds.has(groupId)) {
                            processedGroupIds.add(groupId);
                            console.log(`  ‚Üí –ì—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞ (–∞–ª—å–±–æ–º), groupedId: ${groupId}`);

                            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                            const groupMessages = groupedMessagesMap.get(groupId) || [];
                            console.log(`  ‚Üí –ù–∞–π–¥–µ–Ω–æ ${groupMessages.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∞–ª—å–±–æ–º–µ`);

                            // –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
                            let coverCount = 0;
                            for (const groupMsg of groupMessages) {
                                const groupAnyMsg: any = groupMsg;
                                try {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞
                                    let photoBuffer: Buffer | null = null;
                                    
                                    // MessageMediaPhoto
                                    if (groupAnyMsg.media?.photo) {
                                        console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ ${groupAnyMsg.id} –∏–∑ –∞–ª—å–±–æ–º–∞ (MessageMediaPhoto)...`);
                                        const result = await this.telegramClient.downloadMedia(groupMsg);
                                        photoBuffer = result instanceof Buffer ? result : null;
                                    }
                                    // MessageMediaDocument —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                                    else if (groupAnyMsg.media?.document) {
                                        const mimeType = groupAnyMsg.media.document.mimeType;
                                        if (mimeType && mimeType.startsWith('image/')) {
                                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${groupAnyMsg.id} –∏–∑ –∞–ª—å–±–æ–º–∞ (MessageMediaDocument: ${mimeType})...`);
                                            const result = await this.telegramClient.downloadMedia(groupMsg);
                                            photoBuffer = result instanceof Buffer ? result : null;
                                        } else {
                                            console.log(`  ‚Üí –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç ${groupAnyMsg.id} (—Ç–∏–ø: ${mimeType})`);
                                        }
                                    } else {
                                        console.log(`  ‚Üí –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${groupAnyMsg.id} (–Ω–µ—Ç –º–µ–¥–∏–∞ –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø)`);
                                        console.log(`    –ú–µ–¥–∏–∞:`, JSON.stringify(groupAnyMsg.media || 'none', null, 2));
                                    }

                                    if (photoBuffer) {
                                        const photoKey = `${groupAnyMsg.id}_${Date.now()}.jpg`;
                                        console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                        await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                        const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                        coverUrls.push(photoUrl);
                                        coverCount++;
                                        console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                                    } else {
                                        console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–µ–¥–∏–∞ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä) –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${groupAnyMsg.id}`);
                                    }
                                } catch (err) {
                                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –∏–∑ –∞–ª—å–±–æ–º–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ ${groupAnyMsg?.id}):`, err);
                                }
                            }
                            console.log(`  ‚Üí –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±–ª–æ–∂–µ–∫ –∏–∑ –∞–ª—å–±–æ–º–∞: ${coverCount}`);
                        } else {
                            console.log(`  ‚Üí –ì—Ä—É–ø–ø–∞ ${groupId} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (MessageMediaPhoto)
                    else if (anyMsg.media.photo) {
                        console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ...`);
                            const result = await this.telegramClient.downloadMedia(msg);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err);
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    else if (anyMsg.media.document) {
                        const mimeType = anyMsg.media.document.mimeType;
                        if (mimeType && mimeType.startsWith('image/')) {
                            console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç: ${mimeType})`);
                            try {
                                console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...`);
                                const result = await this.telegramClient.downloadMedia(msg);
                                const photoBuffer = result instanceof Buffer ? result : null;
                                if (photoBuffer) {
                                    const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                    console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                    await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                    const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                    coverUrls.push(photoUrl);
                                    console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                                } else {
                                    console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                                }
                            } catch (err) {
                                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, err);
                            }
                        } else {
                            console.log(`  ‚Üí –ú–µ–¥–∏–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ (–¥–æ–∫—É–º–µ–Ω—Ç: ${mimeType})`);
                        }
                    } else {
                        console.log(`  ‚Üí –ú–µ–¥–∏–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ`);
                    }
                } else {
                    console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞`);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º URL –æ–±–ª–æ–∂–µ–∫ –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
                metadata.coverUrls = coverUrls.length > 0 ? coverUrls : undefined;
                
                // Debug logging
                console.log(`  ‚Üí –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–æ–∂–µ–∫ –¥–ª—è "${metadata.title}": ${coverUrls.length}`);
                if (coverUrls.length > 0) {
                    console.log(`  ‚Üí –û–±–ª–æ–∂–∫–∏:`, coverUrls);
                }

                metadataList.push(metadata);
            }

            console.log(`\nüìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${metadataList.length}`);
            for (let i = 0; i < metadataList.length; i++) {
                const meta = metadataList[i];
                console.log(`  ${i + 1}. "${meta.title}" - ${meta.coverUrls?.length || 0} –æ–±–ª–æ–∂–µ–∫`);
            }

            return metadataList;
        } catch (error) {
            console.error('Error syncing metadata:', error);
            throw error;
        }
    }

    public async downloadBook(messageId: number): Promise<Buffer> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
            const channel = await this.telegramClient.getFilesChannel();
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messages = await this.telegramClient.getMessages(channel, 1);
            const message = messages[0];

            if (!message) {
                throw new Error('Message not found');
            }

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const buffer = await this.telegramClient.downloadMedia(message);

            if (!buffer) {
                throw new Error('Failed to download file');
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞, mime –∏ –∞–≤—Ç–æ—Ä–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä message
            const anyMsg: any = message as any;
            const filenameCandidate = anyMsg.fileName
                || (anyMsg.document && anyMsg.document.fileName)
                || (anyMsg.media && anyMsg.media.document && anyMsg.media.document.fileName)
                || `book_${anyMsg.id}.fb2`;

            const ext = path.extname(filenameCandidate) || '.fb2';
            const key = `books/${anyMsg.id}${ext}`;

            const mime = anyMsg.mimeType
                || (anyMsg.document && anyMsg.document.mimeType)
                || (anyMsg.media && anyMsg.media.document && anyMsg.media.document.mimeType)
                || 'application/octet-stream';

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage (bucket 'books')
            await uploadFileToStorage('books', key, Buffer.from(buffer), mime);

            // –í—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)
            const bookRecord: any = {
                title: filenameCandidate || `book-${anyMsg.id}`,
                author: anyMsg.author || (anyMsg.from && anyMsg.from.username) || 'Unknown',
                file_url: `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/books/${encodeURIComponent(key)}`,
                file_size: buffer.length,
                file_format: ext.replace('.', ''),
                telegram_file_id: String(anyMsg.id),
            };

            try {
                await upsertBookRecord(bookRecord);
            } catch (err) {
                console.warn('Failed to upsert book record:', err);
            }

            return Buffer.from(buffer);
        } catch (error) {
            console.error('Error downloading book:', error);
            throw error;
        }
    }

    public async shutdown(): Promise<void> {
        if (this.telegramClient && typeof (this.telegramClient as any).disconnect === 'function') {
            try {
                await (this.telegramClient as any).disconnect();
            } catch (err) {
                console.warn('Error during shutdown:', err);
            }
        }
    }
}