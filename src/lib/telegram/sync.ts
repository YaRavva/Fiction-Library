import { TelegramService } from './client';
import { MetadataParser, BookMetadata } from './parser';
import { uploadFileToStorage, upsertBookRecord, getSupabaseAdmin } from '../supabase';
import { serverSupabase } from '../serverSupabase';
import { Message } from 'node-telegram-bot-api';
import path from 'path';

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –ø–æ –µ–≥–æ ID
 */
export async function downloadFile(fileId: string): Promise<Buffer | null> {
    try {
        const client = await TelegramService.getInstance();
        return await client.downloadFile(fileId);
    } catch (error) {
        console.error('Error downloading file:', error);
        return null;
    }
}

export class TelegramSyncService {
    private static instance: TelegramSyncService;
    private telegramClient: TelegramService | null = null;

    private constructor() {}

    public static async getInstance(): Promise<TelegramSyncService> {
        if (!TelegramSyncService.instance) {
            TelegramSyncService.instance = new TelegramSyncService();
            TelegramSyncService.instance.telegramClient = await TelegramService.getInstance();
        }
        return TelegramSyncService.instance;
    }

    public async syncMetadata(limit: number = 10): Promise<BookMetadata[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const channel = await this.telegramClient.getMetadataChannel();

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                channel.id;
            const messages = await this.telegramClient.getMessages(channelId, limit) as unknown as Message[];
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);

            // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const metadataList: BookMetadata[] = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const msg of messages) {
                const anyMsg = msg as unknown as { [key: string]: unknown };
                console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                if (!(msg as { text?: string }).text) {
                    console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }

                // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const metadata = MetadataParser.parseMessage((msg as { text: string }).text);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –æ–±–ª–æ–∂–µ–∫ –∏–∑ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                const coverUrls: string[] = [];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if (anyMsg.media) {
                    console.log(`üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ${anyMsg.id} (—Ç–∏–ø: ${(anyMsg.media as { className: string }).className})`);

                    // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–ø—Ä–µ–≤—å—é (MessageMediaWebPage) - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π –¥–ª—è –æ–±–ª–æ–∂–µ–∫
                    if ((anyMsg.media as { className: string }).className === 'MessageMediaWebPage' && (anyMsg.media as { webpage?: { photo?: unknown } }).webpage?.photo) {
                        console.log(`  ‚Üí –í–µ–±-–ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é...`);
                            const result = await Promise.race([
                                this.telegramClient.downloadMedia((anyMsg.media as { webpage: { photo: unknown } }).webpage.photo),
                                new Promise<never>((_, reject) => 
                                    setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000))
                            ]);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é:`, err);
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (MessageMediaPhoto)
                    else if ((anyMsg.media as { photo?: unknown }).photo) {
                        console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ...`);
                            const result = await Promise.race([
                                this.telegramClient.downloadMedia(msg),
                                new Promise<never>((_, reject) => 
                                    setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000)
                                )
                            ]);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err);
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    else if ((anyMsg.media as { document?: unknown }).document) {
                        const mimeType = (anyMsg.media as { document: { mimeType?: string } }).document.mimeType;
                        if (mimeType && mimeType.startsWith('image/')) {
                            console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç: ${mimeType})`);
                            try {
                                console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...`);
                                const result = await Promise.race([
                                    this.telegramClient.downloadMedia(msg),
                                    new Promise<never>((_, reject) => 
                                        setTimeout(() => reject(new Error('Timeout: Downloading media took too long')), 30000))
                                ]);

                                const photoBuffer = result instanceof Buffer ? result : null;
                                if (photoBuffer) {
                                    const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                    console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                    await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                    const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                    coverUrls.push(photoUrl);
                                    console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                                } else {
                                    console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                                }
                            } catch (err) {
                                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err);
                            }
                        }
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
                metadataList.push({
                    ...metadata,
                    coverUrls: coverUrls.length > 0 ? coverUrls : metadata.coverUrls || []
                });
            }

            return metadataList;
        } catch (error) {
            console.error('Error in syncMetadata:', error);
            throw error;
        }
    }

    public async downloadBook(messageId: number): Promise<Buffer> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
            const channel = await this.telegramClient.getFilesChannel();
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.log(`Getting message ${messageId} from channel...`);
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                channel.id;
            const messages = await this.telegramClient.getMessages(channelId, 5) as unknown as Message[]; // Get more messages to increase chances
            console.log(`Found ${messages.length} messages`);
            
            // Find the message with the specified ID or use the first available message
            let message = messages[0]; // Default to first message
            if (messageId > 1) {
                for (const msg of messages) {
                    if ((msg as { id?: unknown }).id === messageId) {
                        message = msg;
                        break;
                    }
                }
            }
            
            if (!message) {
                throw new Error(`Message ${messageId} not found`);
            }

            console.log(`Downloading file from message ${messageId}...`);

            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const buffer = await Promise.race([
                this.telegramClient.downloadMedia(message),
                new Promise<never>((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout: Media download took too long')), 45000)
                )
            ]);

            if (!buffer) {
                throw new Error('Failed to download file');
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞, mime –∏ –∞–≤—Ç–æ—Ä–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä message
            const anyMsg = message as unknown as { [key: string]: unknown };
            const filenameCandidate = (anyMsg.fileName as string)
                || (anyMsg.document && (anyMsg.document as { fileName?: string }).fileName)
                || (anyMsg.media && (anyMsg.media as { document?: { fileName?: string } }).document && (anyMsg.media as { document: { fileName?: string } }).document.fileName)
                || `book_${anyMsg.id}.fb2`;

            const ext = path.extname(filenameCandidate as string) || '.fb2';
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º messageId –¥–ª—è –∫–ª—é—á–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏)
            // –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            const storageKey = `${anyMsg.id}${ext}`; // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Storage
            const displayName = filenameCandidate; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            const mime = (anyMsg.mimeType as string)
                || (anyMsg.document && (anyMsg.document as { mimeType?: string }).mimeType)
                || (anyMsg.media && (anyMsg.media as { document?: { mimeType?: string } }).document && (anyMsg.media as { document: { mimeType?: string } }).document.mimeType)
                || 'application/octet-stream';

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage (bucket 'books')
            console.log(`Uploading file to Supabase Storage...`);
            await uploadFileToStorage('books', storageKey as string, Buffer.from(buffer), mime as string);

            // –í—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è)
            const bookRecord: { [key: string]: unknown } = {
                title: (filenameCandidate as string) || `book-${anyMsg.id}`,
                author: (anyMsg.author as string) || (anyMsg.from && (anyMsg.from as { username?: string }).username) || 'Unknown',
                file_url: `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/books/${encodeURIComponent(storageKey as string)}`,
                file_size: buffer.length,
                file_format: (ext as string).replace('.', ''),
                telegram_file_id: String(anyMsg.id),
            };

            try {
                await upsertBookRecord(bookRecord);
            } catch (err) {
                console.warn('Failed to upsert book record:', err);
            }

            return Buffer.from(buffer);
        } catch (error) {
            console.error('Error downloading book:', error);
            throw error;
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
     * @param filename –ò–º—è —Ñ–∞–π–ª–∞
     * @returns –û–±—ä–µ–∫—Ç —Å –∞–≤—Ç–æ—Ä–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
     */
    public static extractMetadataFromFilename(filename: string): { author: string; title: string } {
        // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ—Ä - –ù–∞–∑–≤–∞–Ω–∏–µ"
        const dashPattern = /^([^-‚Äì‚Äî]+)[\-‚Äì‚Äî](.+)$/;
        const dashMatch = nameWithoutExt.match(dashPattern);
        if (dashMatch) {
            let author = dashMatch[1].trim();
            let title = dashMatch[2].trim();
            
            // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–º–∏—Ü–µ–ª–∏–π"
            if (title.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
                title = `—Ü–∏–∫–ª ${title}`;
            }
            
            // –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "—Ü–∏–∫–ª", –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            if (author.toLowerCase().includes('—Ü–∏–∫–ª ')) {
                title = `${author} ${title}`;
                author = author.replace(/—Ü–∏–∫–ª\s+/i, '').trim();
            } else if (title.toLowerCase().includes('—Ü–∏–∫–ª ')) {
                title = `—Ü–∏–∫–ª ${title.replace(/—Ü–∏–∫–ª\s+/i, '').trim()}`;
            }
            
            // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–û–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π —Ü–∏–∫–ª"
            if (title.toLowerCase().includes('–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π')) {
                title = `—Ü–∏–∫–ª ${title}`;
            }
            
            return { author, title };
        }
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
        // –ü–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ—Ä1_–∏_–ê–≤—Ç–æ—Ä2_–ù–∞–∑–≤–∞–Ω–∏–µ" –∏–ª–∏ "–ê–≤—Ç–æ—Ä1,_–ê–≤—Ç–æ—Ä2_–ù–∞–∑–≤–∞–Ω–∏–µ"
        if (nameWithoutExt.includes('_–∏_')) {
            const parts = nameWithoutExt.split('_–∏_');
            if (parts.length === 2) {
                const authorsPart = parts[0].replace(/_/g, ' ').trim();
                const titlePart = parts[1].replace(/_/g, ' ').trim();
                
                let title = titlePart;
                if (title.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
                    title = `—Ü–∏–∫–ª ${title}`;
                }
                
                return { author: authorsPart, title };
            }
        }
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω: "–ê–≤—Ç–æ—Ä1,_–ê–≤—Ç–æ—Ä2_–ù–∞–∑–≤–∞–Ω–∏–µ"
        if (nameWithoutExt.includes(',_')) {
            const parts = nameWithoutExt.split(',_');
            if (parts.length === 2) {
                const authorsPart = parts[0].replace(/_/g, ' ').trim();
                const titlePart = parts[1].replace(/_/g, ' ').trim();
                
                let title = titlePart;
                if (title.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
                    title = `—Ü–∏–∫–ª ${title}`;
                }
                
                return { author: authorsPart, title };
            }
        }
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω: "–•—Ä–æ–Ω–∏–∫–∏" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        if (nameWithoutExt.includes('–•—Ä–æ–Ω–∏–∫–∏')) {
            const words = nameWithoutExt.split('_');
            const chroniclesIndex = words.findIndex(word => word.includes('–•—Ä–æ–Ω–∏–∫–∏'));
            
            if (chroniclesIndex > 0) {
                // –ê–≤—Ç–æ—Ä—ã - —ç—Ç–æ —Å–ª–æ–≤–∞ –¥–æ "–•—Ä–æ–Ω–∏–∫–∏"
                const authors = words.slice(0, chroniclesIndex).join(' ').replace(/_/g, ' ').trim();
                const title = words.slice(chroniclesIndex).join(' ').replace(/_/g, ' ').trim();
                
                return { author: authors, title };
            }
        }
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const words = nameWithoutExt
            .split(/[_\-\s]+/) // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º –∏ –¥–µ—Ñ–∏—Å–∞–º
            .filter(word => word.length > 0) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞
            .map(word => word.trim()); // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        
        // –ï—Å–ª–∏ –º–∞–ª–æ —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (words.length < 2) {
            return { 
                author: 'Unknown', 
                title: nameWithoutExt 
            };
        }
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏—è (—Ü–∏–∫–ª, saga, series –∏ —Ç.–¥.)
        const titleIndicators = ['—Ü–∏–∫–ª', ' saga', ' series', '–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π'];
        let titleStartIndex = words.length; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        for (let i = 0; i < words.length; i++) {
            const word = words[i].toLowerCase();
            if (titleIndicators.some(indicator => word.includes(indicator))) {
                titleStartIndex = i;
                break;
            }
        }
        
        // –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ—Ä—ã - —ç—Ç–æ —Å–ª–æ–≤–∞ –¥–æ –Ω–µ–≥–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ - –æ—Ç –Ω–µ–≥–æ –∏ –¥–∞–ª–µ–µ
        if (titleStartIndex < words.length) {
            const authors = words.slice(0, titleStartIndex).join(' ');
            let title = words.slice(titleStartIndex).join(' ');
            
            // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–º–∏—Ü–µ–ª–∏–π"
            if (title.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
                title = `—Ü–∏–∫–ª ${title}`;
            }
            
            // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è "–û–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π —Ü–∏–∫–ª"
            if (title.toLowerCase().includes('–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π')) {
                title = `—Ü–∏–∫–ª ${title}`;
            }
            
            return { 
                author: authors, 
                title: title 
            };
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        let title = nameWithoutExt;
        
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–æ "–º–∏—Ü–µ–ª–∏–π"
        if (nameWithoutExt.toLowerCase().includes('–º–∏—Ü–µ–ª–∏–π')) {
            title = `—Ü–∏–∫–ª ${nameWithoutExt}`;
        } else if (nameWithoutExt.includes('—Ü–∏–∫–ª')) {
            title = `—Ü–∏–∫–ª ${nameWithoutExt.replace(/—Ü–∏–∫–ª\s*/i, '')}`;
        } else if (nameWithoutExt.toLowerCase().includes('–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫–∏–π')) {
            title = `—Ü–∏–∫–ª ${nameWithoutExt}`;
        }
        
        return { 
            author: 'Unknown', 
            title: title
        };
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏" –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param addToQueue –§–ª–∞–≥, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π, –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
     */
    public async downloadFilesFromArchiveChannel(limit: number = 10, addToQueue: boolean = true): Promise<{[key: string]: unknown}[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
            console.log('üìö –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"...');
            const channel = await this.telegramClient.getFilesChannel();
            
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                channel.id;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log(`üìñ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${limit} —Å–æ–æ–±—â–µ–Ω–∏–π...`);
            const messages = await this.telegramClient.getMessages(channelId, limit) as unknown as Message[];
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);

            const results: {[key: string]: unknown}[] = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const msg of messages) {
                const anyMsg = msg as unknown as {[key: string]: unknown};
                console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–¥–∏–∞ (—Ñ–∞–π–ª)
                if (!(anyMsg.media as unknown)) {
                    console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                
                try {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    let filename = `book_${anyMsg.id}.fb2`;
                    if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).attributes) {
                        // –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
                        const attributes = (anyMsg.document as {[key: string]: unknown}).attributes as unknown[];
                        const attrFileName = attributes.find((attr: unknown) => {
                            const attrObj = attr as {[key: string]: unknown};
                            return attrObj.className === 'DocumentAttributeFilename';
                        }) as {[key: string]: unknown} | undefined;
                        if (attrFileName && attrFileName.fileName) {
                          filename = attrFileName.fileName as string;
                        }
                    }
                    
                    console.log(`  üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${filename}`);
                    
                    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
                    if (addToQueue) {
                        // –§–æ—Ä–º–∏—Ä—É–µ–º file_id –∫–∞–∫ messageId (–∫–∞–Ω–∞–ª –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ downloadFile)
                        const fileId = String(anyMsg.id);
                        
                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–∞–π–ª–µ –≤ –ë–î (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)
                        const fileRecord = {
                          telegram_message_id: String(anyMsg.id),
                          channel: '–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏',
                          raw_text: (anyMsg.message as string) || '',
                          processed_at: new Date().toISOString()
                        };
                        
                        try {
                          // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          const supabase: any = serverSupabase;
                          await supabase.from('telegram_messages').upsert(fileRecord);
                        } catch (dbError) {
                          console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏:`, dbError);
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
                        const downloadTask = {
                          message_id: String(anyMsg.id),
                          channel_id: String((anyMsg.peerId as string) || channel.id),
                          file_id: fileId,
                          status: 'pending',
                          priority: 0,
                          scheduled_for: new Date().toISOString()
                        };
                        
                        try {
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          const supabase: any = serverSupabase;
                          await supabase.from('telegram_download_queue').upsert(downloadTask);
                          console.log(`  ‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏: ${fileId}`);
                        } catch (queueError) {
                          console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å:`, queueError);
                        }
                    }
                    
                    results.push({
                      messageId: anyMsg.id,
                      filename,
                      hasMedia: !!(anyMsg.media as unknown),
                      addedToQueue: addToQueue
                    });
                    
                } catch (msgError) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, msgError);
                }
            }
            
            console.log(`\nüìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.length}`);
            return results;
        } catch (error) {
            console.error('Error downloading files from archive channel:', error);
            throw error;
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏" –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –æ—á–µ—Ä–µ–¥–∏)
     * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    public async downloadAndProcessFilesDirectly(limit: number = 10): Promise<{[key: string]: unknown}[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
            console.log('üìö –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"...');
            const channel = await this.telegramClient.getFilesChannel();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            console.log(`üìñ –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${limit} —Å–æ–æ–±—â–µ–Ω–∏–π...`);
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                channel.id;
            const messages = await Promise.race([
                this.telegramClient.getMessages(channelId, limit) as unknown as Message[],
                new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout getting messages')), 30000))
            ]) as unknown as Message[];
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);

            const results: {[key: string]: unknown}[] = [];
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const msg of messages) {
                const anyMsg = msg as unknown as {[key: string]: unknown};
                console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–¥–∏–∞ (—Ñ–∞–π–ª)
                if (!(anyMsg.media as unknown)) {
                    console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }
                
                try {
                    // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                    const result = await this.downloadAndProcessSingleFile(anyMsg);
                    results.push(result);
                    
                } catch (msgError) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, msgError);
                    results.push({
                        messageId: anyMsg.id,
                        success: false,
                        error: msgError instanceof Error ? msgError.message : 'Unknown error'
                    });
                }
            }
            
            console.log(`\nüìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${results.length}`);
            return results;
        } catch (error) {
            console.error('Error downloading files from archive channel:', error);
            throw error;
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –µ–≥–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å —Ñ–∞–π–ª–æ–º
     * @param bookId ID –∫–Ω–∏–≥–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    public async processFile(message: {[key: string]: unknown}, bookId?: string): Promise<{[key: string]: unknown}> {
        if (bookId) {
            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –∫–Ω–∏–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
            return await this.downloadAndProcessSingleFileWithBookId(message, bookId);
        } else {
            // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
            return await this.downloadAndProcessSingleFile(message);
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è –µ–≥–æ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å —Ñ–∞–π–ª–æ–º
     * @param bookId ID –∫–Ω–∏–≥–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª
     */
    private async downloadAndProcessSingleFileWithBookId(message: {[key: string]: unknown}, bookId: string): Promise<{[key: string]: unknown}> {
        const anyMsg = message as unknown as {[key: string]: unknown};
        console.log(`  üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}...`);
        
        try {
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const buffer = await Promise.race([
                this.telegramClient!.downloadMedia(message),
                new Promise<never>((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout: Media download took too long')), 45000))
            ]);

            if (!buffer) {
                throw new Error('Failed to download file');
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞, mime –∏ –∞–≤—Ç–æ—Ä–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä message
            let filenameCandidate = `book_${anyMsg.id}.fb2`;
            let ext = '.fb2';
            let mime = 'application/octet-stream';
            let fileFormat = 'fb2';

            if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).attributes) {
                const attributes = (anyMsg.document as {[key: string]: unknown}).attributes as unknown[];
                const attrFileName = attributes.find((attr: unknown) => {
                    const attrObj = attr as {[key: string]: unknown};
                    return attrObj.className === 'DocumentAttributeFilename';
                }) as {[key: string]: unknown} | undefined;
                if (attrFileName && attrFileName.fileName) {
                    filenameCandidate = attrFileName.fileName as string;
                    ext = path.extname(filenameCandidate) || '.fb2';
                }
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            const mimeTypes: Record<string, string> = {
                '.fb2': 'application/fb2+xml',
                '.zip': 'application/zip',
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ fb2 –∏ zip)
            const allowedFormats: Record<string, string> = {
                '.fb2': 'fb2',
                '.zip': 'zip',
            };
            
            mime = mimeTypes[ext.toLowerCase()] || 'application/octet-stream';
            fileFormat = allowedFormats[ext.toLowerCase()] || 'fb2';

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            const { author, title } = TelegramSyncService.extractMetadataFromFilename(filenameCandidate);
            console.log(`  üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: author="${author}", title="${title}"`);
            
            // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Storage (—É–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã)
            const sanitizeFilename = (str: string) => {
                return str
                    .replace(/[<>:"/\\|?*\x00-\x1F]/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
                    .replace(/^\.+/, '') // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                    .replace(/\.+$/, '') // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
                    .substring(0, 255); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            };
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: MessageID.zip (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            const storageKey = sanitizeFilename(`${anyMsg.id}${ext}`);
            const displayName = filenameCandidate; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage (bucket 'books')
            console.log(`  ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage: ${storageKey}`);
            await uploadFileToStorage('books', storageKey, Buffer.from(buffer), mime);

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–∞–π–ª–∞
            const fileUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/books/${encodeURIComponent(storageKey)}`;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –ø–æ ID
            const admin = getSupabaseAdmin();
            if (!admin) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—É, —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤—ã—Ö–æ–¥–∏–º
                console.log(`  ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Supabase Admin`);
                throw new Error('SUPABASE_SERVICE_ROLE_KEY is not set. Cannot upsert book record.');
            }
            
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const supabase: any = admin;
            const { data: book, error: bookError } = await supabase
                .from('books')
                .select('title, author')
                .eq('id', bookId)
                .single();
            
            if (bookError || !book) {
                // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ Storage
                console.log(`  ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage: ${storageKey}`);
                try {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const storageSupabase: any = admin;
                    await storageSupabase.storage.from('books').remove([storageKey]);
                } catch (removeError) {
                    console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${removeError}`);
                }
                throw new Error(`Book with ID ${bookId} not found for file attachment`);
            }
            
            console.log(`  üìö –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫ –∫–Ω–∏–≥–µ: "${(book as {title: string}).title}" –∞–≤—Ç–æ—Ä–∞ ${(book as {author: string}).author}`);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
            const updateData: {[key: string]: unknown} = {
                file_url: fileUrl,
                file_size: buffer.length,
                file_format: fileFormat,
                telegram_file_id: String(anyMsg.id),
                storage_path: storageKey,
                updated_at: new Date().toISOString()
            };

            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const supabase2: any = admin;
            const { data: updatedBook, error: updateError } = await supabase2
                .from('books')
                .update(updateData)
                .eq('id', bookId)
                .select()
                .single();
            
            if (updateError) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É, —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ Storage
                console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage: ${storageKey}`);
                try {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const storageSupabase: any = admin;
                    await storageSupabase.storage.from('books').remove([storageKey]);
                } catch (removeError) {
                    console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${removeError}`);
                }
                throw updateError;
            }

            console.log(`  ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ: "${(book as {title: string}).title}"`);
            
            return {
                messageId: anyMsg.id,
                filename: filenameCandidate,
                fileSize: buffer.length,
                fileUrl,
                success: true,
                bookId: (updatedBook as {id: string}).id
            };
            
        } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, error);
            throw error;
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å —Ñ–∞–π–ª–æ–º
     */
    private async downloadAndProcessSingleFile(message: {[key: string]: unknown}): Promise<{[key: string]: unknown}> {
        const anyMsg = message as unknown as {[key: string]: unknown};
        console.log(`  üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}...`);
        
        try {
            // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            const buffer = await Promise.race([
                this.telegramClient!.downloadMedia(message),
                new Promise<never>((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout: Media download took too long')), 45000))
            ]);

            if (!buffer) {
                throw new Error('Failed to download file');
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞, mime –∏ –∞–≤—Ç–æ—Ä–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä message
            let filenameCandidate = `book_${anyMsg.id}.fb2`;
            let ext = '.fb2';
            let mime = 'application/octet-stream';
            let fileFormat = 'fb2';

            if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).attributes) {
                const attributes = (anyMsg.document as {[key: string]: unknown}).attributes as unknown[];
                const attrFileName = attributes.find((attr: unknown) => {
                    const attrObj = attr as {[key: string]: unknown};
                    return attrObj.className === 'DocumentAttributeFilename';
                }) as {[key: string]: unknown} | undefined;
                if (attrFileName && attrFileName.fileName) {
                    filenameCandidate = attrFileName.fileName as string;
                    ext = path.extname(filenameCandidate) || '.fb2';
                }
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            const mimeTypes: Record<string, string> = {
                '.fb2': 'application/fb2+xml',
                '.zip': 'application/zip',
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ fb2 –∏ zip)
            const allowedFormats: Record<string, string> = {
                '.fb2': 'fb2',
                '.zip': 'zip',
            };
            
            mime = mimeTypes[ext.toLowerCase()] || 'application/octet-stream';
            fileFormat = allowedFormats[ext.toLowerCase()] || 'fb2';

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            const { author, title } = TelegramSyncService.extractMetadataFromFilename(filenameCandidate);
            console.log(`  üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: author="${author}", title="${title}"`);
            
            // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Storage (—É–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã)
            const sanitizeFilename = (str: string) => {
                return str
                    .replace(/[<>:"/\\|?*\x00-\x1F]/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
                    .replace(/^\.+/, '') // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                    .replace(/\.+$/, '') // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
                    .substring(0, 255); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            };
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: MessageID.zip (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            const storageKey = sanitizeFilename(`${anyMsg.id}${ext}`);
            const displayName = filenameCandidate; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage (bucket 'books')
            console.log(`  ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage: ${storageKey}`);
            await uploadFileToStorage('books', storageKey, Buffer.from(buffer), mime);

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–∞–π–ª–∞
            const fileUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/books/${encodeURIComponent(storageKey)}`;

            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏
            const bookRecord: {[key: string]: unknown} = {
                title: title,
                author: author,
                file_url: fileUrl,
                file_size: buffer.length,
                file_format: fileFormat, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                telegram_file_id: String(anyMsg.id),
                storage_path: storageKey,
                updated_at: new Date().toISOString()
            };

            try {
                const result = await upsertBookRecord(bookRecord);
                if (result) {
                    console.log(`  ‚úÖ –ó–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–∞: ${filenameCandidate}`);
                } else {
                    // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ Storage
                    console.log(`  ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ Storage: ${storageKey}`);
                    const admin = getSupabaseAdmin();
                    if (admin) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const storageSupabase: any = admin;
                        await storageSupabase.storage.from('books').remove([storageKey]);
                    }
                    console.log(`  ‚ùå –§–∞–π–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–Ω–∏–≥–µ: ${filenameCandidate}`);
                    throw new Error('Book not found for file attachment');
                }
            } catch (err) {
                console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∫–Ω–∏–≥–∏:`, err);
                throw err;
            }

            console.log(`  ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${filenameCandidate}`);
            
            return {
                messageId: anyMsg.id,
                filename: filenameCandidate,
                fileSize: buffer.length,
                fileUrl,
                success: true
            };
            
        } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, error);
            throw error;
        }
    }

    public async shutdown(): Promise<void> {
        if (this.telegramClient && typeof (this.telegramClient as unknown as {[key: string]: unknown}).disconnect === 'function') {
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                await Promise.race([
                    ((this.telegramClient as unknown as {[key: string]: unknown}).disconnect as () => Promise<void>)(),
                    new Promise(resolve => setTimeout(resolve, 3000)) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
                ]);
            } catch (err) {
                console.warn('Error during shutdown:', err);
            }
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram –≤ –ë–î —Å —É—á—ë—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
     * @param metadata –ú–∞—Å—Å–∏–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
     */
    public async importMetadataWithDeduplication(metadata: BookMetadata[]): Promise<{ processed: number; added: number; updated: number; skipped: number; errors: number; details: unknown[] }> {
    if (!this.telegramClient) {
        throw new Error('Telegram client not initialized');
    }
    let processed = 0, added = 0, updated = 0, skipped = 0, errors = 0;
    const details: unknown[] = [];
    try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        for (const book of metadata) {
            const msgId = book.messageId;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–∏–≥–∏ –≤ –ë–î –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
            const { data: foundBooks, error: findError } = await serverSupabase
                .from('books')
                .select('*')
                .eq('title', book.title)
                .eq('author', book.author);
                
            if (findError) {
                errors++;
                details.push({ msgId, status: 'error', error: findError.message });
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (foundBooks && foundBooks.length > 0) {
                // –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                const existingBook = foundBooks[0];
                let needUpdate = false;
                const updateData: { [key: string]: unknown } = {};
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ª—É—á—à–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
                if (!existingBook.description && book.description) {
                    updateData.description = book.description;
                    needUpdate = true;
                }
                
                if (book.genres && book.genres.length > 0 && (!existingBook.genres || existingBook.genres.length === 0)) {
                    updateData.genres = book.genres;
                    needUpdate = true;
                }
                
                if (book.tags && book.tags.length > 0 && (!existingBook.tags || existingBook.tags.length === 0)) {
                    updateData.tags = book.tags;
                    needUpdate = true;
                }
                
                if (needUpdate) {
                    await serverSupabase.from('books').update(updateData).eq('id', existingBook.id);
                    updated++;
                    details.push({ msgId, status: 'updated', bookId: existingBook.id });
                } else {
                    skipped++;
                    details.push({ msgId, status: 'skipped', reason: 'metadata complete' });
                }
                
                // –ó–∞–ø–∏—Å—å –≤ telegram_processed_messages
                await serverSupabase.from('telegram_processed_messages').upsert({ 
                    message_id: String(msgId),
                    channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '',
                    book_id: existingBook.id,
                    processed_at: new Date().toISOString()
                });
            } else {
                // –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                const newBook = {
                    title: book.title,
                    author: book.author,
                    series: book.series || null,
                    series_number: book.seriesNumber || null,
                    description: book.description || '',
                    genres: book.genres || [],
                    tags: book.tags || [],
                    rating: book.rating || null,
                    telegram_file_id: String(msgId),
                    created_at: new Date().toISOString(),
                    updated_at: new Date().toISOString()
                };
                
                const { data: inserted, error: insertError } = await serverSupabase.from('books').insert(newBook).select().single();
                if (insertError) {
                    errors++;
                    details.push({ msgId, status: 'error', error: insertError.message });
                    continue;
                }
                
                added++;
                details.push({ msgId, status: 'added', bookId: inserted.id });
                
                // –ó–∞–ø–∏—Å—å –≤ telegram_processed_messages
                await serverSupabase.from('telegram_processed_messages').upsert({ 
                    message_id: String(msgId),
                    channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '',
                    book_id: inserted.id,
                    processed_at: new Date().toISOString()
                });
            }
            processed++;
        }
        return { processed, added, updated, skipped, errors, details };
    } catch (error) {
        throw error;
    }
}
}