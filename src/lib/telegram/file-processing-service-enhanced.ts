import { TelegramService } from './client';
import { getSupabaseAdmin } from '../supabase';
import { serverSupabase } from '../serverSupabase';
import { putObject } from '../s3-service';
import { S3Client, HeadObjectCommand } from "@aws-sdk/client-s3";
import * as path from 'path';
import { MetadataExtractionService } from './metadata-extraction-service';

export class EnhancedFileProcessingService {
    private static instance: EnhancedFileProcessingService;
    private telegramClient: TelegramService | null = null;

    private constructor() {}

    public static async getInstance(): Promise<EnhancedFileProcessingService> {
        if (!EnhancedFileProcessingService.instance) {
            EnhancedFileProcessingService.instance = new EnhancedFileProcessingService();
            EnhancedFileProcessingService.instance.telegramClient = await TelegramService.getInstance();
        }
        return EnhancedFileProcessingService.instance;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–±–ª–æ–∂–µ–∫
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
     */
    public async processSingleFileById(messageId: number): Promise<{[key: string]: unknown}> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å —Ñ–∞–π–ª–∞–º–∏
            console.log('üìö –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"...');
            const channel = await this.telegramClient.getFilesChannel();
            
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}...`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–æ—á–Ω–æ–º—É ID
            const messages = await this.telegramClient.getMessages(channelId, 1, messageId) as any[];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            if (!messages || messages.length === 0) {
                throw new Error(`Message ${messageId} not found`);
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            const targetMessage = messages[0];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ undefined –∏–ª–∏ null
            if (!targetMessage) {
                throw new Error(`Message ${messageId} is undefined or null`);
            }
            
            const anyMsg = targetMessage as unknown as {[key: string]: unknown};
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–¥–∏–∞ (—Ñ–∞–π–ª)
            if (!anyMsg || anyMsg.media === undefined || anyMsg.media === null) {
                console.warn(`  ‚ö†Ô∏è  Message ${messageId} does not contain media property`);
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ–¥–∏–∞ –≤ –¥—Ä—É–≥–∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö
                if (anyMsg && anyMsg.document) {
                    console.log(`  üìÑ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–≤–æ–π—Å—Ç–≤–µ document`);
                    anyMsg.media = anyMsg.document;
                } else if (anyMsg && anyMsg.photo) {
                    console.log(`  üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å–≤–æ–π—Å—Ç–≤–µ photo`);
                    anyMsg.media = anyMsg.photo;
                } else {
                    throw new Error(`Message ${messageId} does not contain media`);
                }
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);
            const result = await this.downloadAndProcessSingleFile(anyMsg);
            
            return result;
        } catch (error) {
            console.error(`Error processing file ${messageId}:`, error);
            throw error;
        }
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–±–ª–æ–∂–µ–∫
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å —Ñ–∞–π–ª–æ–º
     */
    private async downloadAndProcessSingleFile(message: {[key: string]: unknown}): Promise<{[key: string]: unknown}> {
        const anyMsg = message as unknown as {[key: string]: unknown};
        console.log(`üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}...`);
        
        // –ü–æ–ª—É—á–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        let originalFilename = `book_${anyMsg.id}.fb2`;

        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).attributes) {
            const attributes = (anyMsg.document as {[key: string]: unknown}).attributes as unknown[];
            const attrFileName = attributes.find((attr: unknown) => {
                const attrObj = attr as {[key: string]: unknown};
                return attrObj.className === 'DocumentAttributeFilename';
            }) as {[key: string]: unknown} | undefined;
            if (attrFileName && attrFileName.fileName) {
                originalFilename = attrFileName.fileName as string;
            }
        } else if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).fileName) {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            originalFilename = (anyMsg.document as {[key: string]: unknown}).fileName as string;
        } else if (anyMsg.fileName) {
            // –ï—â–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            originalFilename = anyMsg.fileName as string;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å–ª—É–∂–µ–±–Ω—ã–º (—ç—Å–∫–∏–∑–æ–º)
        if (originalFilename.includes('_thumb.jpg') || originalFilename.includes('.pdf_thumb')) {
            console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Ñ–∞–π–ª (—ç—Å–∫–∏–∑): ${originalFilename}`);
            return {
                messageId: anyMsg.id,
                filename: originalFilename,
                success: true,
                skipped: true,
                reason: 'technical_file',
                bookTitle: null,
                bookAuthor: null,
                searchTerms: []
            };
        }
        
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏
            const { author, title } = MetadataExtractionService.extractMetadataFromFilename(originalFilename);

            // –†–∞–∑–±–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const searchTerms = MetadataExtractionService.extractSearchTerms(originalFilename);
            
            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–Ω–∏–≥—É –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            console.log(`  üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏...`);
            
            // –ò—â–µ–º –∫–Ω–∏–≥–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º
            let allMatches: unknown[] = [];
            
            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞
            if (searchTerms.length > 0) {
                // –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
                // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ILIKE
                const searchPromises = [];
                
                // –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Ä–º–∏–Ω—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                for (const term of searchTerms) {
                    searchPromises.push(
                        serverSupabase
                            .from('books')
                            .select('id, title, author')
                            .ilike('title', `%${term}%`)
                            .limit(5)
                    );
                }
                
                // –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Ä–º–∏–Ω—É –≤ –∞–≤—Ç–æ—Ä–µ
                for (const term of searchTerms) {
                    searchPromises.push(
                        serverSupabase
                            .from('books')
                            .select('id, title, author')
                            .ilike('author', `%${term}%`)
                            .limit(5)
                    );
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                try {
                    const results = await Promise.all(searchPromises);
                    
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    allMatches = results.flatMap((result: any) => result.data || []);
                } catch (searchError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥:`, searchError);
                }
                
                console.log(`  üìö –ù–∞–π–¥–µ–Ω–æ ${allMatches.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º`);
            }
            
            // –ï—Å–ª–∏ –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Ç–µ—Ä–º–∏–Ω–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            if (allMatches.length === 0) {
                const searchPromises = [];
                
                // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                searchPromises.push(
                    serverSupabase
                        .from('books')
                        .select('id, title, author')
                        .ilike('title', `%${title}%`)
                        .limit(5)
                );
                
                // –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É
                searchPromises.push(
                    serverSupabase
                        .from('books')
                        .select('id, title, author')
                        .ilike('author', `%${author}%`)
                        .limit(5)
                );
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                try {
                    const results = await Promise.all(searchPromises);
                    
                    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    allMatches = results.flatMap((result: any) => result.data || []);
                } catch (searchError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥:`, searchError);
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
            const uniqueMatches = allMatches.filter((bookItem, index, self) => 
                index === self.findIndex(b => (b as { id: string }).id === (bookItem as { id: string }).id)
            );
            
            // –ï—Å–ª–∏ –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
            if (uniqueMatches.length === 0) {
                console.log(`  ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏. –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω: ${originalFilename}`);
                return {
                    messageId: anyMsg.id,
                    filename: originalFilename,
                    success: true,
                    skipped: true,
                    reason: 'book_not_found',
                    bookTitle: title,
                    bookAuthor: author,
                    searchTerms: searchTerms
                };
            }
            
            console.log(`  üìö –ù–∞–π–¥–µ–Ω–æ ${uniqueMatches.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
            
            // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∫–Ω–∏–≥—É –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
            const bestMatch = MetadataExtractionService.selectBestMatch(uniqueMatches, searchTerms, title, author);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–Ω–∏–≥—É
            if (!bestMatch) {
                console.log(`  ‚ö†Ô∏è  –ü–æ–¥—Ö–æ–¥—è—â–∞—è –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏. –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω: ${originalFilename}`);
                return {
                    messageId: anyMsg.id,
                    filename: originalFilename,
                    success: true,
                    skipped: true,
                    reason: 'no_matching_book',
                    bookTitle: title,
                    bookAuthor: author,
                    searchTerms: searchTerms
                };
            }
            
            console.log(`  ‚úÖ –í—ã–±—Ä–∞–Ω–∞ –ª—É—á—à–∞—è –∫–Ω–∏–≥–∞: "${(bestMatch as { title: string }).title}" –∞–≤—Ç–æ—Ä–∞ ${(bestMatch as { author: string }).author}`);
            
            const book = bestMatch as { id: string; title: string; author: string };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
            const { data: existingRecords, error: selectError } = await serverSupabase
                .from('telegram_processed_messages')
                .select('*')
                .eq('book_id', book.id);
                
            if (selectError) {
                console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ telegram_processed_messages:`, selectError);
            } else if (!existingRecords || existingRecords.length === 0) {
                console.log(`  ‚ö†Ô∏è  –ó–∞–ø–∏—Å—å –≤ telegram_processed_messages –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è book_id: ${book.id}. –ö–Ω–∏–≥–∞ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞, —Ñ–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω.`);
                return {
                    messageId: anyMsg.id,
                    filename: originalFilename,
                    success: true,
                    skipped: true,
                    reason: 'book_not_imported',
                    bookTitle: book?.title,
                    bookAuthor: book?.author,
                    searchTerms: searchTerms
                };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages —Å telegram_file_id –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages —Å telegram_file_id —Ä–∞–≤–Ω—ã–º ID —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
                const { data: existingFileRecords, error: selectFileError } = await serverSupabase
                    .from('telegram_processed_messages')
                    .select('*')
                    .eq('telegram_file_id', String(anyMsg.id));
                    
                if (selectFileError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ telegram_processed_messages:`, selectFileError);
                } else if (existingFileRecords && existingFileRecords.length > 0) {
                    console.log(`  ‚ö†Ô∏è  –§–∞–π–ª —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${originalFilename}`);
                    return {
                        messageId: anyMsg.id,
                        filename: originalFilename,
                        success: true,
                        skipped: true,
                        reason: 'already_processed',
                        bookTitle: book?.title,
                        bookAuthor: book?.author,
                        searchTerms: searchTerms
                    };
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages –¥–ª—è –∫–Ω–∏–≥–∏ —Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º telegram_file_id
                const bookId = existingRecords ? (existingRecords[0] as { book_id: string }).book_id : null;
                if (!bookId) {
                    console.warn(`  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å book_id –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
                    return {
                        messageId: anyMsg.id,
                        filename: originalFilename,
                        success: true,
                        skipped: true,
                        reason: 'book_not_imported',
                        bookTitle: book?.title,
                        bookAuthor: book?.author,
                        searchTerms: searchTerms
                    };
                }
                
                const { data: existingBookRecords, error: selectBookError } = await serverSupabase
                    .from('telegram_processed_messages')
                    .select('*')
                    .eq('book_id', bookId);
                    
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ –ø—É—Å—Ç—ã–º telegram_file_id
                const filteredRecords = existingBookRecords ? existingBookRecords.filter((record: any) => 
                    record.telegram_file_id && record.telegram_file_id !== null
                ) : [];
                
                if (selectBookError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∫–Ω–∏–≥–∏ –≤ telegram_processed_messages:`, selectBookError);
                } else if (filteredRecords && filteredRecords.length > 0) {
                    console.log(`  ‚ö†Ô∏è  –î–ª—è –∫–Ω–∏–≥–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${originalFilename}`);
                    return {
                        messageId: anyMsg.id,
                        filename: originalFilename,
                        success: true,
                        skipped: true,
                        reason: 'book_already_has_file',
                        bookTitle: book?.title,
                        bookAuthor: book?.author,
                        searchTerms: searchTerms
                    };
                }
            } catch (checkError) {
                console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π:`, checkError);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ books —Å —Ç–∞–∫–∏–º –∂–µ telegram_file_id
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º book_id –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
                const bookId = book.id;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ books –∑–∞–ø–∏—Å—å —Å —ç—Ç–∏–º book_id –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º telegram_file_id
                const { data: bookFileRecords, error: bookFileError } = await serverSupabase
                    .from('books')
                    .select('*')
                    .eq('id', book.id);
                    
                if (bookFileError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ books:`, bookFileError);
                } else if (bookFileRecords && bookFileRecords.length > 0) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –ø–æ–ª–µ telegram_file_id
                    const bookRecord = bookFileRecords[0] as { telegram_file_id: string | null };
                    if (bookRecord.telegram_file_id && bookRecord.telegram_file_id !== null) {
                        console.log(`  ‚ö†Ô∏è  –î–ª—è –∫–Ω–∏–≥–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Ñ–∞–π–ª –≤ —Ç–∞–±–ª–∏—Ü–µ books, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: ${originalFilename}`);
                        return {
                            messageId: anyMsg.id,
                            filename: originalFilename,
                            success: true,
                            skipped: true,
                            reason: 'book_already_has_file_in_books_table',
                            bookTitle: book?.title,
                            bookAuthor: book?.author,
                            searchTerms: searchTerms
                        };
                    }
                }
            } catch (checkBookError) {
                console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ books:`, checkBookError);
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞, mime –∏ –∞–≤—Ç–æ—Ä–∞ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä message
            let ext = '.fb2';
            let mime = 'application/octet-stream';
            let fileFormat = 'fb2';

            if (anyMsg.document && (anyMsg.document as {[key: string]: unknown}).attributes) {
                const attributes = (anyMsg.document as {[key: string]: unknown}).attributes as unknown[];
                const attrFileName = attributes.find((attr: unknown) => {
                    const attrObj = attr as {[key: string]: unknown};
                    return attrObj.className === 'DocumentAttributeFilename';
                }) as {[key: string]: unknown} | undefined;
                if (attrFileName && attrFileName.fileName) {
                    originalFilename = attrFileName.fileName as string;
                    ext = path.extname(originalFilename) || '.fb2';
                }
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            const mimeTypes: Record<string, string> = {
                '.fb2': 'application/fb2+xml',
                '.zip': 'application/zip',
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ fb2 –∏ zip)
            const allowedFormats: Record<string, string> = {
                '.fb2': 'fb2',
                '.zip': 'zip',
            };
            
            mime = mimeTypes[ext.normalize('NFC').toLowerCase()] || 'application/octet-stream';
            fileFormat = allowedFormats[ext.normalize('NFC').toLowerCase()] || 'fb2';

            // –°–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Storage (—É–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã)
            const sanitizeFilename = (str: string) => {
                return str
                    .replace(/[<>:"/\\|?*\x00-\x1F]/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
                    .replace(/^\.+/, '') // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
                    .replace(/\.+$/, '') // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
                    .substring(0, 255); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            };
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: MessageID.zip (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            const storageKey = sanitizeFilename(`${anyMsg.id}${ext}`);
            const displayName = originalFilename; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ S3 –±–∞–∫–µ—Ç–µ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
            console.log(`  üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ S3 –±–∞–∫–µ—Ç–µ: ${storageKey}`);
            const existingFile = await this.checkExistingFileInS3(storageKey, 0, mime); // –†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø–æ–∫–∞
            
            if (existingFile) {
                console.log(`  ‚úÖ –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ S3 –±–∞–∫–µ—Ç–µ`);
                // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–∞–π–ª–∞
                const bucketName = process.env.S3_BUCKET_NAME;
                if (!bucketName) {
                    throw new Error('S3_BUCKET_NAME environment variable is not set.');
                }
                const fileUrl = `https://${bucketName}.s3.cloud.ru/${storageKey}`;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
                try {
                    const updateData: any = {
                        file_url: fileUrl,
                        file_size: existingFile.size,
                        file_format: fileFormat,
                        telegram_file_id: String(anyMsg.id),
                        updated_at: new Date().toISOString()
                    };
                    
                    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ Supabase
                    const booksTable: any = serverSupabase.from('books');
                    const { error: updateBookError } = await booksTable
                        .update(updateData)
                        .eq('id', book.id)
                        .select();
                        
                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É –æ—Ç–¥–µ–ª—å–Ω–æ
                    const { data: updatedBook, error: selectBookError } = await serverSupabase
                        .from('books')
                        .select('*')
                        .eq('id', book.id)
                        .single();
                        
                    if (updateBookError) {
                        throw updateBookError;
                    }
                    
                    if (selectBookError) {
                        throw selectBookError;
                    }
                    
                    console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ: "${(updatedBook as { title: string }).title}"`);
                } catch (updateBookError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:`, updateBookError);
                    throw updateBookError;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages —Å telegram_file_id
                try {
                    if (existingRecords && existingRecords.length > 0) {
                        const updateMessageData: any = {
                            telegram_file_id: String(anyMsg.id),
                            processed_at: new Date().toISOString()
                        };
                        
                        // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ Supabase
                        const messagesTable: any = serverSupabase.from('telegram_processed_messages');
                        const { error: updateError } = await messagesTable
                            .update(updateMessageData)
                            .eq('id', (existingRecords[0] as { id: string }).id)
                            .select();
                    
                        if (updateError) {
                            console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–µ–Ω–∏–∏ telegram_processed_messages:`, updateError);
                        } else {
                            console.log(`  ‚úÖ –ó–∞–ø–∏—Å—å –≤ telegram_processed_messages –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å telegram_file_id: ${anyMsg.id}`);
                        }
                    }
                } catch (updateMessageError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_processed_messages:`, updateMessageError);
                }

                console.log(`  ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ: ${originalFilename}`);
                
                return {
                    messageId: anyMsg.id,
                    filename: originalFilename,
                    fileSize: existingFile.size,
                    fileUrl,
                    success: true,
                    bookId: book.id,
                    bookTitle: book.title,
                    bookAuthor: book.author,
                    searchTerms: searchTerms
                };
            } else {
                // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∫–µ—Ç–µ, —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ –∏–∑ Telegram
                console.log(`  ‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}...`);
                
                // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                const buffer = await Promise.race([
                    this.telegramClient!.downloadMedia(message),
                    new Promise<never>((_, reject) => 
                        setTimeout(() => reject(new Error('Timeout: Media download took too long')), 180000)) // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 180 —Å–µ–∫—É–Ω–¥ (3 –º–∏–Ω—É—Ç—ã)
                ]);

                if (!buffer) {
                    throw new Error('Failed to download file');
                }
                
                // –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ä–∞–∑—É –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –≤ S3 –±–∞–∫–µ—Ç
                console.log(`  ‚¨ÜÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ S3 –±–∞–∫–µ—Ç: ${storageKey}`);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 –±–∞–∫–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º S3_BUCKET_NAME –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
                console.log(`  ‚òÅÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3 –±–∞–∫–µ—Ç: ${storageKey}`);
                const bucketName = process.env.S3_BUCKET_NAME;
                if (!bucketName) {
                  throw new Error('S3_BUCKET_NAME environment variable is not set.');
                }
                await putObject(storageKey, Buffer.from(buffer), bucketName);

                // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–∞–π–ª–∞
                const fileUrl = `https://${bucketName}.s3.cloud.ru/${storageKey}`;

                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∫–Ω–∏–≥–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
                try {
                    const updateData: any = {
                        file_url: fileUrl,
                        file_size: buffer.length,
                        file_format: fileFormat,
                        telegram_file_id: String(anyMsg.id),
                        updated_at: new Date().toISOString()
                    };
                    
                    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ Supabase
                    const booksTable: any = serverSupabase.from('books');
                    const { error: updateBookError } = await booksTable
                        .update(updateData)
                        .eq('id', book.id)
                        .select();
                        
                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–Ω–∏–≥—É –æ—Ç–¥–µ–ª—å–Ω–æ
                    const { data: updatedBook, error: selectBookError } = await serverSupabase
                        .from('books')
                        .select('*')
                        .eq('id', book.id)
                        .single();
                        
                    if (updateBookError) {
                        throw updateBookError;
                    }
                    
                    if (selectBookError) {
                        throw selectBookError;
                    }
                    
                    console.log(`  ‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ: "${(updatedBook as { title: string }).title}"`);
                } catch (updateBookError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏:`, updateBookError);
                    // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ Storage –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    console.log(`  üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Storage –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏: ${storageKey}`);
                    try {
                        const admin = getSupabaseAdmin();
                        if (admin) {
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            const storageSupabase: any = admin;
                            await storageSupabase.storage.from('books').remove([storageKey]);
                        }
                    } catch (deleteError) {
                        console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:`, deleteError);
                    }
                    throw updateBookError;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages —Å telegram_file_id
                try {
                    if (existingRecords && existingRecords.length > 0) {
                        const updateMessageData: any = {
                            telegram_file_id: String(anyMsg.id),
                            processed_at: new Date().toISOString()
                        };
                        
                        // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ Supabase
                        const messagesTable: any = serverSupabase.from('telegram_processed_messages');
                        const { error: updateError } = await messagesTable
                            .update(updateMessageData)
                            .eq('id', (existingRecords[0] as { id: string }).id)
                            .select();
                    
                        if (updateError) {
                            console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–µ–Ω–∏–∏ telegram_processed_messages:`, updateError);
                        } else {
                            console.log(`  ‚úÖ –ó–∞–ø–∏—Å—å –≤ telegram_processed_messages –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å telegram_file_id: ${anyMsg.id}`);
                        }
                    }
                } catch (updateMessageError) {
                    console.warn(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_processed_messages:`, updateMessageError);
                }

                console.log(`  ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ: ${originalFilename}`);

                return {
                    messageId: anyMsg.id,
                    filename: originalFilename,
                    fileSize: buffer.length,
                    fileUrl,
                    success: true,
                    bookId: book.id,
                    bookTitle: book.title,
                    bookAuthor: book.author,
                    searchTerms: searchTerms
                };
            }
        } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ S3 –±–∞–∫–µ—Ç–µ –∏ –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Ç–∏–ø—É
     * @param key –ö–ª—é—á —Ñ–∞–π–ª–∞ –≤ –±–∞–∫–µ—Ç–µ
     * @param expectedSize –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (0 –¥–ª—è –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
     * @param expectedMimeType –û–∂–∏–¥–∞–µ–º—ã–π MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
     * @returns –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ –∏–ª–∏ null, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
     */
    private async checkExistingFileInS3(key: string, expectedSize: number, expectedMimeType: string): Promise<{ size: number; mimeType: string } | null> {
        try {
            const s3Client = new S3Client({
                endpoint: "https://s3.cloud.ru",
                region: process.env.AWS_REGION,
                credentials: {
                    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,
                    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,
                }
            });

            const command = new HeadObjectCommand({
                Bucket: process.env.S3_BUCKET_NAME,
                Key: key
            });

            const response = await s3Client.send(command);
            
            // –ï—Å–ª–∏ expectedSize —Ä–∞–≤–µ–Ω 0, —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            if (expectedSize === 0) {
                return {
                    size: response.ContentLength || 0,
                    mimeType: response.ContentType || ''
                };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Ç–∏–ø–∞
            if (response.ContentLength === expectedSize && response.ContentType === expectedMimeType) {
                return {
                    size: response.ContentLength,
                    mimeType: response.ContentType || ''
                };
            }
            
            return null;
        } catch (error) {
            // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            return null;
        }
    }

    public async shutdown(): Promise<void> {
        if (this.telegramClient && typeof (this.telegramClient as unknown as {[key: string]: unknown}).disconnect === 'function') {
            try {
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                await Promise.race([
                    ((this.telegramClient as unknown as {[key: string]: unknown}).disconnect as () => Promise<void>)(),
                    new Promise(resolve => setTimeout(resolve, 3000)) // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç
                ]);
            } catch (err) {
                console.warn('Error during shutdown:', err);
            }
        }
    }
}