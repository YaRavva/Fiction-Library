import TelegramBot from 'node-telegram-bot-api';
import { Message } from 'node-telegram-bot-api';

export class TelegramService {
    private bot: TelegramBot;
    private static instance: TelegramService;

    private constructor() {
        const token = process.env.TELEGRAM_BOT_TOKEN;

        if (!token) {
            throw new Error('TELEGRAM_BOT_TOKEN must be set in environment variables');
        }

        this.bot = new TelegramBot(token, { polling: false });
    }

    public static async getInstance(): Promise<TelegramService> {
        if (!TelegramService.instance) {
            TelegramService.instance = new TelegramService();
        }
        return TelegramService.instance;
    }

    public async getMetadataChannel() {
        const channelUsername = process.env.TELEGRAM_METADATA_CHANNEL?.split('/').pop();
        if (!channelUsername) {
            throw new Error('Invalid metadata channel URL');
        }

        try {
            const chat = await this.bot.getChat(channelUsername);
            return chat;
        } catch (error) {
            console.error('Error getting metadata channel:', error);
            throw error;
        }
    }

    public async getFilesChannel() {
        const channelId = process.env.TELEGRAM_FILES_CHANNEL;
        if (!channelId) {
            throw new Error('TELEGRAM_FILES_CHANNEL must be set');
        }

        try {
            const chat = await this.bot.getChat(channelId);
            return chat;
        } catch (error) {
            console.error('Error getting files channel:', error);
            throw error;
        }
    }

    public async getMessages(chatId: number | string, limit: number = 10): Promise<Message[]> {
        try {
            return await this.bot.getUpdates({
                allowed_updates: ['channel_post'],
                limit
            });
        } catch (error) {
            console.error('Error getting messages:', error);
            throw error;
        }
    }

    public async downloadFile(fileId: string): Promise<Buffer> {
        try {
            const filePath = await this.bot.getFile(fileId);
            if (!filePath.file_path) {
                throw new Error('No file path available');
            }

            const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${filePath.file_path}`;
            const response = await fetch(fileUrl);
            if (!response.ok) {
                throw new Error(`Failed to download file: ${response.statusText}`);
            }

            return Buffer.from(await response.arrayBuffer());
        } catch (error) {
            console.error('Error downloading file:', error);
            throw error;
        }
    }
}