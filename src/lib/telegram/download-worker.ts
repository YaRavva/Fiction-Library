import { serverSupabase } from '../serverSupabase';
import { TelegramFileService } from './file-service';
import { DownloadQueue, DownloadTask } from './queue';
import { TelegramService } from './client';

/**
 * –í–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
 */
export class DownloadWorker {
    private static instance: DownloadWorker;
    private fileService: TelegramFileService | null = null;
    private queue: DownloadQueue | null = null;
    private isRunning = false;
    private intervalId: NodeJS.Timeout | null = null;

    private constructor() {}

    public static async getInstance(): Promise<DownloadWorker> {
        if (!DownloadWorker.instance) {
            DownloadWorker.instance = new DownloadWorker();
            DownloadWorker.instance.fileService = await TelegramFileService.getInstance();
            DownloadWorker.instance.queue = new DownloadQueue();
        }
        return DownloadWorker.instance;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * @param interval –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫—É–Ω–¥)
     */
    public async start(interval: number = 30000): Promise<void> {
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–æ—Ä–∫–µ—Ä–∞
        console.log('‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω');
        return;
        
        /*
        if (this.isRunning) {
            console.log('‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: ${interval}ms)`);

        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await this.processQueue();

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        this.intervalId = setInterval(async () => {
            await this.processQueue();
        }, interval);
        */
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä
     */
    public async stop(): Promise<void> {
        // –û—Ç–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞
        console.log('‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        return;
        
        /*
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è  –í–æ—Ä–∫–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }

        this.isRunning = false;
        console.log('üõë –í–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        */
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    private async processQueue(): Promise<void> {
        if (!this.fileService || !this.queue) {
            // console.error('‚ùå –°–µ—Ä–≤–∏—Å —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            return;
        }

        try {
            // console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...');

            // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å –ø–æ–º–æ—â—å—é RPC —Ñ—É–Ω–∫—Ü–∏–∏
            const task = await this.queue.getNextTask();

            if (!task) {
                // console.log('üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                return;
            }

            // console.log(`üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ ID: ${task.id}, message_id: ${task.message_id}`);

            try {
                // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                const message = await this.getMessageFromTelegram(task.message_id, task.channel_id);
                
                if (!message) {
                    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${task.message_id} –∏–∑ Telegram`);
                    await this.queue.completeTask(task.id, false, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram');
                    return;
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                const result = await this.processFileTask(message);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                const success = result.success !== false;
                const errorMsg = success ? undefined : (result.error as string | undefined);
                await this.queue.completeTask(task.id, success, errorMsg);

                console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${task.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${success ? 'completed' : 'failed'}`);
            } catch (taskError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ ${task.id}:`, taskError);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ "–æ—à–∏–±–∫–∞"
                await this.queue.completeTask(task.id, false, taskError instanceof Error ? taskError.message : 'Unknown error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram –ø–æ ID
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param channelId ID –∫–∞–Ω–∞–ª–∞
     */
    private async getMessageFromTelegram(messageId: string, channelId: string): Promise<{[key: string]: unknown} | null> {
        try {
            console.log(`  üì° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –∏–∑ Telegram...`);
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
            const telegramClient = await TelegramService.getInstance();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messages = await telegramClient.getMessages(channelId, 1, parseInt(messageId, 10)) as unknown as any[];
            
            if (messages && messages.length > 0) {
                console.log(`  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ Telegram`);
                return messages[0] as {[key: string]: unknown};
            } else {
                console.log(`  ‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Telegram`);
                return null;
            }
        } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –∏–∑ Telegram:`, error);
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram
     */
    private async processFileTask(message: {[key: string]: unknown}): Promise<{[key: string]: unknown}> {
        if (!this.fileService) {
            throw new Error('File service not initialized');
        }

        try {
            console.log(`  üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id}...`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
            const result = await this.fileService.processSingleFile(message);
            return result;
        } catch (error) {
            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º ${message.id}:`, error);
            return {
                success: false,
                error: error instanceof Error ? error.message : 'Unknown error'
            };
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     * @param channelId ID –∫–∞–Ω–∞–ª–∞ –≤ Telegram
     * @param priority –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (0 - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
     */
    public async addTask(messageId: string, channelId: string, priority: number = 0): Promise<void> {
        if (!this.queue) {
            throw new Error('Queue not initialized');
        }

        try {
            await this.queue.addTask({
                message_id: messageId,
                channel_id: channelId,
                priority: priority
            });

            console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: message_id=${messageId}`);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:`, error);
            throw error;
        }
    }
}