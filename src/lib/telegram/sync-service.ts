import { TelegramMetadataService } from './metadata-service';
import { TelegramFileService } from './file-service';
import { serverSupabase } from '../serverSupabase';
import { TelegramService } from './client';
import { uploadFileToStorage } from '../supabase';
import { MetadataParser, BookMetadata } from './parser';
import { Book } from '../supabase';

export class SyncService {
    private metadataService: TelegramMetadataService;
    private fileService: TelegramFileService;
    private telegramClient: TelegramService;

    constructor(metadataService: TelegramMetadataService, fileService: TelegramFileService, telegramClient: TelegramService) {
        this.metadataService = metadataService;
        this.fileService = fileService;
        this.telegramClient = telegramClient;
    }

    public async fullMetadataSync(): Promise<{
        processed: number;
        added: number;
        updated: number;
        skipped: number;
        errors: number;
    }> {
        console.log('  üìö –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            const allMessages = await this.getAllMessagesFromChannel();
            
            const batchSize = 50;
            let totalProcessed = 0;
            let totalAdded = 0;
            let totalUpdated = 0;
            let totalSkipped = 0;
            let totalErrors = 0;
            
            for (let i = 0; i < allMessages.length; i += batchSize) {
                const batch = allMessages.slice(i, i + batchSize);
                console.log(`  üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${Math.floor(i / batchSize) + 1} –∏–∑ ${Math.ceil(allMessages.length / batchSize)}...`);
                
                const result = await this.processMessageBatch(batch);
                
                totalProcessed += result.processed;
                totalAdded += result.added;
                totalUpdated += result.updated;
                totalSkipped += result.skipped;
                totalErrors += result.errors;
                
                console.log(`    ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}, –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.added}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped}, –û—à–∏–±–æ–∫: ${result.errors}`);
                
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            console.log(`  ‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}`);
            
            return {
                processed: totalProcessed,
                added: totalAdded,
                updated: totalUpdated,
                skipped: totalSkipped,
                errors: totalErrors
            };
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
            return {
                processed: 0,
                added: 0,
                updated: 0,
                skipped: 0,
                errors: 1
            };
        }
    }

    private async processMessageBatch(messages: unknown[]): Promise<{
        processed: number;
        added: number;
        updated: number;
        skipped: number;
        errors: number;
    }> {
        let processed = 0;
        const added = 0;
        let updated = 0;
        let skipped = 0;
        let errors = 0;
        const details: unknown[] = [];
        const metadataList: BookMetadata[] = [];

        try {
            const { MetadataParser } = await import('../telegram/parser');
            
            for (const msg of messages) {
                processed++;
                const anyMsg = msg as unknown as { [key: string]: unknown };
                console.log(`    üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);
 
                if (!(msg as { text?: string }).text) {
                    console.log(`      ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    skipped++;
                    details.push({ 
                        msgId: anyMsg.id, 
                        status: 'skipped', 
                        reason: 'no text content'
                    });
                    continue;
                }
 
                const metadata = MetadataParser.parseMessage((msg as { text: string }).text);
                metadata.messageId = anyMsg.id as number;
 
                if (!metadata.title || !metadata.author || metadata.title.trim() === '' || metadata.author.trim() === '') {
                    console.log(`      ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä)`);
                    skipped++;
                    details.push({ 
                        msgId: anyMsg.id, 
                        status: 'skipped', 
                        reason: 'missing title or author',
                        bookTitle: metadata.title || 'unknown',
                        bookAuthor: metadata.author || 'unknown'
                    });
                    continue;
                }
 
                let existingBook: Book | null = null;
                try {
                    const { data, error } = await serverSupabase
                        .from('books')
                        .select('id, telegram_post_id')
                        .eq('title', metadata.title)
                        .eq('author', metadata.author)
                        .limit(1)
                        .single();

                    if (!error && data) {
                        existingBook = data as Book;
                        console.log(`      ‚ÑπÔ∏è –ö–Ω–∏–≥–∞ "${metadata.title}" –∞–≤—Ç–æ—Ä–∞ ${metadata.author} –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.`);
                    }
                } catch (checkError) {
                    console.warn(`      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏:`, checkError);
                }

                if (existingBook) {
                    if (existingBook.telegram_post_id === null || existingBook.telegram_post_id !== (anyMsg.id as number)) {
                        console.log(`      üîÑ –û–±–Ω–æ–≤–ª—è–µ–º telegram_post_id –¥–ª—è –∫–Ω–∏–≥–∏ "${metadata.title}" (${existingBook.id})`);
                        
                        const { error: updateError } = await (serverSupabase as any)
                            .from('books')
                            .update({ telegram_post_id: anyMsg.id as number })
                            .eq('id', (existingBook as Book).id);

                        if (updateError) {
                            console.error(`      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_post_id:`, updateError);
                            errors++;
                            details.push({ 
                                msgId: anyMsg.id, 
                                status: 'error', 
                                reason: 'failed to update telegram_post_id',
                                bookId: (existingBook as Book).id,
                                bookTitle: metadata.title,
                                bookAuthor: metadata.author
                            });
                            continue;
                        }
                        updated++;
                        details.push({ 
                            msgId: anyMsg.id, 
                            status: 'updated', 
                            reason: 'telegram_post_id updated',
                            bookId: (existingBook as Book).id,
                            bookTitle: metadata.title,
                            bookAuthor: metadata.author
                        });
                    } else {
                        console.log(`      ‚úÖ –ö–Ω–∏–≥–∞ "${metadata.title}" —É–∂–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_post_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        skipped++;
                        details.push({ 
                            msgId: anyMsg.id, 
                            status: 'skipped', 
                            reason: 'book already has correct telegram_post_id',
                            bookId: (existingBook as Book).id,
                            bookTitle: metadata.title,
                            bookAuthor: metadata.author
                        });
                    }
                    continue;
                }
 
                const coverUrls: string[] = [];
 
                if (!existingBook && anyMsg.media) {
                    console.log(`      üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ${anyMsg.id} (—Ç–∏–ø: ${(anyMsg.media as { className: string }).className})`);
                    
                    const downloadWithRetry = async (media: unknown, maxRetries = 3) => {
                        for (let attempt = 1; attempt <= maxRetries; attempt++) {
                            try {
                                console.log(`        ‚Üí –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${attempt}/${maxRetries}...`);
                                const result = await Promise.race([
                                    this.telegramClient!.downloadMedia(media),
                                    new Promise<never>((_, reject) => 
                                        setTimeout(() => reject(new Error(`Timeout: Downloading media took too long (attempt ${attempt}/${maxRetries})`)), 60000))
                                ]);
                                return result;
                            } catch (err: unknown) {
                                console.warn(`        ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err instanceof Error ? err.message : 'Unknown error');
                                if (attempt === maxRetries) {
                                    throw err;
                                }
                                await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
                            }
                        }
                    };
                    
                    if ((anyMsg.media as { className: string }).className === 'MessageMediaWebPage' && (anyMsg.media as { webpage?: { photo?: unknown } }).webpage?.photo) {
                        console.log(`        ‚Üí –í–µ–±-–ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`        ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é...`);
                            const result = await downloadWithRetry((anyMsg.media as { webpage: { photo: unknown } }).webpage.photo);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`        ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`        ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`        ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err: unknown) {
                            console.error(`        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é:`, err instanceof Error ? err.message : 'Unknown error');
                        }
                    }
                    else if ((anyMsg.media as { photo?: unknown }).photo) {
                        console.log(`        ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`        ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ...`);
                            const result = await downloadWithRetry(msg);
 
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`        ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`        ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`        ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err: unknown) {
                            console.error(`        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err instanceof Error ? err.message : 'Unknown error');
                        }
                    }
                    else if ((anyMsg.media as { document?: unknown }).document) {
                        const mimeType = (anyMsg.media as { document: { mimeType?: string } }).document.mimeType;
                        if (mimeType && mimeType.startsWith('image/')) {
                            console.log(`        ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç: ${mimeType})`);
                            try {
                                console.log(`        ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...`);
                                const result = await downloadWithRetry(msg);
 
                                const photoBuffer = result instanceof Buffer ? result : null;
                                if (photoBuffer) {
                                    const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                    console.log(`        ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                    await uploadFileToStorage('covers', photoKey, Buffer.from(photoBuffer), 'image/jpeg');
                                    const photoUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}/storage/v1/object/public/covers/${photoKey}`;
                                    coverUrls.push(photoUrl);
                                    console.log(`        ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                                } else {
                                    console.warn(`        ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                                }
                            } catch (err: unknown) {
                                console.error(`        ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err instanceof Error ? err.message : 'Unknown error');
                            }
                        }
                    }
                }
 
                if (!existingBook || ((existingBook as Book).telegram_post_id === null || (existingBook as Book).telegram_post_id !== (anyMsg.id as number))) {
                    metadataList.push({
                        ...metadata,
                        coverUrls: coverUrls.length > 0 ? coverUrls : metadata.coverUrls || []
                    });
                } else {
                    details.push({ 
                        msgId: anyMsg.id, 
                        status: 'skipped', 
                        reason: 'book already exists with correct telegram_post_id',
                        bookId: (existingBook as Book).id,
                        bookTitle: metadata.title,
                        bookAuthor: metadata.author
                    });
                    skipped++;
                }
            }
 
            console.log(`    üìä –í—Å–µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataList.length}`);
            
            console.log('    üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π...');
            const resultImport = await this.metadataService.importMetadataWithDeduplication(metadataList);
            
            const combinedDetails = [...details, ...resultImport.details];
            console.log('    ‚úÖ –ò–º–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
            
            const totalSkippedFinal = skipped + resultImport.skipped;
            
            return {
                processed: processed,
                added: resultImport.added,
                updated: resultImport.updated,
                skipped: totalSkippedFinal,
                errors: errors + resultImport.errors
            };
        } catch (error) {
            console.error('    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            errors++;
            return {
                processed: processed,
                added: 0,
                updated: 0,
                skipped: skipped,
                errors: errors
            };
        }
    }

    private async getAllMessagesFromChannel(): Promise<unknown[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }
        
        try {
            console.log('  üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
            
            const channel = await this.telegramClient.getMetadataChannel();
            
            const channelId = typeof channel.id === 'object' && channel !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);
            
            const allMessages = await this.telegramClient.getAllMessages(channelId, 100);
            
            console.log(`  ‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages.length}`);
            return allMessages;
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    public async syncFiles(): Promise<{
        processed: number;
        linked: number;
        skipped: number;
        errors: number;
    }> {
        try {
            if (!this.fileService) {
                throw new Error('File service not initialized');
            }
            
            const { data: booksWithoutFiles, error } = await serverSupabase
                .from('books')
                .select('id, title, author, telegram_post_id')
                .not('telegram_post_id', 'is', null)
                .is('telegram_file_id', null)
                .is('file_url', null);
            
            if (error) {
                console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤:', error);
                return {
                    processed: 0,
                    linked: 0,
                    skipped: 0,
                    errors: 1
                };
            }
            
            const validBooks = booksWithoutFiles?.filter(book => 
                (book as { title: string }).title && (book as { title: string }).title.trim() !== '' && 
                (book as { author: string }).author && (book as { author: string }).author.trim() !== ''
            ) || [];
            
            if (validBooks.length === 0) {
                console.log('  ‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ –∏–º–µ—é—Ç —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞');
                return {
                    processed: 0,
                    linked: 0,
                    skipped: 0,
                    errors: 0
                };
            }
            
            console.log(`  üìö –ù–∞–π–¥–µ–Ω–æ ${validBooks.length} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ (—Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –∞–≤—Ç–æ—Ä–∞–º–∏)`);
            
            const filesToProcess = await this.fileService.getFilesToProcess(1000);
            console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${filesToProcess.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
            
            let processed = 0;
            let linked = 0;
            let skipped = 0;
            let errors = 0;
            
            for (const book of validBooks) {
                const typedBook = book as Book;
                console.log(`\n  üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: "${typedBook.title}" –∞–≤—Ç–æ—Ä–∞ ${typedBook.author}`);
                
                try {
                    const matchingFile = this.findMatchingFile(typedBook, filesToProcess);
                    
                    if (matchingFile) {
                        console.log(`    üì® –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: ${matchingFile.filename}`);
                        console.log(`    üì® Message ID —Ñ–∞–π–ª–∞: ${matchingFile.messageId}`);
                        
                        const result = await this.fileService!.processSingleFileById(parseInt(matchingFile.messageId as string, 10));
                        
                        processed++;
                        
                        if (result.success && !result.skipped) {
                            console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω`);
                            linked++;
                        } else if (result.skipped) {
                            console.log(`    ‚ö†Ô∏è  –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω: ${result.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
                            skipped++;
                        } else {
                            console.log(`    ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω: ${result.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
                            skipped++;
                        }
                    } else {
                        console.log(`    ‚ö†Ô∏è  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        skipped++;
                    }
                } catch (error) {
                    console.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏:`, error);
                    errors++;
                }
            }
            
            return {
                processed,
                linked,
                skipped,
                errors
            };
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
            return {
                processed: 0,
                linked: 0,
                skipped: 0,
                errors: 1
            };
        }
    }

    private findMatchingFile(book: Book, files: any[]): any | null {
        if (!book.title || !book.author || book.title.trim() === '' || book.author.trim() === '') {
            console.log(`    Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return null;
        }
        
        console.log(`    üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);
        
        let bestMatch: any | null = null;
        let bestScore = 0;
        
        for (const file of files) {
            if (!file.filename) continue;
            
            const filename = file.filename.normalize('NFC').toLowerCase();
            const bookTitle = book.title.normalize('NFC').toLowerCase();
            const bookAuthor = book.author.normalize('NFC').toLowerCase();
            
            let score = 0;
            
            if (filename.includes(bookTitle.replace(/\s+/g, '_'))) {
                score += 20;
            }
            
            if (filename.includes(bookAuthor.replace(/\s+/g, '_'))) {
                score += 20;
            }
            
            const titleInFilename = filename.includes(bookTitle.replace(/\s+/g, '_'));
            const authorInFilename = filename.includes(bookAuthor.replace(/\s+/g, '_'));
            
            if (titleInFilename && authorInFilename) {
                score += 30;
            }
            
            const bookTitleWords = bookTitle.split(/\s+/).filter(word => word.length > 2);
            let titleWordsMatchCount = 0;
            
            for (const word of bookTitleWords) {
                if (filename.includes(word)) {
                    titleWordsMatchCount++;
                }
            }
            
            if (bookTitleWords.length > 0 && titleWordsMatchCount / bookTitleWords.length >= 0.5) {
                score += 15;
            }
            
            const falsePositiveKeywords = [
                '–∏—Å—á–µ–∑–Ω—É–≤—à', '—É–º–∏—Ä–∞—é—â', '—Å–º–µ—Ä—Ç—å', '–æ–∫—Å—Ñ–æ—Ä–¥—Å–∫', '–∫–æ–Ω—Å—É–ª', '–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫', 
                '–ª–æ–≥–æ—Å–æ–≤', '–Ω–∞–ø—Ä—è–∂–µ–Ω', '–¥–≤—É–µ–¥–∏', '–º–æ—Ä—Å–∫', '—Å–ª–∞–≤—è–Ω—Å–∫'
            ];
            
            const bookTitleContainsFalsePositive = falsePositiveKeywords.some(keyword => 
                bookTitle.includes(keyword) && !filename.includes(keyword)
            );
            
            const filenameContainsFalsePositive = falsePositiveKeywords.some(keyword => 
                filename.includes(keyword) && !bookTitle.includes(keyword)
            );
            
            if (bookTitleContainsFalsePositive || filenameContainsFalsePositive) {
                score -= 20;
            }
            
            const titleMatchThreshold = Math.floor(bookTitle.length * 0.8);
            if (titleMatchThreshold > 0) {
                const partialTitle = bookTitle.substring(0, Math.min(titleMatchThreshold, bookTitle.length));
                if (filename.includes(partialTitle.replace(/\s+/g, '_'))) {
                    score += 10;
                }
            }
            
            const authorMatchThreshold = Math.floor(bookAuthor.length * 0.8);
            if (authorMatchThreshold > 0) {
                const partialAuthor = bookAuthor.substring(0, Math.min(authorMatchThreshold, bookAuthor.length));
                if (filename.includes(partialAuthor.replace(/\s+/g, '_'))) {
                    score += 10;
                }
            }
            
            const searchTerms = [...bookTitleWords, ...bookAuthor.split(/\s+/).filter(word => word.length > 2)];
            for (const term of searchTerms) {
                if (filename.includes(term)) {
                    score += 5;
                }
            }
            
            const filenameWords = filename.toLowerCase().split(/[_\-\s]+/).filter((word: string) => word.length > 2);
            let allWordsInTitle = true;
            let allWordsInAuthor = true;
            let wordsFoundCount = 0;
            let titleWordsFound = 0;
            let authorWordsFound = 0;
            
            for (const word of filenameWords) {
                if (bookTitle.includes(word)) {
                    wordsFoundCount++;
                    titleWordsFound++;
                } else {
                    allWordsInTitle = false;
                }
                if (bookAuthor.includes(word)) {
                    wordsFoundCount++;
                    authorWordsFound++;
                } else {
                    allWordsInAuthor = false;
                }
            }
            
            if (allWordsInTitle || allWordsInAuthor || wordsFoundCount > 0) {
                const wordBonus = Math.min(30, wordsFoundCount * 5);
                score += wordBonus;
                
                if (titleWordsFound > 0 && authorWordsFound > 0) {
                    score += 10;
                }
            }
            
            if (allWordsInTitle && allWordsInAuthor) {
                score += 20;
            }
            
            if (score > bestScore && score >= 30) {
                bestScore = score;
                bestMatch = file;
            }
        }
        
        if (bestMatch && bestScore >= 30) {
            console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${bestScore}: ${bestMatch.filename}`);
            return bestMatch;
        }
        
        console.log(`    ‚ö†Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω–æ–µ`);
        return null;
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    private async shutdown(): Promise<void> {
        console.log('\nüîå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤...');
        
        try {
            if (this.fileService) {
                await this.fileService.shutdown();
            }
        } catch (error) {
            console.error('  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ file service:', error);
        }
        
        console.log('  ‚úÖ –ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏" –ø–æ 100 –∑–∞ —Ä–∞–∑
     */
    private async extractAllFilesFromArchive(): Promise<void> {
        console.log('üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ê—Ä—Ö–∏–≤ –¥–ª—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏"...');
        
        try {
            if (!this.fileService) {
                throw new Error('File service not initialized');
            }
            
            const batchSize = 100;
            let totalProcessed = 0;
            let hasMoreFiles = true;
            let offsetId: number | undefined = undefined;
            let batchNumber = 1;
            
            while (hasMoreFiles) {
                console.log(`üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${batchNumber} (–ø–æ ${batchSize} —Ñ–∞–π–ª–æ–≤)...`);
                
                try {
                    const files = await this.fileService.getFilesToProcess(batchSize, offsetId);
                    
                    if (files.length === 0) {
                        console.log('  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã');
                        hasMoreFiles = false;
                        break;
                    }
                    
                    console.log(`  üìä –ü–æ–ª—É—á–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –±–∞—Ç—á–µ ${batchNumber}`);
                    totalProcessed += files.length;
                    
                    const fileIds = files
                        .map(file => parseInt(String((file as { messageId: string }).messageId), 10))
                        .filter(id => !isNaN(id));
                    
                    if (fileIds.length > 0) {
                        offsetId = Math.min(...fileIds) - 1;
                    } else {
                        hasMoreFiles = false;
                        break;
                    }
                    
                    console.log(`  üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed} —Ñ–∞–π–ª–æ–≤`);
                    batchNumber++;
                    
                    await new Promise(resolve => setTimeout(resolve, 2000));
                } catch (batchError) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ ${batchNumber}:`, batchError);
                    batchNumber++;
                }
            }
            
            console.log(`\nüéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed} —Ñ–∞–π–ª–æ–≤`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞:', error);
        }
    }
}