import { TelegramMetadataService } from './metadata-service';
import { TelegramFileService } from './file-service';
import { serverSupabase } from '../serverSupabase';
import { TelegramService } from './client';
import { MetadataParser, BookMetadata, Message } from './parser';
import { EnhancedFileProcessingService } from './file-processing-service-enhanced';
import { FileBookMatcherService } from '../file-book-matcher-service';
import { putObject } from '../s3-service';

interface Book {
    id: string;
    title: string;
    author: string;
    telegram_post_id: number | null;
    file_url?: string | null;
    telegram_file_id?: string | null;
}

export class BookWormService {
    private static instance: BookWormService;
    private telegramService: TelegramService | null = null;
    private metadataService: TelegramMetadataService | null = null;
    private fileService: TelegramFileService | null = null;
    private enhancedFileService: EnhancedFileProcessingService | null = null;

    private constructor() {}

    public static async getInstance(): Promise<BookWormService> {
        if (!BookWormService.instance) {
            BookWormService.instance = new BookWormService();
            await BookWormService.instance.initialize();
        }
        return BookWormService.instance;
    }

    private async initialize() {
        this.telegramService = await TelegramService.getInstance();
        this.metadataService = await TelegramMetadataService.getInstance();
        this.fileService = await TelegramFileService.getInstance();
        this.enhancedFileService = await EnhancedFileProcessingService.getInstance();
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å BookWorm –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    public async startBookWorm(): Promise<void> {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ BookWorm —Å–µ—Ä–≤–∏—Å–∞...');
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
            const allFilesToProcess = await this.fileService!.getFilesToProcess(2000); // –ó–∞–≥—Ä—É–∂–∞–µ–º 2000 —Ñ–∞–π–ª–æ–≤
            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allFilesToProcess.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            console.log('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
            const { data: books, error: booksError } = await serverSupabase
                .from('books')
                .select('id, title, author, telegram_post_id, file_url, telegram_file_id')
                .not('title', 'is', null)
                .not('author', 'is', null);

            if (booksError) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥: ${booksError.message}`);
            }

            if (!books || books.length === 0) {
                console.log('‚ö†Ô∏è  –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
                return;
            }

            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è`);

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            let processedCount = 0;
            let matchedCount = 0;

            for (const book of books) {
                processedCount++;
                console.log(`
üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (${processedCount}/${books.length})`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏
                if (book.file_url || book.telegram_file_id) {
                    console.log(`  ‚úÖ –£ –∫–Ω–∏–≥–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    continue;
                }

                // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏
                const matchingFile = await this.findMatchingFile(book, allFilesToProcess);
                
                if (matchingFile) {
                    console.log(`    üì® –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: ${matchingFile.filename}`);
                    console.log(`    üì® Message ID —Ñ–∞–π–ª–∞: ${matchingFile.messageId}`);
                    
                    try {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        const result = await this.enhancedFileService!.processSingleFileById(parseInt(matchingFile.messageId as string, 10));
                        console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ`);
                        matchedCount++;
                    } catch (processError) {
                        console.error(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:`, processError);
                    }
                } else {
                    console.log(`  ‚ö†Ô∏è  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
            }

            console.log(`
üèÅ BookWorm –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${matchedCount}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ BookWorm —Å–µ—Ä–≤–∏—Å–µ:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    private async findMatchingFile(book: Book, files: any[]): Promise<any | null> {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
        if (!book.title || !book.author || book.title.trim() === '' || book.author.trim() === '') {
            console.log(`    Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return null;
        }

        console.log(`    üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        const filesForMatching = files.map((file: any) => ({
            message_id: file.messageId || file.message_id || 0,
            file_name: file.filename || '',
            mime_type: file.mime_type || 'unknown',
            file_size: file.file_size || file.size || undefined
        }));

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        const matches = FileBookMatcherService.findBestMatchesForBook(
            { id: book.id, title: book.title, author: book.author }, 
            filesForMatching
        );

        if (matches.length > 0) {
            // –ë–µ—Ä–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–æ–Ω–æ —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)
            const bestMatch = matches[0];
            
            // –ù–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            const sourceFile = files.find((file: any) => 
                (file.messageId && file.messageId === bestMatch.file.message_id) ||
                (file.message_id && file.message_id === bestMatch.file.message_id)
            );
            
            if (sourceFile && bestMatch.score >= 65) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø–æ—Ä–æ–≥, —á—Ç–æ –∏ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ
                console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${bestMatch.score}: ${sourceFile.filename}`);
                console.log(`üìä –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:`);
                for (let i = 0; i < Math.min(3, matches.length); i++) {
                    const match = matches[i];
                    const matchSourceFile = files.find((file: any) => 
                        (file.messageId && file.messageId === match.file.message_id) ||
                        (file.message_id && file.message_id === match.file.message_id)
                    );
                    if (matchSourceFile) {
                        console.log(`    ${i + 1}. "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (—Å—á–µ—Ç: ${match.score})`);
                    }
                }
                
                return sourceFile;
            } else if (sourceFile) {
                console.log(`    ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –Ω–æ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (${bestMatch.score} < 65): ${sourceFile.filename}`);
            }
        }

        console.log(`    ‚ö†Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω–æ–µ`);
        return null;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
     */
    private async processMetadataBatch(messages: unknown[]): Promise<{
        processed: number;
        added: number;
        updated: number;
        errors: number;
    }> {
        // –ú–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        console.log('Processing metadata batch...');
        return {
            processed: 0,
            added: 0,
            updated: 0,
            errors: 0
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
     */
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
     * @param fullSync –ï—Å–ª–∏ true, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
     */
    public async loadMetadataFromTelegram(fullSync: boolean = false): Promise<void> {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram...');
        try {
            if (!this.telegramService || !this.metadataService) {
                throw new Error('TelegramService –∏–ª–∏ MetadataService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const channel = await this.telegramService.getMetadataChannel();
            console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–∞–Ω–∞–ª—É: ${channel.title || channel.username}`);

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const limit = fullSync ? 5000 : 1000; // –î–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç
            const { processed, added, updated, errors } = await this.metadataService.syncBooks(limit);

            console.log(`
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:`);
            console.log(`  –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${processed}`);
            console.log(`  –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ${added}`);
            console.log(`  –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–Ω–∏–≥: ${updated}`);
            console.log(`  –û—à–∏–±–æ–∫: ${errors}`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ Telegram –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö —Å –∫–Ω–∏–≥–∞–º–∏
     */
    public async loadAndMatchFiles(): Promise<void> {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
        try {
            if (!this.fileService) {
                throw new Error('FileService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ Telegram
            console.log('üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
            const files = await this.fileService.getFilesToProcess(2000); // –ó–∞–≥—Ä—É–∂–∞–µ–º 2000 —Ñ–∞–π–ª–æ–≤
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);

            // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
            const { data: booksWithoutFiles, error: booksError } = await serverSupabase
                .from('books')
                .select('id, title, author')
                .is('file_url', null)
                .not('title', 'is', null)
                .not('author', 'is', null);

            if (booksError) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${booksError.message}`);
            }

            console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${booksWithoutFiles?.length || 0} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤`);

            if (booksWithoutFiles && booksWithoutFiles.length > 0 && files.length > 0) {
                // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
                for (const book of booksWithoutFiles) {
                    console.log(`
üìñ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);

                    const matchingFile = await this.findMatchingFile(book, files);
                    if (matchingFile) {
                        console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${matchingFile.filename}`);
                        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∫–Ω–∏–≥–æ–π
                    } else {
                        console.log(`  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    }
                }
            } else {
                console.log('–ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥ (—Ä–µ–∂–∏–º update)
     */
    public async runUpdateSync(): Promise<any> {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            if (!this.fileService || !this.metadataService || !this.telegramService) {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BookWormService —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ getInstance().');
            }

            // 1. –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            console.log('üîç –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
            const { data: lastProcessed, error: lastProcessedError } = await serverSupabase
                .from('telegram_processed_messages')
                .select('message_id')
                .not('message_id', 'is', null)
                .order('message_id', { ascending: false })
                .limit(1)
                .single();

            let lastMessageId: number | undefined = undefined;
            if (lastProcessed && lastProcessed.message_id) {
                lastMessageId = parseInt(lastProcessed.message_id, 10);
                console.log(`  üìå –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${lastMessageId}`);
            } else {
                console.log('  üÜï –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –Ω–∞—á–∞–ª–∞, –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const channel = await this.telegramService.getMetadataChannel();

            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel.id !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);

            // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
            console.log('üì• –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ...');
            const messages = await this.telegramService.getMessages(channelId, 1, undefined);
            let maxMessageId = 0;
            if (messages.length > 0) {
                const anyMsg = messages[0] as unknown as { [key: string]: unknown };
                maxMessageId = parseInt(String(anyMsg.id), 10);
                console.log(`  üìå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: ${maxMessageId}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (lastMessageId !== undefined && maxMessageId <= lastMessageId) {
                console.log('  ‚ÑπÔ∏è  –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.');
                return {
                    processed: 0,
                    added: 0,
                    updated: 0,
                    matched: 0,
                    message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: ${lastMessageId}`
                };
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            // –í Telegram API offsetId –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å ID –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
            // –ü–æ—ç—Ç–æ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å ID –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ, 
            // –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–µ, —á—Ç–æ –∏–º–µ—é—Ç ID –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
            console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å ID –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ (${lastMessageId})...`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º ID)
            const newMessages = await this.telegramService.getMessages(channelId, 1000, undefined);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID –±–æ–ª—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
            const filteredMessages = newMessages.filter(msg => {
                const anyMsg = msg as unknown as { [key: string]: unknown };
                const currentMsgId = parseInt(String(anyMsg.id), 10);
                return currentMsgId > (lastMessageId || 0);
            });
            
            console.log(`‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredMessages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑ ${newMessages.length} –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö)`);
            
            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (filteredMessages.length === 0) {
                console.log('  ‚ÑπÔ∏è  –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.');
                return {
                    processed: 0,
                    added: 0,
                    updated: 0,
                    matched: 0,
                    message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: ${lastMessageId}`
                };
            }
            


            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥
            console.log('üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥...');
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const metadataList: BookMetadata[] = [];
            
            for (const msg of filteredMessages) {
                const anyMsg = msg as unknown as { [key: string]: unknown };
                console.log(`üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                if (!(msg as { text?: string }).text) {
                    console.log(`  ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    const { data: processedCheck, error: checkError } = await serverSupabase
                        .from('telegram_processed_messages')
                        .select('message_id')
                        .eq('message_id', String(anyMsg.id));
                    
                    if (checkError) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, checkError);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                    if (!processedCheck || processedCheck.length === 0) {
                        const { error: insertError } = await serverSupabase
                            .from('telegram_processed_messages')
                            .insert({
                                message_id: String(anyMsg.id),
                                channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
                                processed_at: new Date().toISOString()
                            });
                        
                        if (insertError) {
                            console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ telegram_processed_messages –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, insertError);
                        }
                    } else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        const { error: updateError } = await serverSupabase
                            .from('telegram_processed_messages')
                            .update({
                                channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
                                processed_at: new Date().toISOString()
                            })
                            .eq('message_id', String(anyMsg.id));
                        
                        if (updateError) {
                            console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_processed_messages –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, updateError);
                        }
                    }
                    
                    continue;
                }

                // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const metadata = MetadataParser.parseMessage((msg as { text: string }).text);
                // –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata.messageId = anyMsg.id as number;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
                if (!metadata.title || !metadata.author || metadata.title.trim() === '' || metadata.author.trim() === '') {
                    console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä)`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    const { data: processedCheck, error: checkError } = await serverSupabase
                        .from('telegram_processed_messages')
                        .select('message_id')
                        .eq('message_id', String(anyMsg.id));
                    
                    if (checkError) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, checkError);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                    if (!processedCheck || processedCheck.length === 0) {
                        const { error: insertError } = await serverSupabase
                            .from('telegram_processed_messages')
                            .insert({
                                message_id: String(anyMsg.id),
                                channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
                                processed_at: new Date().toISOString()
                            });
                        
                        if (insertError) {
                            console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ telegram_processed_messages –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, insertError);
                        }
                    } else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        const { error: updateError } = await serverSupabase
                            .from('telegram_processed_messages')
                            .update({
                                channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
                                processed_at: new Date().toISOString()
                            })
                            .eq('message_id', String(anyMsg.id));
                        
                        if (updateError) {
                            console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_processed_messages –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, updateError);
                        }
                    }
                    
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–∏–≥–∏ –≤ –ë–î –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–µ–¥–∏–∞
                let bookExists = false;
                let existingBookId = null;
                try {
                    // @ts-ignore
                    const { data: foundBooks, error: findError } = await serverSupabase
                        .from('books')
                        .select('id')
                        .eq('title', metadata.title)
                        .eq('author', metadata.author);

                    if (!findError && foundBooks && foundBooks.length > 0) {
                        bookExists = true;
                        existingBookId = (foundBooks[0] as { id: string }).id;
                        console.log(`  ‚ÑπÔ∏è –ö–Ω–∏–≥–∞ "${metadata.title}" –∞–≤—Ç–æ—Ä–∞ ${metadata.author} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    }
                } catch (checkError) {
                    console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏:`, checkError);
                }

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (bookExists) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    const { data: processedCheck, error: checkError } = await serverSupabase
                        .from('telegram_processed_messages')
                        .select('message_id')
                        .eq('message_id', String(anyMsg.id));
                    
                    if (checkError) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, checkError);
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                    if (!processedCheck || processedCheck.length === 0) {
                        const { error: insertError } = await serverSupabase
                            .from('telegram_processed_messages')
                            .insert({
                                message_id: String(anyMsg.id),
                                channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
                                book_id: existingBookId,
                                processed_at: new Date().toISOString()
                            });
                        
                        if (insertError) {
                            console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ telegram_processed_messages –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, insertError);
                        }
                    } else {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        const { error: updateError } = await serverSupabase
                            .from('telegram_processed_messages')
                            .update({
                                channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
                                book_id: existingBookId,
                                processed_at: new Date().toISOString()
                            })
                            .eq('message_id', String(anyMsg.id));
                        
                        if (updateError) {
                            console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_processed_messages –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, updateError);
                        }
                    }
                    
                    continue;
                }

                // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, —ç—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞
                // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –æ–±–ª–æ–∂–µ–∫ –∏–∑ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                const coverUrls: string[] = [];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                if (anyMsg.media) {
                    console.log(`  üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ ${anyMsg.id} (—Ç–∏–ø: ${(anyMsg.media as { className: string }).className})`);
                    
                    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
                    const downloadWithRetry = async (media: unknown, maxRetries = 3) => {
                        for (let attempt = 1; attempt <= maxRetries; attempt++) {
                            try {
                                console.log(`    ‚Üí –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${attempt}/${maxRetries}...`);
                                if (!this.telegramService) {
                                    throw new Error('Telegram client not initialized');
                                }
                                const result = await Promise.race([
                                    this.telegramService.downloadMedia(media),
                                    new Promise<never>((_, reject) => 
                                        setTimeout(() => reject(new Error(`Timeout: Downloading media took too long (attempt ${attempt}/${maxRetries})`)), 60000)) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 60 —Å–µ–∫—É–Ω–¥
                                ]);
                                return result;
                            } catch (err: unknown) {
                                console.warn(`    ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, err instanceof Error ? err.message : 'Unknown error');
                                if (attempt === maxRetries) {
                                    throw err; // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                                }
                                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                                await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
                            }
                        }
                    };
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ–±-–ø—Ä–µ–≤—å—é (MessageMediaWebPage) - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π –¥–ª—è –æ–±–ª–æ–∂–µ–∫
                    if ((anyMsg.media as { className: string }).className === 'MessageMediaWebPage' && (anyMsg.media as { webpage?: { photo?: unknown } }).webpage?.photo) {
                        console.log(`  ‚Üí –í–µ–±-–ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é...`);
                            const result = await downloadWithRetry((anyMsg.media as { webpage: { photo: unknown } }).webpage.photo);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                const coversBucket = process.env.S3_COVERS_BUCKET_NAME;
                                if (!coversBucket) {
                                  throw new Error('S3_COVERS_BUCKET_NAME environment variable is not set.');
                                }
                                await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                                const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err: unknown) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –∏–∑ –≤–µ–±-–ø—Ä–µ–≤—å—é:`, err instanceof Error ? err.message : 'Unknown error');
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ (MessageMediaPhoto)
                    else if ((anyMsg.media as { photo?: unknown }).photo) {
                        console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ`);
                        try {
                            console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ...`);
                            const result = await downloadWithRetry(msg);
                            const photoBuffer = result instanceof Buffer ? result : null;
                            if (photoBuffer) {
                                const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                const coversBucket = process.env.S3_COVERS_BUCKET_NAME;
                                if (!coversBucket) {
                                  throw new Error('S3_COVERS_BUCKET_NAME environment variable is not set.');
                                }
                                await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                                const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                                coverUrls.push(photoUrl);
                                console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                            } else {
                                console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                            }
                        } catch (err: unknown) {
                            console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err instanceof Error ? err.message : 'Unknown error');
                        }
                    }
                    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    else if ((anyMsg.media as { document?: unknown }).document) {
                        const mimeType = (anyMsg.media as { document: { mimeType?: string } }).document.mimeType;
                        if (mimeType && mimeType.startsWith('image/')) {
                            console.log(`  ‚Üí –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç: ${mimeType})`);
                            try {
                                console.log(`  ‚Üí –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...`);
                                const result = await downloadWithRetry(msg);
                                const photoBuffer = result instanceof Buffer ? result : null;
                                if (photoBuffer) {
                                    const photoKey = `${anyMsg.id}_${Date.now()}.jpg`;
                                    console.log(`  ‚Üí –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Storage: covers/${photoKey}`);
                                    const coversBucket = process.env.S3_COVERS_BUCKET_NAME;
                                    if (!coversBucket) {
                                      throw new Error('S3_COVERS_BUCKET_NAME environment variable is not set.');
                                    }
                                    await putObject(photoKey, Buffer.from(photoBuffer), coversBucket);
                                    const photoUrl = `https://${coversBucket}.s3.cloud.ru/${photoKey}`;
                                    coverUrls.push(photoUrl);
                                    console.log(`  ‚úÖ –û–±–ª–æ–∂–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${photoUrl}`);
                                } else {
                                    console.warn(`  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä)`);
                                }
                            } catch (err: unknown) {
                                console.error(`  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏:`, err instanceof Error ? err.message : 'Unknown error');
                            }
                        }
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
                metadataList.push({
                    ...metadata,
                    coverUrls: coverUrls.length > 0 ? coverUrls : metadata.coverUrls || []
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                const { data: processedCheck, error: checkError } = await serverSupabase
                    .from('telegram_processed_messages')
                    .select('message_id')
                    .eq('message_id', String(anyMsg.id));
                
                if (checkError) {
                    console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, checkError);
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_processed_messages, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
                if (!processedCheck || processedCheck.length === 0) {
                    const { error: insertError } = await serverSupabase
                        .from('telegram_processed_messages')
                        .insert({
                            message_id: String(anyMsg.id),
                            channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
                            processed_at: new Date().toISOString()
                        });
                    
                    if (insertError) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ telegram_processed_messages –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, insertError);
                    }
                } else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    const { error: updateError } = await serverSupabase
                        .from('telegram_processed_messages')
                        .update({
                            channel: process.env.TELEGRAM_METADATA_CHANNEL_ID || '', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ null
                            processed_at: new Date().toISOString()
                        })
                        .eq('message_id', String(anyMsg.id));
                    
                    if (updateError) {
                        console.warn(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_processed_messages –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${anyMsg.id}:`, updateError);
                    }
                }
            }

            console.log(`üìä –í—Å–µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${metadataList.length}`);
            
            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
            console.log('üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π...');
            const resultImport = await this.metadataService.importMetadataWithDeduplication(metadataList);
            
            console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');

            // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å —Ñ–∞–π–ª–∞–º–∏ (–≤—Å–µ 4249 –±–∞—Ç—á–∞–º–∏ –ø–æ 1000)
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
            const allFilesToProcess = [];
            let offsetIdFiles: number | undefined = undefined; // –î–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
            let hasMoreFiles = true;
            let fileBatchIndex = 0;
            
            while (hasMoreFiles) {
                fileBatchIndex++;
                console.log(`üì• –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á —Ñ–∞–π–ª–æ–≤ ${fileBatchIndex} –∏–∑ Telegram (–ª–∏–º–∏—Ç: 1000)...`);
                const filesBatch = await this.fileService.getFilesToProcess(1000, offsetIdFiles);
                
                if (filesBatch.length === 0) {
                    console.log('  üìå –ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                    break;
                }
                
                console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${filesBatch.length} —Ñ–∞–π–ª–æ–≤ –≤ –±–∞—Ç—á–µ ${fileBatchIndex}`);
                allFilesToProcess.push(...filesBatch);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offsetIdFiles –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
                if (filesBatch.length < 1000) {
                    hasMoreFiles = false;
                } else {
                    // –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    const messageIds = filesBatch
                        .map(item => parseInt(String(item.messageId), 10))
                        .filter(id => !isNaN(id) && id > 0);
                    
                    if (messageIds.length > 0) {
                        offsetIdFiles = Math.min(...messageIds) - 1;
                    } else {
                        hasMoreFiles = false;
                    }
                }
            }
            
            console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFilesToProcess.length}`);

            // 4. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–∏–≥–∏ –≤ –ë–î –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            console.log('üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            const { data: booksWithoutFiles, error: booksError } = await serverSupabase
                .from('books')
                .select('id, title, author, telegram_post_id, file_url, telegram_file_id')
                .is('file_url', null) // –¢–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                .not('title', 'is', null)
                .not('author', 'is', null);

            if (booksError) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${booksError.message}`);
            }

            if (!booksWithoutFiles || booksWithoutFiles.length === 0) {
                console.log('‚ö†Ô∏è  –ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
                return { processed: resultImport.processed, added: resultImport.added, updated: resultImport.updated, matched: 0, message: `Update sync completed. Processed ${resultImport.processed} books, added ${resultImport.added}, updated ${resultImport.updated}, no files matched.` };
            }

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${booksWithoutFiles.length} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è`);

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–∞ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            let processedCount = 0;
            let matchedCount = 0;

            for (const book of booksWithoutFiles) {
                processedCount++;
                console.log(`
üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (${processedCount}/${booksWithoutFiles.length})`);

                // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏, –∏—Å–ø–æ–ª—å–∑—É—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
                const matchingFile = await this.findMatchingFile(book, allFilesToProcess);
                
                if (matchingFile) {
                    console.log(`    üì® –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: ${matchingFile.filename}`);
                    console.log(`    üì® Message ID —Ñ–∞–π–ª–∞: ${matchingFile.messageId}`);
                    
                    try {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        const result = await this.enhancedFileService!.processSingleFileById(parseInt(matchingFile.messageId as string, 10));
                        console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ`);
                        matchedCount++;
                    } catch (processError) {
                        console.error(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:`, processError);
                    }
                } else {
                    console.log(`  ‚ö†Ô∏è  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
            }

            console.log(`
üèÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
            
            return {
                processed: resultImport.processed,
                added: resultImport.added,
                updated: resultImport.updated,
                matched: matchedCount,
                lastProcessedMessageId: lastMessageId,
                message: `Update sync completed. Processed ${resultImport.processed} books, added ${resultImport.added}, updated ${resultImport.updated}, matched ${matchedCount} files. Started from message ID: ${lastMessageId || 'beginning'}`
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–Ω–∏–≥ (—Ä–µ–∂–∏–º full)
     */
    public async runFullSync(): Promise<any> {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–Ω–∏–≥...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            if (!this.fileService || !this.metadataService || !this.telegramService) {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BookWormService —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ getInstance().');
            }

            // 1. –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            console.log('üì• –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
            const indexResult = await this.metadataService.indexAllMessages(10000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            
            // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å —Ñ–∞–π–ª–∞–º–∏ (–≤—Å–µ 4249 –±–∞—Ç—á–∞–º–∏ –ø–æ 1000)
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram...');
            const allFilesToProcess = [];
            let offsetIdFiles: number | undefined = undefined;
            let hasMoreFiles = true;
            let fileBatchIndex = 0;
            
            while (hasMoreFiles) {
                fileBatchIndex++;
                console.log(`üì• –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á —Ñ–∞–π–ª–æ–≤ ${fileBatchIndex} –∏–∑ Telegram (–ª–∏–º–∏—Ç: 1000)...`);
                const filesBatch = await this.fileService.getFilesToProcess(1000, offsetIdFiles);
                
                if (filesBatch.length === 0) {
                    console.log('  üìå –ë–æ–ª—å—à–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
                    break;
                }
                
                console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${filesBatch.length} —Ñ–∞–π–ª–æ–≤ –≤ –±–∞—Ç—á–µ ${fileBatchIndex}`);
                allFilesToProcess.push(...filesBatch);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offsetIdFiles –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
                if (filesBatch.length < 1000) {
                    hasMoreFiles = false;
                } else {
                    // –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    const messageIds = filesBatch
                        .map(item => parseInt(String(item.messageId), 10))
                        .filter(id => !isNaN(id) && id > 0);
                    
                    if (messageIds.length > 0) {
                        offsetIdFiles = Math.min(...messageIds) - 1;
                    } else {
                        hasMoreFiles = false;
                    }
                }
            }
            
            console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFilesToProcess.length}`);

            // 3. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–∏–≥–∏ –≤ –ë–î –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∏–≤—è–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            console.log('üìö –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            const { data: booksWithoutFiles, error: booksError } = await serverSupabase
                .from('books')
                .select('id, title, author, telegram_post_id, file_url, telegram_file_id')
                .is('file_url', null) // –¢–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                .not('title', 'is', null)
                .not('author', 'is', null);

            if (booksError) {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${booksError.message}`);
            }

            if (!booksWithoutFiles || booksWithoutFiles.length === 0) {
                console.log('‚ö†Ô∏è  –ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è');
                return { processed: indexResult.indexed, added: 0, updated: 0, matched: 0, message: `Full sync completed. Indexed ${indexResult.indexed} messages, no books without files found for file matching.` };
            }

            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${booksWithoutFiles.length} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è`);

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–∞ –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            let processedCount = 0;
            let matchedCount = 0;

            for (const book of booksWithoutFiles) {
                processedCount++;
                console.log(`
üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author} (${processedCount}/${booksWithoutFiles.length})`);

                // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏, –∏—Å–ø–æ–ª—å–∑—É—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
                const matchingFile = await this.findMatchingFile(book, allFilesToProcess);
                
                if (matchingFile) {
                    console.log(`    üì® –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: ${matchingFile.filename}`);
                    console.log(`    üì® Message ID —Ñ–∞–π–ª–∞: ${matchingFile.messageId}`);
                    
                    try {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        const result = await this.enhancedFileService!.processSingleFileById(parseInt(matchingFile.messageId as string, 10));
                        console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ`);
                        matchedCount++;
                    } catch (processError) {
                        console.error(`    ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:`, processError);
                    }
                } else {
                    console.log(`  ‚ö†Ô∏è  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }
            }

            console.log(`
üèÅ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`);
            
            return {
                processed: indexResult.indexed,
                added: 0, // –í —Ä–µ–∂–∏–º–µ full –º—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏, –∞ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                updated: 0, // –í —Ä–µ–∂–∏–º–µ full –º—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥–∏, –∞ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                matched: matchedCount,
                message: `Full sync completed. Indexed ${indexResult.indexed} messages, matched ${matchedCount} files.`
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    public async shutdown(): Promise<void> {
        console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ BookWorm —Å–µ—Ä–≤–∏—Å–∞...');
        
        if (this.telegramService) {
            await this.telegramService.disconnect();
        }
        
        console.log('‚úÖ BookWorm —Å–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
}