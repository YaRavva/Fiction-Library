import { TelegramMetadataService } from './metadata-service';
import { TelegramFileService } from './file-service';
import { serverSupabase } from '../serverSupabase';
import { TelegramService } from './client';
import { uploadFileToStorage } from '../supabase';
import { MetadataParser, BookMetadata } from './parser';

interface Book {
    id: string;
    title: string;
    author: string;
    telegram_post_id: number | null;
    file_url?: string | null;
    telegram_file_id?: string | null;
}

interface ProcessedMessage {
    message_id: string;
    processed_at: string;
}

interface SyncResult {
    metadata: {
        processed: number;
        added: number;
        updated: number;
        skipped: number;
        errors: number;
    };
    files: {
        processed: number;
        linked: number;
        skipped: number;
        errors: number;
    };
}

interface IndexResult {
    indexed: number;
    errors: number;
}

/**
 * –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram
 *
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
 * 1. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (ID —Å–æ–æ–±—â–µ–Ω–∏–π = telegram_post_id)
 * 2. –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (ID —Å–æ–æ–±—â–µ–Ω–∏–π = telegram_file_id)
 * 3. –°–≤—è–∑—å –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
 * 4. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞: –ø–æ–ª–Ω—ã–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
 */
export class BookWormService {
    private metadataService: TelegramMetadataService | null = null;
    private fileService: TelegramFileService | null = null;
    private telegramClient: TelegramService | null = null;

    constructor() {}

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã
     */
    private async initializeServices(): Promise<void> {
        if (!this.metadataService) {
            this.metadataService = await TelegramMetadataService.getInstance();
        }
        if (!this.fileService) {
            this.fileService = await TelegramFileService.getInstance();
        }
        if (!this.telegramClient) {
            this.telegramClient = await TelegramService.getInstance();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     * –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ‚Üí —Ñ–∞–π–ª—ã ‚Üí –ø—Ä–∏–≤—è–∑–∫–∞
     */
    public async runFullSync(): Promise<SyncResult> {
        console.log('üêã –ó–∞–ø—É—Å–∫ –ö–Ω–∏–∂–Ω–æ–≥–æ –ß–µ—Ä–≤—è –≤ —Ä–µ–∂–∏–º–µ –ü–û–õ–ù–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò...');

        try {
            await this.initializeServices();

            // –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            console.log('\nüìö –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...');
            const metadataResult = await this.loadAllMetadata();

            // –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            console.log('\nüìÅ –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...');
            const filesResult = await this.loadAllFiles();

            // –≠—Ç–∞–ø 3: –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫ –∫–Ω–∏–≥–∞–º —á–µ—Ä–µ–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–æ–∏—Å–∫
            console.log('\nüîó –≠—Ç–∞–ø 3: –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫ –∫–Ω–∏–≥–∞–º...');
            const linkingResult = await this.linkFilesToBooks();

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            const result: SyncResult = {
                metadata: metadataResult,
                files: {
                    processed: filesResult.processed,
                    linked: linkingResult.linked,
                    skipped: filesResult.skipped + linkingResult.skipped,
                    errors: filesResult.errors + linkingResult.errors
                }
            };

            console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–ù–ò–ñ–ù–û–ì–û –ß–ï–†–í–Ø (–ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø):');
            console.log('=====================================================');
            console.log(`üìö –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${metadataResult.processed}`);
            console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ: ${metadataResult.added}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${metadataResult.updated}`);
            console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${metadataResult.skipped}`);
            console.log(`   –û—à–∏–±–æ–∫: ${metadataResult.errors}`);
            console.log(`üìÅ –§–∞–π–ª—ã:`);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${filesResult.processed}`);
            console.log(`   –ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${linkingResult.linked}`);
            console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${filesResult.skipped + linkingResult.skipped}`);
            console.log(`   –û—à–∏–±–æ–∫: ${filesResult.errors + linkingResult.errors}`);

            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        } finally {
            await this.shutdown();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏)
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–∞—Ö
     */
    public async runUpdateSync(): Promise<SyncResult> {
        console.log('üêã –ó–∞–ø—É—Å–∫ –ö–Ω–∏–∂–Ω–æ–≥–æ –ß–µ—Ä–≤—è –≤ —Ä–µ–∂–∏–º–µ –û–ë–ù–û–í–õ–ï–ù–ò–Ø...');

        try {
            await this.initializeServices();

            // –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            console.log('\nüîç –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');
            const metadataResult = await this.loadNewMetadata();

            // –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            console.log('\nüîç –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');
            const filesResult = await this.loadNewFiles();

            // –≠—Ç–∞–ø 3: –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫ –∫–Ω–∏–≥–∞–º
            console.log('\nüîó –≠—Ç–∞–ø 3: –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫ –∫–Ω–∏–≥–∞–º...');
            const linkingResult = await this.linkFilesToBooks();

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            const result: SyncResult = {
                metadata: metadataResult,
                files: {
                    processed: filesResult.processed,
                    linked: linkingResult.linked,
                    skipped: filesResult.skipped + linkingResult.skipped,
                    errors: filesResult.errors + linkingResult.errors
                }
            };

            console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ö–ù–ò–ñ–ù–û–ì–û –ß–ï–†–í–Ø (–û–ë–ù–û–í–õ–ï–ù–ò–ï):');
            console.log('==============================================');
            console.log(`üìö –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:`);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${metadataResult.processed}`);
            console.log(`   –î–æ–±–∞–≤–ª–µ–Ω–æ: ${metadataResult.added}`);
            console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${metadataResult.updated}`);
            console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${metadataResult.skipped}`);
            console.log(`   –û—à–∏–±–æ–∫: ${metadataResult.errors}`);
            console.log(`üìÅ –§–∞–π–ª—ã:`);
            console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${filesResult.processed}`);
            console.log(`   –ü—Ä–∏–≤—è–∑–∞–Ω–æ: ${linkingResult.linked}`);
            console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${filesResult.skipped + linkingResult.skipped}`);
            console.log(`   –û—à–∏–±–æ–∫: ${filesResult.errors + linkingResult.errors}`);

            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
            throw error;
        } finally {
            await this.shutdown();
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–µ–∂–∏–º
     */
    public async runAutoSync(): Promise<SyncResult> {
        console.log('üêã –ó–∞–ø—É—Å–∫ –ö–Ω–∏–∂–Ω–æ–≥–æ –ß–µ—Ä–≤—è –≤ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ú —Ä–µ–∂–∏–º–µ...');
        
        try {
            await this.initializeServices();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            const needsFullSync = await this.checkIfFullSyncNeeded();
            
            if (needsFullSync) {
                console.log('\nüîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º...');
                return await this.runFullSync();
            } else {
                console.log('\nüîç –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
                return await this.runUpdateSync();
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
     */
    private async checkIfFullSyncNeeded(): Promise<boolean> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const { count, error } = await serverSupabase
                .from('telegram_processed_messages')
                .select('*', { count: 'exact', head: true });
                
            if (error) {
                console.error('  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
                return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            }
            
            // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω—É–∂–Ω–∞ –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            if (!count || count === 0) {
                console.log('  üÜï –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
                return true;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const hasMissingMessages = await this.checkForMissingMessages();
            if (hasMissingMessages) {
                console.log('  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è');
                return true;
            }
            
            console.log(`  ‚úÖ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${count} —Å–æ–æ–±—â–µ–Ω–∏–π, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
            return false;
        } catch (error) {
            console.error('  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ
     */
    private async checkForMissingMessages(): Promise<boolean> {
        try {
            if (!this.metadataService) {
                throw new Error('Metadata service not initialized');
            }
            
            console.log('  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            const allMessages = await this.getAllMessagesFromChannel();
            console.log(`  üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ: ${allMessages.length}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î
            const { data: processedMessages, error: processedError } = await serverSupabase
                .from('telegram_processed_messages')
                .select('message_id');
                
            if (processedError) {
                console.error('  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', processedError);
                return true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            }
            
            console.log(`  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: ${processedMessages?.length || 0}`);
            
            // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            const processedMessageIds = new Set(
                (processedMessages || []).map((msg: any) => parseInt(msg.message_id, 10))
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–ørocessed —Å–æ–æ–±—â–µ–Ω–∏—è
            let missingCount = 0;
            for (const message of allMessages) {
                const messageId = parseInt(String((message as any).id), 10);
                if (!processedMessageIds.has(messageId)) {
                    missingCount++;
                }
            }
            
            console.log(`  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${missingCount}`);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
            return missingCount > 0;
        } catch (error) {
            console.error('  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            return true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
     */
    private async getAllMessagesFromChannel(): Promise<unknown[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }
        
        try {
            console.log('  üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const channel = await this.telegramClient.getMetadataChannel();
            
            // Convert BigInteger to string for compatibility
            const channelId = typeof channel.id === 'object' && channel !== null ? 
                (channel.id as { toString: () => string }).toString() : 
                String(channel.id);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
            const allMessages = await this.telegramClient.getAllMessages(channelId, 100);
            
            console.log(`  ‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages.length}`);
            return allMessages;
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            throw error;
        }
    }






    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
     */
    private async loadAllMetadata(): Promise<{
        processed: number;
        added: number;
        updated: number;
        skipped: number;
        errors: number;
    }> {
        console.log('  üìö –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...');

        try {
            if (!this.metadataService) {
                throw new Error('Metadata service not initialized');
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            const allMessages = await this.getAllMessagesFromMetadataChannel();

            // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ 50 —à—Ç—É–∫
            const batchSize = 50;
            let totalProcessed = 0;
            let totalAdded = 0;
            let totalUpdated = 0;
            let totalSkipped = 0;
            let totalErrors = 0;

            for (let i = 0; i < allMessages.length; i += batchSize) {
                const batch = allMessages.slice(i, i + batchSize);
                console.log(`  üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ ${Math.floor(i / batchSize) + 1} –∏–∑ ${Math.ceil(allMessages.length / batchSize)}...`);

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                const result = await this.processMetadataBatch(batch);

                totalProcessed += result.processed;
                totalAdded += result.added;
                totalUpdated += result.updated;
                totalSkipped += result.skipped;
                totalErrors += result.errors;

                console.log(`    ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.processed}, –î–æ–±–∞–≤–ª–µ–Ω–æ: ${result.added}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${result.updated}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.skipped}, –û—à–∏–±–æ–∫: ${result.errors}`);

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
            }

            console.log(`  ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}`);

            return {
                processed: totalProcessed,
                added: totalAdded,
                updated: totalUpdated,
                skipped: totalSkipped,
                errors: totalErrors
            };
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
            return {
                processed: 0,
                added: 0,
                updated: 0,
                skipped: 0,
                errors: 1
            };
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (—Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
     */
    private async loadNewMetadata(): Promise<{
        processed: number;
        added: number;
        updated: number;
        skipped: number;
        errors: number;
    }> {
        try {
            if (!this.metadataService) {
                throw new Error('Metadata service not initialized');
            }

            console.log('  üìö –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');

            // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const { data: lastProcessed, error: lastProcessedError } = await serverSupabase
                .from('telegram_processed_messages')
                .select('message_id')
                .order('processed_at', { ascending: false })
                .limit(1)
                .single();

            let lastMessageId: number | undefined = undefined;
            if (!lastProcessedError && lastProcessed && (lastProcessed as { message_id?: string }).message_id) {
                lastMessageId = parseInt((lastProcessed as { message_id: string }).message_id, 10);
            }

            console.log(`  üìå –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${lastMessageId || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const result = await this.metadataService.syncBooks(20);

            return {
                processed: result.processed,
                added: result.added,
                updated: result.updated,
                skipped: result.skipped,
                errors: result.errors
            };
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
            return {
                processed: 0,
                added: 0,
                updated: 0,
                skipped: 0,
                errors: 1
            };
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
     */
    private async loadAllFiles(): Promise<{
        processed: number;
        linked: number;
        skipped: number;
        errors: number;
    }> {
        console.log('  üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...');

        try {
            if (!this.fileService) {
                throw new Error('File service not initialized');
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            const batchSize = 100;
            let totalProcessed = 0;
            const totalSkipped = 0;
            let totalErrors = 0;
            let hasMoreFiles = true;
            let offsetId: number | undefined = undefined;
            let batchNumber = 1;

            while (hasMoreFiles) {
                console.log(`üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${batchNumber} (–ø–æ ${batchSize} —Ñ–∞–π–ª–æ–≤)...`);

                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —É—á–µ—Ç–æ–º offsetId
                    const files = await this.fileService.getFilesToProcess(batchSize, offsetId);

                    if (files.length === 0) {
                        console.log('  ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                        hasMoreFiles = false;
                        break;
                    }

                    console.log(`  üìä –ü–æ–ª—É—á–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –±–∞—Ç—á–µ ${batchNumber}`);
                    totalProcessed += files.length;

                    // –û–±–Ω–æ–≤–ª—è–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    const fileIds = files
                        .map(file => parseInt(String((file as { messageId: string }).messageId), 10))
                        .filter(id => !isNaN(id));

                    if (fileIds.length > 0) {
                        offsetId = Math.min(...fileIds) - 1;
                    } else {
                        hasMoreFiles = false;
                        break;
                    }

                    console.log(`  üìà –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed} —Ñ–∞–π–ª–æ–≤`);
                    batchNumber++;

                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 2000));
                } catch (batchError) {
                    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ ${batchNumber}:`, batchError);
                    totalErrors++;
                    batchNumber++;
                }
            }

            console.log(`\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed} —Ñ–∞–π–ª–æ–≤`);

            return {
                processed: totalProcessed,
                linked: 0, // –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–æ –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–Ω–∏–≥–∞–º
                skipped: totalSkipped,
                errors: totalErrors
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
            return {
                processed: 0,
                linked: 0,
                skipped: 0,
                errors: 1
            };
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã (—Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
     */
    private async loadNewFiles(): Promise<{
        processed: number;
        linked: number;
        skipped: number;
        errors: number;
    }> {
        try {
            if (!this.fileService) {
                throw new Error('File service not initialized');
            }

            console.log('  üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...');

            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const filesToProcess = await this.fileService.getFilesToProcess(100);

            console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${filesToProcess.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

            return {
                processed: filesToProcess.length,
                linked: 0,
                skipped: 0,
                errors: 0
            };
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
            return {
                processed: 0,
                linked: 0,
                skipped: 0,
                errors: 1
            };
        }
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –∫ –∫–Ω–∏–≥–∞–º —á–µ—Ä–µ–∑ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–æ–∏—Å–∫
     */
    private async linkFilesToBooks(): Promise<{
        processed: number;
        linked: number;
        skipped: number;
        errors: number;
    }> {
        try {
            if (!this.fileService) {
                throw new Error('File service not initialized');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
            const { data: booksWithoutFiles, error } = await serverSupabase
                .from('books')
                .select('id, title, author, telegram_post_id')
                .not('telegram_post_id', 'is', null)
                .is('telegram_file_id', null)
                .is('file_url', null);

            if (error) {
                console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤:', error);
                return {
                    processed: 0,
                    linked: 0,
                    skipped: 0,
                    errors: 1
                };
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏ —Å –ø—É—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞–º–∏
            const validBooks = booksWithoutFiles?.filter((book: any) =>
                book.title && book.title.trim() !== '' &&
                book.author && book.author.trim() !== ''
            ) || [];

            if (validBooks.length === 0) {
                console.log('  ‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ –∏–º–µ—é—Ç —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞');
                return {
                    processed: 0,
                    linked: 0,
                    skipped: 0,
                    errors: 0
                };
            }

            console.log(`  üìö –ù–∞–π–¥–µ–Ω–æ ${validBooks.length} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤`);

            // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            console.log(`  üì• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...`);
            const filesToProcess = await this.fileService.getFilesToProcess(1000);
            console.log(`  ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${filesToProcess.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);

            let processed = 0;
            let linked = 0;
            let skipped = 0;
            let errors = 0;

            // –î–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª
            for (const book of validBooks) {
                const typedBook = book as Book;
                console.log(`\n  üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏: "${typedBook.title}" –∞–≤—Ç–æ—Ä–∞ ${typedBook.author}`);

                try {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
                    const matchingFile = this.findMatchingFile(typedBook, filesToProcess);

                    if (matchingFile) {
                        console.log(`    üì® –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: ${matchingFile.filename}`);
                        console.log(`    üì® Message ID —Ñ–∞–π–ª–∞: ${matchingFile.messageId}`);

                        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª
                        console.log(`    ‚¨áÔ∏è  –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞...`);
                        const result = await this.fileService!.processSingleFileById(parseInt(matchingFile.messageId as string, 10));

                        processed++;

                        if (result.success && !result.skipped) {
                            console.log(`    ‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω`);
                            linked++;
                        } else if (result.skipped) {
                            console.log(`    ‚ö†Ô∏è  –§–∞–π–ª –ø—Ä–æ–ø—É—â–µ–Ω: ${result.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
                            skipped++;
                        } else {
                            console.log(`    ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω: ${result.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞'}`);
                            skipped++;
                        }
                    } else {
                        console.log(`    ‚ö†Ô∏è  –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                        skipped++;
                    }
                } catch (error) {
                    console.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–∏–≥–∏:`, error);
                    errors++;
                }
            }

            return {
                processed,
                linked,
                skipped,
                errors
            };
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —Ñ–∞–π–ª–æ–≤ –∫ –∫–Ω–∏–≥–∞–º:', error);
            return {
                processed: 0,
                linked: 0,
                skipped: 0,
                errors: 1
            };
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –¥–ª—è –∫–Ω–∏–≥–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
     */
    private findMatchingFile(book: Book, files: any[]): any | null {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
        if (!book.title || !book.author || book.title.trim() === '' || book.author.trim() === '') {
            console.log(`    Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return null;
        }

        console.log(`    üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏: "${book.title}" –∞–≤—Ç–æ—Ä–∞ ${book.author}`);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞
        let bestMatch: any | null = null;
        let bestScore = 0;

        for (const file of files) {
            if (!file.filename) continue;

            const filename = file.filename.normalize('NFC').toLowerCase();
            const bookTitle = book.title.normalize('NFC').toLowerCase();
            const bookAuthor = book.author.normalize('NFC').toLowerCase();

            let score = 0;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ (—Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º)
            if (filename.includes(bookTitle.replace(/\s+/g, '_'))) {
                score += 20;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (—Å –≤—ã—Å–æ–∫–∏–º –≤–µ—Å–æ–º)
            if (filename.includes(bookAuthor.replace(/\s+/g, '_'))) {
                score += 20;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä) –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            const titleInFilename = filename.includes(bookTitle.replace(/\s+/g, '_'));
            const authorInFilename = filename.includes(bookAuthor.replace(/\s+/g, '_'));

            // –ï—Å–ª–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –∞–≤—Ç–æ—Ä –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
            if (titleInFilename && authorInFilename) {
                score += 30; // –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            const bookTitleWords = bookTitle.split(/\s+/).filter(word => word.length > 2);
            let titleWordsMatchCount = 0;

            for (const word of bookTitleWords) {
                if (filename.includes(word)) {
                    titleWordsMatchCount++;
                }
            }

            // –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –±–æ–ª–µ–µ 50% —Å–ª–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
            if (bookTitleWords.length > 0 && titleWordsMatchCount / bookTitleWords.length >= 0.5) {
                score += 15;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–±–æ–ª–µ–µ 80% —Å–∏–º–≤–æ–ª–æ–≤)
            const titleMatchThreshold = Math.floor(bookTitle.length * 0.8);
            if (titleMatchThreshold > 0) {
                const partialTitle = bookTitle.substring(0, Math.min(titleMatchThreshold, bookTitle.length));
                if (filename.includes(partialTitle.replace(/\s+/g, '_'))) {
                    score += 10;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ (–±–æ–ª–µ–µ 80% —Å–∏–º–≤–æ–ª–æ–≤)
            const authorMatchThreshold = Math.floor(bookAuthor.length * 0.8);
            if (authorMatchThreshold > 0) {
                const partialAuthor = bookAuthor.substring(0, Math.min(authorMatchThreshold, bookAuthor.length));
                if (filename.includes(partialAuthor.replace(/\s+/g, '_'))) {
                    score += 10;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫–æ–≤—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º
            const searchTerms = [...bookTitleWords, ...bookAuthor.split(/\s+/).filter(word => word.length > 2)];
            for (const term of searchTerms) {
                if (filename.includes(term)) {
                    score += 5;
                }
            }

            // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏
            const filenameWords = filename.toLowerCase().split(/[_\-\s]+/).filter((word: string) => word.length > 2);
            let allWordsInTitle = true;
            let allWordsInAuthor = true;
            let wordsFoundCount = 0;
            let titleWordsFound = 0;
            let authorWordsFound = 0;

            for (const word of filenameWords) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
                if (bookTitle.includes(word)) {
                    wordsFoundCount++;
                    titleWordsFound++;
                } else {
                    allWordsInTitle = false;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏
                if (bookAuthor.includes(word)) {
                    wordsFoundCount++;
                    authorWordsFound++;
                } else {
                    allWordsInAuthor = false;
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å
            if (allWordsInTitle || allWordsInAuthor || wordsFoundCount > 0) {
                // –ë–æ–Ω—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
                const wordBonus = Math.min(30, wordsFoundCount * 5);
                score += wordBonus;

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã –∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –∏ –≤ –∞–≤—Ç–æ—Ä–µ
                if (titleWordsFound > 0 && authorWordsFound > 0) {
                    score += 10;
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ –≤–∫–ª—é—á–µ–Ω—ã –∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –≤ –∞–≤—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –±–æ–ª—å—à–∏–π –±–æ–Ω—É—Å
            if (allWordsInTitle && allWordsInAuthor) {
                score += 20;
            }

            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ª—É—á—à–∏–π —Å—á–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—á–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫ (–º–∏–Ω–∏–º—É–º 30 - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –∞–≤—Ç–æ—Ä)
            if (score > bestScore && score >= 30) {
                bestScore = score;
                bestMatch = file;
            }
        }

        if (bestMatch && bestScore >= 30) {
            console.log(`    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${bestScore}: ${bestMatch.filename}`);
            return bestMatch;
        }

        console.log(`    ‚ö†Ô∏è  –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–Ω–æ–µ`);
        return null;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
     */
    private async processMetadataBatch(messages: unknown[]): Promise<{
        processed: number;
        added: number;
        updated: number;
        skipped: number;
        errors: number;
    }> {
        let processed = 0;
        let added = 0;
        let updated = 0;
        let skipped = 0;
        let errors = 0;
        const metadataList: BookMetadata[] = [];

        try {
            if (!this.metadataService) {
                throw new Error('Metadata service not initialized');
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            for (const msg of messages) {
                processed++;
                const anyMsg = msg as unknown as { [key: string]: unknown };
                console.log(`    üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id}...`);

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
                if (!(msg as { text?: string }).text) {
                    console.log(`      ‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                    skipped++;
                    continue;
                }

                // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                const metadata = MetadataParser.parseMessage((msg as { text: string }).text);
                metadata.messageId = anyMsg.id as number;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä
                if (!metadata.title || !metadata.author || metadata.title.trim() === '' || metadata.author.trim() === '') {
                    console.log(`      ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${anyMsg.id} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ—Ä)`);
                    skipped++;
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–∏–≥–∏ –≤ –ë–î
                let existingBook: Book | null = null;
                try {
                    const { data, error } = await serverSupabase
                        .from('books')
                        .select('id, telegram_post_id')
                        .eq('title', metadata.title)
                        .eq('author', metadata.author)
                        .limit(1)
                        .single();

                    if (!error && data) {
                        existingBook = data as Book;
                        console.log(`      ‚ÑπÔ∏è –ö–Ω–∏–≥–∞ "${metadata.title}" –∞–≤—Ç–æ—Ä–∞ ${metadata.author} –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.`);
                    }
                } catch (checkError) {
                    console.warn(`      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏:`, checkError);
                }

                // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º telegram_post_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if (existingBook) {
                    if (existingBook.telegram_post_id === null || existingBook.telegram_post_id !== (anyMsg.id as number)) {
                        console.log(`      üîÑ –û–±–Ω–æ–≤–ª—è–µ–º telegram_post_id –¥–ª—è –∫–Ω–∏–≥–∏ "${metadata.title}" (${existingBook.id})`);

                        const { error: updateError } = await serverSupabase
                            .from('books')
                            .update({
                                telegram_post_id: anyMsg.id as number,
                                updated_at: new Date().toISOString()
                            } as any)
                            .eq('id', existingBook.id);

                        if (updateError) {
                            console.error(`      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ telegram_post_id:`, updateError);
                            errors++;
                            continue;
                        }
                        updated++;
                    } else {
                        console.log(`      ‚úÖ –ö–Ω–∏–≥–∞ "${metadata.title}" —É–∂–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_post_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                        skipped++;
                    }
                    continue;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
                metadataList.push(metadata);
            }

            console.log(`    üìä –í—Å–µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${metadataList.length}`);

            // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
            if (metadataList.length > 0) {
                console.log('    üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π...');
                const resultImport = await this.metadataService.importMetadataWithDeduplication(metadataList);
                added = resultImport.added;
                updated += resultImport.updated;
                skipped += resultImport.skipped;
                errors += resultImport.errors;
                console.log('    ‚úÖ –ò–º–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω');
            }

            return {
                processed,
                added,
                updated,
                skipped,
                errors
            };
        } catch (error) {
            console.error('    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
            errors++;
            return {
                processed,
                added: 0,
                updated: 0,
                skipped,
                errors
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
     */
    private async getAllMessagesFromMetadataChannel(): Promise<unknown[]> {
        if (!this.telegramClient) {
            throw new Error('Telegram client not initialized');
        }

        try {
            console.log('  üìö –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            const channel = await this.telegramClient.getMetadataChannel();

            const channelId = typeof channel.id === 'object' && channel !== null ?
                (channel.id as { toString: () => string }).toString() :
                String(channel.id);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            const allMessages = await this.telegramClient.getAllMessages(channelId, 100);

            console.log(`  ‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${allMessages.length}`);
            return allMessages;
        } catch (error) {
            console.error('  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ä–∞–±–æ—Ç—ã
     * @param mode - —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 'full' | 'update' | 'auto'
     */
    public async run(mode: 'full' | 'update' | 'auto' = 'auto'): Promise<SyncResult> {
        console.log(`üêã –ó–∞–ø—É—Å–∫ –ö–Ω–∏–∂–Ω–æ–≥–æ –ß–µ—Ä–≤—è –≤ —Ä–µ–∂–∏–º–µ: ${mode.toUpperCase()}...`);

        switch (mode) {
            case 'full':
                return await this.runFullSync();
            case 'update':
                return await this.runUpdateSync();
            case 'auto':
            default:
                return await this.runAutoSync();
        }
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    private async shutdown(): Promise<void> {
        console.log('\nüîå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤...');

        try {
            if (this.fileService) {
                await this.fileService.shutdown();
            }
        } catch (error) {
            console.error('  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ file service:', error);
        }

        console.log('  ‚úÖ –ö–Ω–∏–∂–Ω—ã–π –ß–µ—Ä–≤—å –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
    }

}