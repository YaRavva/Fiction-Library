import { createClient } from '@supabase/supabase-js';
import { TelegramService } from './client';
import { MetadataParser } from './parser';
import { normalizeBookText } from '../book-deduplication-service';
import dotenv from 'dotenv';

dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

interface TelegramStats {
  id?: string;
  books_in_database: number;
  books_in_telegram: number;
  missing_books: number;
  books_without_files: number;
  updated_at: string;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function logToBoth(message: string) {
  console.log(message);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
  if (typeof window !== 'undefined' && (window as any).setStatsUpdateReport) {
    try {
      const timestamp = new Date().toLocaleTimeString('ru-RU');
      const logMessage = `[${timestamp}] ${message}\n`;
      (window as any).setStatsUpdateReport(logMessage);
    } catch (error) {
      console.warn('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ç–º–µ–Ω–æ–π
function withTimeout<T>(promise: Promise<T>, timeoutMs: number, timeoutMessage: string): Promise<T> {
  return new Promise((resolve, reject) => {
    const timeoutId = setTimeout(() => {
      reject(new Error(timeoutMessage));
    }, timeoutMs);

    promise
      .then(result => {
        clearTimeout(timeoutId);
        resolve(result);
      })
      .catch(error => {
        clearTimeout(timeoutId);
        reject(error);
      });
  });
}

export async function updateTelegramStats(): Promise<TelegramStats | null> {
  logToBoth('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logToBoth('\nüìö –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const { count: booksInDatabase, error: booksCountError } = await supabaseAdmin
      .from('books')
      .select('*', { count: 'exact', head: true });

    if (booksCountError) {
      logToBoth(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥: ${booksCountError}`);
      return null;
    }

    logToBoth(`‚úÖ –ö–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${booksInDatabase || 0}`);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    logToBoth('\nüìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤...');
    const { count: booksWithoutFiles, error: booksWithoutFilesError } = await supabaseAdmin
      .from('books')
      .select('*', { count: 'exact', head: true })
      .is('file_url', null);

    if (booksWithoutFilesError) {
      logToBoth(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${booksWithoutFilesError}`);
      return null;
    }

    logToBoth(`‚úÖ –ö–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${booksWithoutFiles || 0}`);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram –∫–∞–Ω–∞–ª–µ
    logToBoth('\nüì° –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram –∫–∞–Ω–∞–ª–µ...');
    let booksInTelegram = 0;
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
      const telegramService = await TelegramService.getInstance();
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const channel = await telegramService.getMetadataChannel();
      
      // Convert BigInteger to string for compatibility
      const channelId = typeof channel.id === 'object' && channel.id !== null ?
          (channel.id as { toString: () => string }).toString() :
          String(channel.id);
      
      logToBoth(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∫–∞–Ω–∞–ª—É ID: ${channelId}`);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–∞—Ç—á–∞–º–∏ –ø–æ 10000 –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram
      let offsetId: number | undefined = undefined;
      const batchSize = 10000; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–æ 10000
      const bookSet = new Set<string>(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram
      let processed = 0;
      let batchNumber = 0;
      
      logToBoth(`\nüì• –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–∞ –±–∞—Ç—á–∞–º–∏ –ø–æ ${batchSize} —Å–æ–æ–±—â–µ–Ω–∏–π...`);
      
      while (true) {
        batchNumber++;
        logToBoth(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ ${batchNumber}...`);
        
        try {
          // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –±–∞—Ç—á–µ–π
          const messagesPromise = telegramService.getMessages(channelId, batchSize, offsetId) as Promise<any[]>;
          const messages = await withTimeout(messagesPromise, 60000, 'TIMEOUT: getMessages');

          if (!messages || messages.length === 0) {
            logToBoth(`‚úÖ –ë–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
            break;
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          for (const message of messages) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            let messageText = '';
            if (message && typeof message === 'object') {
              if ('message' in message && message.message && typeof message.message === 'string') {
                messageText = message.message;
              } else if ('text' in message && message.text && typeof message.text === 'string') {
                messageText = message.text;
              }
            }

            if (messageText && typeof messageText === 'string' && messageText.trim() !== '') {
              try {
                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
                const metadata = MetadataParser.parseMessage(messageText);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ —ç—Ç–æ –∫–∞–∫ –∫–Ω–∏–≥–∞ (–µ—Å—Ç—å –∞–≤—Ç–æ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ)
                if (metadata.author && metadata.title) {
                  const normalizedAuthor = normalizeBookText(metadata.author);
                  const normalizedTitle = normalizeBookText(metadata.title);
                  const bookKey = `${normalizedAuthor}|${normalizedTitle}`;
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥
                  if (!bookSet.has(bookKey)) {
                    bookSet.add(bookKey);
                  }
                }
              } catch (parseError) {
                // –ù–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–∏–≥–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
              }
            }
            
            processed++;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5000 —Å–æ–æ–±—â–µ–Ω–∏–π
            if (processed % 5000 === 0) {
              logToBoth(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${processed} —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${bookSet.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –Ω–∞–π–¥–µ–Ω–æ`);
            }
          }

          logToBoth(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ ${batchNumber}, –≤—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥: ${bookSet.size}`);

          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º offsetId –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏
          const lastMessage = messages[messages.length - 1];
          if (lastMessage && lastMessage.id) {
            offsetId = lastMessage.id;
          } else {
            logToBoth(`‚úÖ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ`);
            break;
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Telegram API
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 200));
        } catch (batchError) {
          if (batchError instanceof Error && batchError.message.includes('TIMEOUT')) {
            logToBoth('‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
            break;
          } else {
            logToBoth(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: ${batchError}`);
            break;
          }
        }
      }
      
      booksInTelegram = bookSet.size;
      logToBoth(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${booksInTelegram} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–Ω–∏–≥ –≤ Telegram`);
      
      // –û—Ç–∫–ª—é—á–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫—É–Ω–¥
      if (telegramService && typeof telegramService.disconnect === 'function') {
        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é
          const disconnectPromise = telegramService.disconnect();
          await withTimeout(disconnectPromise, 5000, 'TIMEOUT: disconnect');
          logToBoth('üì± Telegram –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω');
        } catch (disconnectError) {
          if (disconnectError instanceof Error && disconnectError.message === 'TIMEOUT: disconnect') {
            logToBoth('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞');
          } else {
            logToBoth(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞: ${disconnectError}`);
          }
        }
      }
      
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
      // –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –µ—â—ë —Ä–∞–∑, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–ª—è –ø–æ–ª–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      if (telegramService && typeof telegramService.disconnect === 'function') {
        try {
          await telegramService.disconnect();
          logToBoth('üì± Telegram –∫–ª–∏–µ–Ω—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω');
        } catch (finalDisconnectError) {
          logToBoth(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: ${finalDisconnectError}`);
        }
      }
      
    } catch (telegramError) {
      logToBoth(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–Ω–∏–≥ –≤ Telegram: ${telegramError}`);
      return null;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥
    const missingBooks = Math.max(0, booksInTelegram - (booksInDatabase || 0));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logToBoth('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const statsData: TelegramStats = {
      books_in_database: booksInDatabase || 0,
      books_in_telegram: booksInTelegram,
      missing_books: missingBooks,
      books_without_files: booksWithoutFiles || 0,
      updated_at: new Date().toISOString()
    };

    logToBoth(`–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${JSON.stringify(statsData)}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ telegram_stats
    const { error: upsertError } = await supabaseAdmin
      .from('telegram_stats')
      .upsert(statsData, { onConflict: 'id' });

    if (upsertError) {
      logToBoth(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${upsertError}`);
      return null;
    }

    logToBoth('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logToBoth('\nüìà === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
    logToBoth(`üìö –ö–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${statsData.books_in_database}`);
    logToBoth(`üì° –ö–Ω–∏–≥ –≤ Telegram: ${statsData.books_in_telegram}`);
    logToBoth(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–∏–≥: ${statsData.missing_books}`);
    logToBoth(`üìÅ –ö–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${statsData.books_without_files}`);
    logToBoth(`üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(statsData.updated_at).toLocaleString()}`);
    
    logToBoth('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
    return statsData;
    
  } catch (error) {
    logToBoth(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error}`);
    return null;
  }
}