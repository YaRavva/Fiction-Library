import { createClient as createSupabaseClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω—ã
function checkEnvVars() {
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Missing Supabase environment variables: NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY are required')
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã
export const createClient = () => {
  // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  if (!supabaseUrl || !supabaseAnonKey) {
    checkEnvVars();
  }
  return createSupabaseClient(supabaseUrl!, supabaseAnonKey!);
};

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
let _supabase: ReturnType<typeof createSupabaseClient> | null = null;
let _supabaseAdmin: ReturnType<typeof createSupabaseClient> | null = null;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
export const getSupabase = () => {
  if (!_supabase) {
    checkEnvVars();
    _supabase = createSupabaseClient(supabaseUrl!, supabaseAnonKey!);
  }
  return _supabase;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const supabase = new Proxy({} as ReturnType<typeof createSupabaseClient>, {
  get(target, prop) {
    return getSupabase()[prop as keyof ReturnType<typeof createSupabaseClient>];
  }
});

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤, –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
export const getSupabaseAdmin = () => {
  if (!_supabaseAdmin) {
    // –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const key = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (url && key) {
      _supabaseAdmin = createSupabaseClient(url, key, {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      });
    }
  }
  return _supabaseAdmin;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const supabaseAdmin = new Proxy({} as ReturnType<typeof createSupabaseClient>, {
  get(target, prop) {
    const admin = getSupabaseAdmin();
    if (!admin) {
      throw new Error('SUPABASE_SERVICE_ROLE_KEY is not set');
    }
    return admin[prop as keyof ReturnType<typeof createSupabaseClient>];
  }
});

// Types for our database tables
export interface Series {
  id: string
  title: string
  author: string
  description?: string
  rating?: number
  cover_url?: string
  cover_urls?: string[]
  telegram_post_id?: string
  tags: string[]
  genres: string[]
  series_composition?: { title: string; year: number }[]
  created_at: string
  updated_at: string
}

export interface Book {
  id: string
  series_id?: string
  title: string
  author: string
  publication_year?: number
  description?: string
  cover_url?: string
  file_url?: string
  file_size?: number
  file_format: string
  rating?: number
  tags: string[]
  genres: string[]
  series_order?: number
  telegram_file_id?: string
  telegram_post_id?: number // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ number
  downloads_count: number
  views_count: number
  created_at: string
  updated_at: string
  storage_path?: string
}

export interface UserProfile {
  id: string
  username?: string
  display_name?: string
  avatar_url?: string
  role: 'reader' | 'admin'
  reading_preferences: Record<string, unknown>
  created_at: string
  updated_at: string
}

export interface ReadingHistory {
  id: string
  user_id: string
  book_id: string
  last_position: number
  reading_progress: number
  reading_time_minutes: number
  last_read_at: string
  created_at: string
  updated_at: string
}

export interface UserBookmark {
  id: string
  user_id: string
  book_id: string
  position: number
  chapter?: string
  note?: string
  created_at: string
}

export interface UserRating {
  user_id: string
  book_id: string
  rating: number
  review?: string
  created_at: string
  updated_at: string
}

// Upload a buffer to Supabase Storage
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç service role –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Storage)
export async function uploadFileToStorage(bucket: string, path: string, buffer: Buffer, mimeType = 'application/octet-stream') {
  const admin = getSupabaseAdmin();

  if (!admin) {
    throw new Error('SUPABASE_SERVICE_ROLE_KEY is not set. Cannot upload files to storage.');
  }

  const { data, error } = await admin.storage.from(bucket).upload(path, buffer, {
    contentType: mimeType,
    upsert: true,
  })

  if (error) {
    console.error(`Error uploading file to ${bucket}/${path}:`, error);
    throw error;
  }

  console.log(`‚úÖ Successfully uploaded file to ${bucket}/${path}`);
  return data;
}

// Insert or update a book record
export async function upsertBookRecord(book: Partial<Book>) {
  const admin = getSupabaseAdmin();
  if (!admin) {
    throw new Error('SUPABASE_SERVICE_ROLE_KEY is not set. Cannot upsert book record.');
  }
  
  console.log(`üîç –ò—â–µ–º –∫–Ω–∏–≥—É –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º: title="${book.title}", author="${book.author}"`);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
  if (book.title && book.author) {
    const { data: existingBook, error: fetchError } = await admin
      .from('books')
      .select('id, title, author')
      .eq('title', book.title)
      .eq('author', book.author)
      .single();
    
    if (!fetchError && existingBook) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–Ω–∏–≥–∞ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ): ${(existingBook as { id: string }).id}`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const updateData: Partial<Book> = {};
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
      if (book.file_url) updateData.file_url = book.file_url;
      if (book.file_size) updateData.file_size = book.file_size;
      if (book.file_format) updateData.file_format = book.file_format;
      if (book.telegram_file_id) updateData.telegram_file_id = book.telegram_file_id;
      if (book.telegram_post_id) updateData.telegram_post_id = book.telegram_post_id; // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É telegram_post_id
      if (book.storage_path) updateData.storage_path = book.storage_path;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (Object.keys(updateData).length > 0) {
        // Type assertion to fix typing issues with Supabase client
        const typedAdmin = admin as unknown as {
          from: (table: string) => {
            update: (data: Record<string, unknown>) => {
              eq: (column: string, value: unknown) => {
                select: () => {
                  single: () => Promise<{ data: unknown; error: unknown }>;
                };
              };
            };
          };
        };
        
        const { data, error } = await typedAdmin
          .from('books')
          .update(updateData)
          .eq('id', (existingBook as { id: string }).id)
          .select()
          .single();
        
        if (error) throw error;
        console.log(`‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ`);
        return data;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      console.log(`‚ÑπÔ∏è  –ö–Ω–∏–≥–∞ —É–∂–µ –∏–º–µ–µ—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é`);
      return existingBook;
    } else {
      console.log(`‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é`);
      if (fetchError) {
        console.log(`  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${fetchError.message}`);
      }
    }
    
    // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
    console.log(`üîç –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é –¥–ª—è: title="${book.title}", author="${book.author}"`);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const titleWords = (book.title || '').split(/\s+/).filter(word => word.length > 2);
    const authorWords = (book.author || '').split(/\s+/).filter(word => word.length > 2);
    const allSearchWords = [...titleWords, ...authorWords].filter(word => word.length > 0);
    
    console.log(`  –°–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: [${allSearchWords.join(', ')}]`);
    
    if (allSearchWords.length > 0) {
      // –ò—â–µ–º –∫–Ω–∏–≥–∏, –≥–¥–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const searchPromises = allSearchWords.map(async (word) => {
        const { data: titleMatches } = await admin
          .from('books')
          .select('id, title, author')
          .ilike('title', `%${word}%`)
          .limit(5);
        
        const { data: authorMatches } = await admin
          .from('books')
          .select('id, title, author')
          .ilike('author', `%${word}%`)
          .limit(5);
        
        const allMatches = [...(titleMatches || []), ...(authorMatches || [])];
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        const uniqueMatches = allMatches.filter((bookItem, index, self) => 
          index === self.findIndex(b => (b as { id: string }).id === (bookItem as { id: string }).id)
        );
        
        return uniqueMatches;
      });
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const results = await Promise.all(searchPromises);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const allMatches = results.flat();
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
      const uniqueMatches = allMatches.filter((bookItem, index, self) => 
        index === self.findIndex(b => (b as { id: string }).id === (bookItem as { id: string }).id)
      );
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
      const matchesWithScores = uniqueMatches.map(bookItem => {
        const typedBookItem = bookItem as { id: string; title: string; author: string };
        const bookTitleWords = typedBookItem.title.toLowerCase().split(/\s+/);
        const bookAuthorWords = typedBookItem.author.toLowerCase().split(/\s+/);
        const allBookWords = [...bookTitleWords, ...bookAuthorWords];
        
        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–ª–æ–≤ —Å —Å–ª–æ–≤–∞–º–∏ –≤ –∫–Ω–∏–≥–µ
        let score = 0;
        for (const searchWord of allSearchWords) {
          const normalizedSearchWord = searchWord.toLowerCase();
          let found = false;
          for (const bookWord of allBookWords) {
            const normalizedBookWord = bookWord.toLowerCase();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ
            if (normalizedBookWord.includes(normalizedSearchWord) || normalizedSearchWord.includes(normalizedBookWord)) {
              score++;
              found = true;
              break; // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            }
          }
        }
        
        return { ...typedBookItem, score };
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—á–µ—Ç–∞
      matchesWithScores.sort((a, b) => b.score - a.score);
      
      // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      const topMatches = matchesWithScores.slice(0, 5);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é >= 2
      const relevantMatches = topMatches.filter(match => match.score >= 2);
      if (relevantMatches.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${relevantMatches.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:`);
        relevantMatches.forEach((match, index) => {
          console.log(`  ${index + 1}. "${match.title}" –∞–≤—Ç–æ—Ä–∞ ${match.author} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${match.score})`);
        });
        return relevantMatches;
      } else {
        console.log(`‚ö†Ô∏è  –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
      }
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é`);
    }
  }
  
  // –ï—Å–ª–∏ –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  console.log(`‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É: title="${book.title}", author="${book.author}"`);
  const { data: newBook, error: insertError } = await admin
    .from('books')
    .insert(book as any) // –ü—Ä–∏–≤–æ–¥–∏–º –∫ any –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏
    .select()
    .single();

  if (insertError) throw insertError;

  console.log(`‚úÖ –ù–æ–≤–∞—è –∫–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: ${(newBook as { id: string }).id}`);
  return newBook;
}
