import { createClient as createSupabaseClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω—ã
function checkEnvVars() {
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new Error('Missing Supabase environment variables: NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY are required')
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç–∞–Ω—Å—ã
export const createClient = () => {
  // –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  if (!supabaseUrl || !supabaseAnonKey) {
    checkEnvVars();
  }
  return createSupabaseClient(supabaseUrl!, supabaseAnonKey!);
};

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
let _supabase: ReturnType<typeof createSupabaseClient> | null = null;
let _supabaseAdmin: ReturnType<typeof createSupabaseClient> | null = null;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞
export const getSupabase = () => {
  if (!_supabase) {
    checkEnvVars();
    _supabase = createSupabaseClient(supabaseUrl!, supabaseAnonKey!);
  }
  return _supabase;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const supabase = new Proxy({} as ReturnType<typeof createSupabaseClient>, {
  get(target, prop) {
    return getSupabase()[prop as keyof ReturnType<typeof createSupabaseClient>];
  }
});

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å service role –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤, –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
export const getSupabaseAdmin = () => {
  if (!_supabaseAdmin) {
    // –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    const url = process.env.NEXT_PUBLIC_SUPABASE_URL;
    const key = process.env.SUPABASE_SERVICE_ROLE_KEY;

    if (url && key) {
      _supabaseAdmin = createSupabaseClient(url, key, {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      });
    }
  }
  return _supabaseAdmin;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const supabaseAdmin = new Proxy({} as ReturnType<typeof createSupabaseClient>, {
  get(target, prop) {
    const admin = getSupabaseAdmin();
    if (!admin) {
      throw new Error('SUPABASE_SERVICE_ROLE_KEY is not set');
    }
    return admin[prop as keyof ReturnType<typeof createSupabaseClient>];
  }
});

// Types for our database tables
export interface Series {
  id: string
  title: string
  author: string
  description?: string
  rating?: number
  cover_url?: string
  cover_urls?: string[]
  telegram_post_id?: string
  tags: string[]
  genres: string[]
  series_composition?: { title: string; year: number }[]
  created_at: string
  updated_at: string
}

export interface Book {
  id: string
  series_id?: string
  title: string
  author: string
  publication_year?: number
  description?: string
  cover_url?: string
  file_url?: string
  file_size?: number
  file_format: string
  rating?: number
  tags: string[]
  genres: string[]
  series_order?: number
  telegram_file_id?: string
  downloads_count: number
  views_count: number
  created_at: string
  updated_at: string
  storage_path?: string
}

export interface UserProfile {
  id: string
  username?: string
  display_name?: string
  avatar_url?: string
  role: 'reader' | 'admin'
  reading_preferences: Record<string, unknown>
  created_at: string
  updated_at: string
}

export interface ReadingHistory {
  id: string
  user_id: string
  book_id: string
  last_position: number
  reading_progress: number
  reading_time_minutes: number
  last_read_at: string
  created_at: string
  updated_at: string
}

export interface UserBookmark {
  id: string
  user_id: string
  book_id: string
  position: number
  chapter?: string
  note?: string
  created_at: string
}

export interface UserRating {
  user_id: string
  book_id: string
  rating: number
  review?: string
  created_at: string
  updated_at: string
}

// Upload a buffer to Supabase Storage
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç service role –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Storage)
export async function uploadFileToStorage(bucket: string, path: string, buffer: Buffer, mimeType = 'application/octet-stream') {
  const admin = getSupabaseAdmin();

  if (!admin) {
    throw new Error('SUPABASE_SERVICE_ROLE_KEY is not set. Cannot upload files to storage.');
  }

  const { data, error } = await admin.storage.from(bucket).upload(path, buffer, {
    contentType: mimeType,
    upsert: true,
  })

  if (error) {
    console.error(`Error uploading file to ${bucket}/${path}:`, error);
    throw error;
  }

  console.log(`‚úÖ Successfully uploaded file to ${bucket}/${path}`);
  return data;
}

// Insert or update a book record
export async function upsertBookRecord(book: Partial<Book>) {
  const admin = getSupabaseAdmin();
  if (!admin) {
    throw new Error('SUPABASE_SERVICE_ROLE_KEY is not set. Cannot upsert book record.');
  }
  
  console.log(`üîç –ò—â–µ–º –∫–Ω–∏–≥—É –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º: title="${book.title}", author="${book.author}"`);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
  if (book.title && book.author) {
    const { data: existingBook, error: fetchError } = await (admin as any)
      .from('books')
      .select('id')
      .eq('title', book.title)
      .eq('author', book.author)
      .single();
    
    if (!fetchError && existingBook) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–Ω–∏–≥–∞: ${existingBook.id}`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const updateData: Partial<Book> = {};
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
      if (book.file_url) updateData.file_url = book.file_url;
      if (book.file_size) updateData.file_size = book.file_size;
      if (book.file_format) updateData.file_format = book.file_format;
      if (book.telegram_file_id) updateData.telegram_file_id = book.telegram_file_id;
      if (book.storage_path) updateData.storage_path = book.storage_path;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (Object.keys(updateData).length > 0) {
        const { data, error } = await (admin as any)
          .from('books')
          .update(updateData)
          .eq('id', existingBook.id)
          .select()
          .single();
        
        if (error) throw error;
        console.log(`‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ`);
        return data;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      console.log(`‚ÑπÔ∏è  –ö–Ω–∏–≥–∞ —É–∂–µ –∏–º–µ–µ—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é`);
      return existingBook;
    } else {
      console.log(`‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º`);
      if (fetchError) {
        console.log(`  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${fetchError.message}`);
      }
    }
    
    // –ï—Å–ª–∏ –∫–Ω–∏–≥–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª—Å—è
    return null;
  }
  
  console.log(`‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏`);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å telegram_file_id, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if (book.telegram_file_id) {
    console.log(`üîç –ò—â–µ–º –∫–Ω–∏–≥—É –ø–æ telegram_file_id: ${book.telegram_file_id}`);
    const { data: existingBook, error: fetchError } = await (admin as any)
      .from('books')
      .select('id')
      .eq('telegram_file_id', book.telegram_file_id)
      .single();
    
    if (!fetchError && existingBook) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–Ω–∏–≥–∞ –ø–æ telegram_file_id: ${existingBook.id}`);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const { data, error } = await (admin as any)
        .from('books')
        .update(book)
        .eq('id', existingBook.id)
        .select()
        .single();
      
      if (error) throw error;
      console.log(`‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ telegram_file_id`);
      return data;
    } else {
      console.log(`‚ö†Ô∏è  –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ telegram_file_id`);
      if (fetchError) {
        console.log(`  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${fetchError.message}`);
      }
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  console.log(`‚ö†Ô∏è  –ù–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏`);
  return null;
}
