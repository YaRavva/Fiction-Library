import { TelegramSyncService } from './telegram/sync';
import { taskManager, TaskProgress } from './task-manager';

/**
 * –§–æ–Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 */
export class BackgroundDownloadHandler {
  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤
   * @param taskId ID –∑–∞–¥–∞—á–∏
   * @param limit –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
   */
  static async startDownload(taskId: string, limit: number = 50): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      taskManager.updateTaskStatus(taskId, 'running', 'üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...');
      
      // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      const syncService = await TelegramSyncService.getInstance();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const files = await syncService.getFilesToProcess(limit);
      
      if (files.length === 0) {
        taskManager.updateTaskStatus(taskId, 'completed', '‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        taskManager.updateTaskProgress(taskId, 100, '‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
        return;
      }
      
      const totalFiles = files.length;
      let processedFiles = 0;
      const results: any[] = [];
      let successCount = 0;
      let failedCount = 0;
      
      taskManager.updateTaskProgress(taskId, 0, `üì• –ù–∞–π–¥–µ–Ω–æ ${totalFiles} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...`);
      
      // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      let processedFilesHistory = '';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ–¥–Ω–æ–º—É
      for (const file of files) {
        try {
          const progress = Math.round((processedFiles / totalFiles) * 100);
          const message = `${processedFilesHistory}\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${processedFiles + 1}/${totalFiles}: ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${file.messageId})`;
          
          taskManager.updateTaskProgress(taskId, progress, message);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
          const result = await syncService.processSingleFileById(file.messageId as number);
          results.push(result);
          
          if (result.success !== false) {
            successCount++;
            // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
            processedFilesHistory += `${processedFilesHistory ? ' ' : ''}‚úÖ ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`;
          } else {
            failedCount++;
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
            processedFilesHistory += `${processedFilesHistory ? ' ' : ''}‚ùå ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`;
          }
          
          processedFiles++;
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const intermediateProgress = Math.round((processedFiles / totalFiles) * 100);
          const statusMessage = `${processedFilesHistory}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –í—Å–µ–≥–æ: ${processedFiles}/${totalFiles}`;
          taskManager.updateTaskProgress(taskId, intermediateProgress, statusMessage, result);
        } catch (error) {
          failedCount++;
          processedFiles++;
          const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
          const result = {
            messageId: file.messageId,
            filename: file.filename,
            success: false,
            error: errorMessage
          };
          results.push(result);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏—é
          processedFilesHistory += `${processedFilesHistory ? ' ' : ''}‚ùå ${file.filename || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`;
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const intermediateProgress = Math.round((processedFiles / totalFiles) * 100);
          const statusMessage = `${processedFilesHistory}\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –í—Å–µ–≥–æ: ${processedFiles}/${totalFiles}`;
          taskManager.updateTaskProgress(taskId, intermediateProgress, statusMessage, result);
        }
      }
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      const finalMessage = `${processedFilesHistory}\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –£—Å–ø–µ—à–Ω–æ: ${successCount} | –û—à–∏–±–∫–∏: ${failedCount} | –í—Å–µ–≥–æ: ${totalFiles}`;
      taskManager.updateTaskStatus(taskId, 'completed', finalMessage);
      taskManager.updateTaskProgress(taskId, 100, finalMessage, {
        successCount,
        failedCount,
        totalFiles,
        results
      });
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
      taskManager.updateTaskStatus(taskId, 'failed', `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
      taskManager.updateTaskProgress(taskId, 100, `‚ùå –û—à–∏–±–∫–∞: ${errorMessage}`);
    }
  }
}