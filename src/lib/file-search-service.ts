import { createClient } from '@supabase/supabase-js';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  throw new Error('Missing Supabase environment variables');
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey);

export interface BookWithoutFile {
  id: string;
  title: string;
  author: string;
  publication_year?: number;
  series_title?: string;
  series_order?: number;
  created_at: string;
}

export interface TelegramFile {
  message_id: number;
  file_name?: string;
  file_size?: number;
  mime_type?: string;
  caption?: string;
  date: number;
}

export interface FileSearchResult {
  book: BookWithoutFile;
  matches: TelegramFile[];
  score: number;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
 */
export class FileSearchService {
  private static instance: FileSearchService;

  public static async getInstance(): Promise<FileSearchService> {
    if (!FileSearchService.instance) {
      FileSearchService.instance = new FileSearchService();
    }
    return FileSearchService.instance;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  public async findBooksWithoutFiles(limit: number = 100): Promise<BookWithoutFile[]> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ (–ª–∏–º–∏—Ç: ${limit})...`);

      // –ò—â–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤ (file_url IS NULL –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
      const { data, error } = await supabaseAdmin
        .from('books')
        .select(`
          id,
          title,
          author,
          publication_year,
          series_order,
          created_at,
          series:series_id (
            title
          )
        `)
        .or('file_url.is.null,file_url.eq.')
        .order('created_at', { ascending: false })
        .limit(limit);

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤: ${error.message}`);
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const books: BookWithoutFile[] = (data || []).map(book => {
        const series = Array.isArray(book.series) ? book.series[0] : book.series;
        return {
          id: book.id,
          title: book.title,
          author: book.author,
          publication_year: book.publication_year,
          series_title: series?.title,
          series_order: book.series_order,
          created_at: book.created_at
        };
      });

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤`);
      return books;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞
   */
  public async getTelegramFiles(channelId: number, limit: number = 1000): Promise<TelegramFile[]> {
    try {
      console.log(`üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram –∫–∞–Ω–∞–ª–∞ ${channelId} (–ª–∏–º–∏—Ç: ${limit})...`);

      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
      // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å TelegramService
      const { TelegramService } = await import('./telegram/client');

      const telegramService = await TelegramService.getInstance();
      const channelEntity = await telegramService.getChannelEntityById(channelId);

      if (!channelEntity) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ${channelId}`);
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
      const messages = await telegramService.getAllMessages(channelEntity, 100);

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏
      const files: TelegramFile[] = [];

      for (const message of messages) {
        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É any –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
        const msg = message as any;

        if (msg.media && msg.media.document) {
          const document = msg.media.document;
          const fileName = document.attributes?.find((attr: any) => attr.fileName)?.fileName || 'unknown';
          const fileSize = document.size || 0;
          const mimeType = document.mimeType || 'application/octet-stream';

          files.push({
            message_id: msg.id,
            file_name: fileName,
            file_size: fileSize,
            mime_type: mimeType,
            caption: msg.message || '',
            date: msg.date
          });
        }
      }

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram`);
      return files.slice(0, limit);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram:', error);
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏
   */
  public searchFilesForBook(book: BookWithoutFile, telegramFiles: TelegramFile[]): FileSearchResult {
    console.log(`üîé –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏: "${book.title}" - ${book.author}`);

    const matches: TelegramFile[] = [];
    let bestScore = 0;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    const searchTerms = this.prepareSearchTerms(book);

    for (const file of telegramFiles) {
      const score = this.calculateRelevanceScore(file, searchTerms, book);

      if (score > 0) {
        matches.push({
          ...file,
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          relevance_score: score
        } as any);

        if (score > bestScore) {
          bestScore = score;
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    matches.sort((a, b) => (b as any).relevance_score - (a as any).relevance_score);

    return {
      book,
      matches: matches.slice(0, 20), // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      score: bestScore
    };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –∫–Ω–∏–≥–∏
   */
  private prepareSearchTerms(book: BookWithoutFile): string[] {
    const terms: string[] = [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const titleWords = book.title.toLowerCase()
      .replace(/[^\w\s]/g, ' ')
      .split(/\s+/)
      .filter(word => word.length > 2);

    terms.push(...titleWords);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –∏–∑ –∞–≤—Ç–æ—Ä–∞
    const authorWords = book.author.toLowerCase()
      .replace(/[^\w\s]/g, ' ')
      .split(/\s+/)
      .filter(word => word.length > 2);

    terms.push(...authorWords);

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (book.publication_year) {
      terms.push(book.publication_year.toString());
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (book.series_order) {
      terms.push(`—Ç–æ–º${book.series_order}`);
      terms.push(`—á${book.series_order}`);
      terms.push(`part${book.series_order}`);
    }

    return [...new Set(terms)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏
   */
  private calculateRelevanceScore(file: TelegramFile, searchTerms: string[], book: BookWithoutFile): number {
    let score = 0;
    const fileName = (file.file_name || '').toLowerCase();
    const caption = (file.caption || '').toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–∏—Å–∫–æ–≤–æ–µ —Å–ª–æ–≤–æ
    for (const term of searchTerms) {
      // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (fileName.includes(term)) {
        score += 10; // –í—ã—Å–æ–∫–∏–π –≤–µ—Å –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      }

      // –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–∞–π–ª—É
      if (caption.includes(term)) {
        score += 5; // –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –¥–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –ø–æ–¥–ø–∏—Å–∏
      }

      // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤)
      if (term.length > 3) {
        if (fileName.includes(term.substring(0, 4))) {
          score += 3;
        }
        if (caption.includes(term.substring(0, 4))) {
          score += 2;
        }
      }
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if (fileName.endsWith('.fb2') || fileName.endsWith('.epub')) {
      score += 2;
    }

    // –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–∫–Ω–∏–≥–∏ –æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 10KB –∏ –Ω–µ –±–æ–ª—å—à–µ 50MB)
    if (file.file_size && file.file_size > 10000 && file.file_size < 50000000) {
      score += 1;
    }

    return score;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
   */
  public async searchFilesForAllBooks(books: BookWithoutFile[], telegramFiles: TelegramFile[]): Promise<FileSearchResult[]> {
    console.log(`üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è ${books.length} –∫–Ω–∏–≥...`);

    const results: FileSearchResult[] = [];

    for (const book of books) {
      const result = this.searchFilesForBook(book, telegramFiles);
      if (result.matches.length > 0) {
        results.push(result);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª—É—á—à–µ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    results.sort((a, b) => b.score - a.score);

    console.log(`‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è ${results.length} –∫–Ω–∏–≥`);
    return results;
  }
}