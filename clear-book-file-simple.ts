import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import { config } from 'dotenv';
config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function clearBookFile(bookTitle: string, authorName: string) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏: "${bookTitle}" by "${authorName}"`);

    // First, find the author by name
    const { data: authorData, error: authorError } = await supabase
      .from('authors')
      .select('id')
      .ilike('name', authorName)
      .single();

    if (authorError || !authorData) {
      console.error(`‚ùå –ê–≤—Ç–æ—Ä "${authorName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    const authorId = authorData.id;
    console.log(`‚úÖ –ê–≤—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: ${authorName} (ID: ${authorId})`);

    // Find the book by title and author
    const { data: bookData, error: bookError } = await supabase
      .from('books')
      .select('id, file_path')
      .eq('author_id', authorId)
      .ilike('title', bookTitle)
      .single();

    if (bookError || !bookData) {
      console.error(`‚ùå –ö–Ω–∏–≥–∞ "${bookTitle}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∞ "${authorName}"`);
      return;
    }

    const bookId = bookData.id;
    const currentFilePath = bookData.file_path;
    
    if (!currentFilePath) {
      console.log(`‚ö†Ô∏è –£ –∫–Ω–∏–≥–∏ "${bookTitle}" —É–∂–µ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞`);
      return;
    }

    console.log(`üìö –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: "${bookTitle}" (ID: ${bookId})`);
    console.log(`üìÅ –¢–µ–∫—É—â–∏–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${currentFilePath}`);

    // Clear the file_path field for the book
    const { error: updateError } = await supabase
      .from('books')
      .update({ file_path: null })
      .eq('id', bookId);

    if (updateError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏: ${updateError.message}`);
      return;
    }

    console.log(`‚úÖ –§–∞–π–ª –∫–Ω–∏–≥–∏ "${bookTitle}" —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!`);
  } catch (error) {
    console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${(error as Error).message}`);
  }
}

async function clearBookFileById(bookId: string) {
  try {
    console.log(`üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ ID: ${bookId}`);

    // Find the book by ID
    const { data: bookData, error: bookError } = await supabase
      .from('books')
      .select('id, title, author, file_url, storage_path')
      .eq('id', bookId)
      .single();

    if (bookError || !bookData) {
      console.error(`‚ùå –ö–Ω–∏–≥–∞ —Å ID "${bookId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: "${bookData.title}" - ${bookData.author} (ID: ${bookData.id})`);

    // Check if there's a file linked
    if (!bookData.file_url && !bookData.storage_path) {
      console.log(`‚ö†Ô∏è –£ –∫–Ω–∏–≥–∏ —É–∂–µ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞`);
      return;
    }

    console.log(`üìÅ –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: ${bookData.file_url || bookData.storage_path}`);

    // Clear the file fields for the book without confirmation
    const { error: updateError } = await supabase
      .from('books')
      .update({
        file_url: null,
        storage_path: null,
        file_size: null,
        file_format: null,
        telegram_file_id: null,
        updated_at: new Date().toISOString()
      })
      .eq('id', bookId);

    if (updateError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏: ${updateError.message}`);
      return;
    }

    console.log(`‚úÖ –§–∞–π–ª –∫–Ω–∏–≥–∏ "${bookData.title}" —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!`);
  } catch (error) {
    console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${(error as Error).message}`);
  }
}

// Get command line arguments
const args = process.argv.slice(2);
if (args.length < 1) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É: npx tsx clear-book-file-simple.ts "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏" "–∏–º—è –∞–≤—Ç–æ—Ä–∞"');
  console.log('  –ü–æ ID –∫–Ω–∏–≥–∏: npx tsx clear-book-file-simple.ts --id "ID –∫–Ω–∏–≥–∏"');
  process.exit(1);
}

if (args[0] === '--id' && args.length === 2) {
  const bookId = args[1];
  clearBookFileById(bookId);
} else if (args.length === 2) {
  const [bookTitle, authorName] = args;
  clearBookFile(bookTitle, authorName);
} else {
  console.log('–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É: npx tsx clear-book-file-simple.ts "–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏" "–∏–º—è –∞–≤—Ç–æ—Ä–∞"');
  console.log('  –ü–æ ID –∫–Ω–∏–≥–∏: npx tsx clear-book-file-simple.ts --id "ID –∫–Ω–∏–≥–∏"');
  process.exit(1);
}