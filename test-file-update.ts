import { createClient } from '@supabase/supabase-js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import { config } from 'dotenv';
config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !serviceRoleKey) {
  console.error('‚ùå Missing Supabase environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function testFileUpdate() {
  try {
    console.log('üîç –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    const { data: books, error: booksError } = await supabase
      .from('books')
      .select('id, title, author, publication_year')
      .is('file_url', null)
      .order('author', { ascending: true })
      .order('title', { ascending: true })
      .limit(3); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∫–Ω–∏–≥ –¥–ª—è —Ç–µ—Å—Ç–∞

    if (booksError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥: ${booksError.message}`);
    }

    if (!books || books.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${books.length} –∫–Ω–∏–≥ –±–µ–∑ —Ñ–∞–π–ª–æ–≤:`);
    books.forEach((book, index) => {
      console.log(`${index + 1}. "${book.title}" - ${book.author}`);
    });

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
    for (let i = 0; i < books.length; i++) {
      const book = books[i];
      console.log(`\nüìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏ ${i + 1}/${books.length}: "${book.title}" - ${book.author}`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ telegram_files (–¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏)
      const { data: files, error: filesError } = await supabase
        .from('telegram_files')
        .select('message_id, file_name, file_size, mime_type, caption, date')
        .limit(5); // –ü–æ–ª—É—á–∞–µ–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

      if (filesError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ${filesError.message}`);
        continue;
      }

      if (!files || files.length === 0) {
        console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤');
        continue;
      }

      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏:`);
      files.forEach((file, index) => {
        console.log(`  ${index + 1}. ${file.file_name || `–§–∞–π–ª ${file.message_id}`} (${file.file_size || '—Ä–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})`);
      });

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–Ω–∏–≥
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

testFileUpdate();