import { serverSupabase } from './src/lib/serverSupabase';

async function analyzeProcessedMessages() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –≤ telegram_processed_messages...');
  
  try {
    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    const { count: totalCount, error: totalError } = await serverSupabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true });
    
    if (totalError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:', totalError);
      return;
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º channel
    const { count: emptyChannelCount, error: emptyChannelError } = await serverSupabase
      .from('telegram_processed_messages')
      .select('*', { count: 'exact', head: true })
      .or('channel.is.null,channel.eq.');
    
    if (emptyChannelError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º channel:', emptyChannelError);
    } else {
      console.log(`üìä –ó–∞–ø–∏—Å–µ–π —Å –ø—É—Å—Ç—ã–º channel: ${emptyChannelCount}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ message_id
    const { data: duplicateCheck, error: duplicateError } = await serverSupabase
      .from('telegram_processed_messages')
      .select('message_id, channel, count(*)')
      .group('message_id, channel')
      .order('count', { ascending: false })
      .limit(10);
    
    if (duplicateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', duplicateError);
    } else {
      console.log('üìà –¢–æ–ø 10 –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π (message_id, channel):');
      duplicateCheck?.forEach((item: any, index: number) => {
        console.log(`   ${index + 1}. message_id: ${item.message_id}, channel: '${item.channel}', count: ${item.count}`);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const { data: sampleRecords, error: sampleError } = await serverSupabase
      .from('telegram_processed_messages')
      .select('*')
      .limit(5);
    
    if (sampleError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–≤ –∑–∞–ø–∏—Å–µ–π:', sampleError);
    } else {
      console.log('üìã –û–±—Ä–∞–∑—Ü—ã –∑–∞–ø–∏—Å–µ–π:');
      sampleRecords?.forEach((record: any, index: number) => {
        console.log(`   ${index + 1}. message_id: ${record.message_id}, channel: '${record.channel || 'NULL'}', book_id: ${record.book_id || 'NULL'}, processed_at: ${record.processed_at}`);
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
analyzeProcessedMessages();